// (c) 2019 Takamitsu Endo
//
// This file is part of TrapezoidSynth.
//
// TrapezoidSynth is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// TrapezoidSynth is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with TrapezoidSynth.  If not, see <https://www.gnu.org/licenses/>.

#include "parameter.hpp"
#include "dsp/constants.hpp"

using namespace SomeDSP;

IntScale<double> Scales::boolScale(1);
LinearScale<double> Scales::defaultScale(0.0, 1.0);

LinearScale<double> Scales::semi(-24.0, 24.0);
LinearScale<double> Scales::cent(-100.0, 100.0);
LinearScale<double> Scales::overtone(1.0, 32.0);
LinearScale<double> Scales::pitchDrift(0.0, 3.0);
LogScale<double> Scales::oscSlope(1.0, 32.0, 0.5, 8.0);
LogScale<double> Scales::oscFeedback(0.0, 1.0, 0.5, 0.1);
LogScale<double> Scales::phaseModulation(0.0, 1.0, 0.5, 0.2);

LogScale<double> Scales::envelopeA(0.0, 16.0, 0.5, 1.0);
LogScale<double> Scales::envelopeD(0.01, 16.0, 0.5, 2.0);
LogScale<double> Scales::envelopeS(0.0, 1.0, 0.5, 0.3);
LogScale<double> Scales::envelopeR(0.0012, 16.0, 0.5, 2.0);

LogScale<double> Scales::filterCutoff(20.0, 20000.0, 0.5, 1000.0);
LogScale<double> Scales::filterResonance(0.0, 1.0, 0.5, 0.3);
LogScale<double> Scales::filterSaturation(0.01, 8.0, 0.3, 0.5);
IntScale<double> Scales::filterOrder(7);
SPolyScale<double> Scales::filterEnvToCutoff(-1.0, 1.0, 0.3);
LinearScale<double> Scales::filterKeyToCutoff(0.0, 2.0);
LinearScale<double> Scales::oscMixToFilterCutoff(0.0, 0.5);
LinearScale<double> Scales::filterEnvToOctave(-9.0, 9.0);

LogScale<double> Scales::modEnvelopeA(0.0, 4.0, 0.5, 0.5);
LogScale<double> Scales::modEnvelopeCurve(1.0, 96.0, 0.5, 8.0);
LogScale<double> Scales::modEnvToShifter(0.0, 4000.0, 0.5, 500.0);

LinearScale<double> Scales::shifterSemi(0.0, 24.0);
LinearScale<double> Scales::shifterCent(0.0, 100.0);

IntScale<double> Scales::lfoType(3);
LogScale<double> Scales::lfoFrequency(0.1, 20.0, 0.5, 4.0);
LogScale<double> Scales::lfoSlope(0.0, 32.0, 0.5, 8.0);

LinearScale<double> Scales::octave(-4.0, 4.0);

IntScale<double> Scales::pitchSlideType(2);
LogScale<double> Scales::pitchSlide(0.001, 0.5, 0.5, 0.15);
LinearScale<double> Scales::pitchSlideOffset(0.0, 2.0);

LogScale<double> Scales::smoothness(0.001, 0.5, 0.5, 0.2);

LogScale<double> Scales::gain(0.0, 4.0, 0.5, 0.75);

// Generated from preset dump. This works, but hard coding preset data is seriously bad.
void GlobalParameter::loadProgram(uint32_t index)
{
  using ID = ParameterID::ID;

  switch (index) {
    default:
      resetParameter();
      break;

    case presetDefault: {
      value[ID::bypass]->setFromInt(0);
      value[ID::osc1Semi]->setFromNormalized(0.5);
      value[ID::osc1Cent]->setFromNormalized(0.5);
      value[ID::osc1PitchDrift]->setFromNormalized(0.0);
      value[ID::osc1Slope]->setFromNormalized(0.5);
      value[ID::osc1PulseWidth]->setFromNormalized(0.5);
      value[ID::osc1Feedback]->setFromNormalized(0.0);
      value[ID::osc2Semi]->setFromNormalized(0.5);
      value[ID::osc2Cent]->setFromNormalized(0.5);
      value[ID::osc2Overtone]->setFromNormalized(0.0);
      value[ID::osc2Slope]->setFromNormalized(0.5);
      value[ID::osc2PulseWidth]->setFromNormalized(0.5);
      value[ID::pmOsc2ToOsc1]->setFromNormalized(0.0);
      value[ID::gain]->setFromNormalized(0.5);
      value[ID::gainA]->setFromNormalized(0.0);
      value[ID::gainD]->setFromNormalized(0.5);
      value[ID::gainS]->setFromNormalized(0.8);
      value[ID::gainR]->setFromNormalized(0.09999999999999999);
      value[ID::gainCurve]->setFromNormalized(0.0);
      value[ID::gainEnvRetrigger]->setFromInt(1);
      value[ID::filterOrder]->setFromInt(7);
      value[ID::filterCutoff]->setFromNormalized(1.0);
      value[ID::filterFeedback]->setFromNormalized(0.0);
      value[ID::filterSaturation]->setFromNormalized(0.3);
      value[ID::filterEnvToCutoff]->setFromNormalized(0.5);
      value[ID::filterKeyToCutoff]->setFromNormalized(0.5);
      value[ID::oscMixToFilterCutoff]->setFromNormalized(0.0);
      value[ID::filterA]->setFromNormalized(0.0);
      value[ID::filterD]->setFromNormalized(0.5);
      value[ID::filterS]->setFromNormalized(0.0);
      value[ID::filterR]->setFromNormalized(0.5);
      value[ID::filterCurve]->setFromNormalized(0.0);
      value[ID::filterEnvToOctave]->setFromNormalized(0.5);
      value[ID::filterEnvRetrigger]->setFromInt(1);
      value[ID::modEnv1Attack]->setFromNormalized(0.0);
      value[ID::modEnv1Curve]->setFromNormalized(0.5);
      value[ID::modEnv1ToPhaseMod]->setFromNormalized(0.0);
      value[ID::modEnv1Retrigger]->setFromInt(1);
      value[ID::modEnv2Attack]->setFromNormalized(0.0);
      value[ID::modEnv2Curve]->setFromNormalized(0.5);
      value[ID::modEnv2ToFeedback]->setFromNormalized(0.0);
      value[ID::modEnv2ToLFOFrequency]->setFromNormalized(0.0);
      value[ID::modEnv2ToOsc2Slope]->setFromNormalized(0.0);
      value[ID::modEnv2ToShifter1]->setFromNormalized(0.0);
      value[ID::modEnv2Retrigger]->setFromInt(1);
      value[ID::shifter1Semi]->setFromNormalized(0.29170833333333335);
      value[ID::shifter1Cent]->setFromNormalized(0.0);
      value[ID::shifter1Gain]->setFromNormalized(0.0);
      value[ID::shifter2Semi]->setFromNormalized(0.583375);
      value[ID::shifter2Cent]->setFromNormalized(0.0);
      value[ID::shifter2Gain]->setFromNormalized(0.0);
      value[ID::lfoType]->setFromInt(0);
      value[ID::lfoTempoSync]->setFromInt(0);
      value[ID::lfoFrequency]->setFromNormalized(0.5);
      value[ID::lfoShape]->setFromNormalized(0.5);
      value[ID::lfoToPitch]->setFromNormalized(0.0);
      value[ID::lfoToSlope]->setFromNormalized(0.0);
      value[ID::lfoToPulseWidth]->setFromNormalized(0.0);
      value[ID::lfoToCutoff]->setFromNormalized(0.0);
      value[ID::oscMix]->setFromNormalized(0.5);
      value[ID::octave]->setFromNormalized(0.5);
      value[ID::pitchSlideType]->setFromInt(1);
      value[ID::pitchSlide]->setFromNormalized(0.1);
      value[ID::pitchSlideOffset]->setFromNormalized(0.5);
      value[ID::smoothness]->setFromNormalized(0.1);
      value[ID::pitchBend]->setFromNormalized(0.5);
    } break;

    case presetBassAndSweep: {
      value[ID::bypass]->setFromInt(0);
      value[ID::osc1Semi]->setFromNormalized(0.0);
      value[ID::osc1Cent]->setFromNormalized(0.5);
      value[ID::osc1PitchDrift]->setFromNormalized(0.0);
      value[ID::osc1Slope]->setFromNormalized(0.0);
      value[ID::osc1PulseWidth]->setFromNormalized(0.5);
      value[ID::osc1Feedback]->setFromNormalized(0.0);
      value[ID::osc2Semi]->setFromNormalized(0.0);
      value[ID::osc2Cent]->setFromNormalized(0.5);
      value[ID::osc2Overtone]->setFromNormalized(0.0);
      value[ID::osc2Slope]->setFromNormalized(0.0);
      value[ID::osc2PulseWidth]->setFromNormalized(0.5);
      value[ID::pmOsc2ToOsc1]->setFromNormalized(0.0);
      value[ID::gain]->setFromNormalized(0.5);
      value[ID::gainA]->setFromNormalized(0.0);
      value[ID::gainD]->setFromNormalized(0.5);
      value[ID::gainS]->setFromNormalized(0.8);
      value[ID::gainR]->setFromNormalized(0.09999999999999998);
      value[ID::gainCurve]->setFromNormalized(0.0);
      value[ID::gainEnvRetrigger]->setFromInt(1);
      value[ID::filterOrder]->setFromInt(5);
      value[ID::filterCutoff]->setFromNormalized(0.12000000476837158);
      value[ID::filterFeedback]->setFromNormalized(0.8880000114440918);
      value[ID::filterSaturation]->setFromNormalized(0.7240002751350403);
      value[ID::filterEnvToCutoff]->setFromNormalized(0.590100874852465);
      value[ID::filterKeyToCutoff]->setFromNormalized(0.0);
      value[ID::oscMixToFilterCutoff]->setFromNormalized(0.0);
      value[ID::filterA]->setFromNormalized(0.0);
      value[ID::filterD]->setFromNormalized(0.5);
      value[ID::filterS]->setFromNormalized(0.0);
      value[ID::filterR]->setFromNormalized(0.5);
      value[ID::filterCurve]->setFromNormalized(0.0);
      value[ID::filterEnvToOctave]->setFromNormalized(0.5);
      value[ID::filterEnvRetrigger]->setFromInt(1);
      value[ID::modEnv1Attack]->setFromNormalized(0.0);
      value[ID::modEnv1Curve]->setFromNormalized(0.5);
      value[ID::modEnv1ToPhaseMod]->setFromNormalized(0.6959999799728394);
      value[ID::modEnv1Retrigger]->setFromInt(1);
      value[ID::modEnv2Attack]->setFromNormalized(0.0);
      value[ID::modEnv2Curve]->setFromNormalized(0.1199999898672104);
      value[ID::modEnv2ToFeedback]->setFromNormalized(0.0);
      value[ID::modEnv2ToLFOFrequency]->setFromNormalized(0.0);
      value[ID::modEnv2ToOsc2Slope]->setFromNormalized(0.0);
      value[ID::modEnv2ToShifter1]->setFromNormalized(1.0);
      value[ID::modEnv2Retrigger]->setFromInt(1);
      value[ID::shifter1Semi]->setFromNormalized(0.0);
      value[ID::shifter1Cent]->setFromNormalized(0.0);
      value[ID::shifter1Gain]->setFromNormalized(0.4560000002384186);
      value[ID::shifter2Semi]->setFromNormalized(0.5193748474121094);
      value[ID::shifter2Cent]->setFromNormalized(0.0);
      value[ID::shifter2Gain]->setFromNormalized(0.8999999165534973);
      value[ID::lfoType]->setFromInt(0);
      value[ID::lfoTempoSync]->setFromInt(0);
      value[ID::lfoFrequency]->setFromNormalized(0.5);
      value[ID::lfoShape]->setFromNormalized(0.5);
      value[ID::lfoToPitch]->setFromNormalized(0.0);
      value[ID::lfoToSlope]->setFromNormalized(0.0);
      value[ID::lfoToPulseWidth]->setFromNormalized(0.0);
      value[ID::lfoToCutoff]->setFromNormalized(0.0);
      value[ID::oscMix]->setFromNormalized(0.5);
      value[ID::octave]->setFromNormalized(0.5);
      value[ID::pitchSlideType]->setFromInt(1);
      value[ID::pitchSlide]->setFromNormalized(0.1);
      value[ID::pitchSlideOffset]->setFromNormalized(0.5);
      value[ID::smoothness]->setFromNormalized(0.1);
      value[ID::pitchBend]->setFromNormalized(0.5);
    } break;

    case presetBelow: {
      value[ID::bypass]->setFromInt(0);
      value[ID::osc1Semi]->setFromNormalized(0.0);
      value[ID::osc1Cent]->setFromNormalized(0.5);
      value[ID::osc1PitchDrift]->setFromNormalized(0.0);
      value[ID::osc1Slope]->setFromNormalized(0.7999999523162842);
      value[ID::osc1PulseWidth]->setFromNormalized(0.23200005292892456);
      value[ID::osc1Feedback]->setFromNormalized(0.0);
      value[ID::osc2Semi]->setFromNormalized(0.5);
      value[ID::osc2Cent]->setFromNormalized(0.5);
      value[ID::osc2Overtone]->setFromNormalized(0.31199997663497925);
      value[ID::osc2Slope]->setFromNormalized(0.5);
      value[ID::osc2PulseWidth]->setFromNormalized(0.19999995827674866);
      value[ID::pmOsc2ToOsc1]->setFromNormalized(0.0);
      value[ID::gain]->setFromNormalized(0.5);
      value[ID::gainA]->setFromNormalized(0.0);
      value[ID::gainD]->setFromNormalized(0.5);
      value[ID::gainS]->setFromNormalized(0.8);
      value[ID::gainR]->setFromNormalized(0.09999999999999998);
      value[ID::gainCurve]->setFromNormalized(0.0);
      value[ID::gainEnvRetrigger]->setFromInt(1);
      value[ID::filterOrder]->setFromInt(7);
      value[ID::filterCutoff]->setFromNormalized(0.41600021719932556);
      value[ID::filterFeedback]->setFromNormalized(0.0);
      value[ID::filterSaturation]->setFromNormalized(0.3);
      value[ID::filterEnvToCutoff]->setFromNormalized(0.5379108066782622);
      value[ID::filterKeyToCutoff]->setFromNormalized(0.5);
      value[ID::oscMixToFilterCutoff]->setFromNormalized(0.0);
      value[ID::filterA]->setFromNormalized(0.0);
      value[ID::filterD]->setFromNormalized(0.34000000357627863);
      value[ID::filterS]->setFromNormalized(0.0);
      value[ID::filterR]->setFromNormalized(0.5);
      value[ID::filterCurve]->setFromNormalized(0.0);
      value[ID::filterEnvToOctave]->setFromNormalized(1.0);
      value[ID::filterEnvRetrigger]->setFromInt(1);
      value[ID::modEnv1Attack]->setFromNormalized(0.0);
      value[ID::modEnv1Curve]->setFromNormalized(0.5);
      value[ID::modEnv1ToPhaseMod]->setFromNormalized(0.0);
      value[ID::modEnv1Retrigger]->setFromInt(1);
      value[ID::modEnv2Attack]->setFromNormalized(0.0);
      value[ID::modEnv2Curve]->setFromNormalized(0.8799999356269836);
      value[ID::modEnv2ToFeedback]->setFromNormalized(0.0);
      value[ID::modEnv2ToLFOFrequency]->setFromNormalized(0.0);
      value[ID::modEnv2ToOsc2Slope]->setFromNormalized(0.0);
      value[ID::modEnv2ToShifter1]->setFromNormalized(0.0);
      value[ID::modEnv2Retrigger]->setFromInt(1);
      value[ID::shifter1Semi]->setFromNormalized(0.29170833333333335);
      value[ID::shifter1Cent]->setFromNormalized(0.0);
      value[ID::shifter1Gain]->setFromNormalized(0.5360000133514404);
      value[ID::shifter2Semi]->setFromNormalized(1.0);
      value[ID::shifter2Cent]->setFromNormalized(0.0);
      value[ID::shifter2Gain]->setFromNormalized(0.3840000331401825);
      value[ID::lfoType]->setFromInt(0);
      value[ID::lfoTempoSync]->setFromInt(0);
      value[ID::lfoFrequency]->setFromNormalized(0.5);
      value[ID::lfoShape]->setFromNormalized(0.5);
      value[ID::lfoToPitch]->setFromNormalized(0.0);
      value[ID::lfoToSlope]->setFromNormalized(0.0);
      value[ID::lfoToPulseWidth]->setFromNormalized(0.0);
      value[ID::lfoToCutoff]->setFromNormalized(0.0);
      value[ID::oscMix]->setFromNormalized(0.2520001530647278);
      value[ID::octave]->setFromNormalized(0.0);
      value[ID::pitchSlideType]->setFromInt(1);
      value[ID::pitchSlide]->setFromNormalized(0.1);
      value[ID::pitchSlideOffset]->setFromNormalized(0.5);
      value[ID::smoothness]->setFromNormalized(0.1);
      value[ID::pitchBend]->setFromNormalized(0.5);
    } break;

    case presetBrokenModulation: {
      value[ID::bypass]->setFromInt(0);
      value[ID::osc1Semi]->setFromNormalized(1.0);
      value[ID::osc1Cent]->setFromNormalized(0.5);
      value[ID::osc1PitchDrift]->setFromNormalized(0.0);
      value[ID::osc1Slope]->setFromNormalized(0.5);
      value[ID::osc1PulseWidth]->setFromNormalized(0.5);
      value[ID::osc1Feedback]->setFromNormalized(0.7239999771118164);
      value[ID::osc2Semi]->setFromNormalized(0.5);
      value[ID::osc2Cent]->setFromNormalized(0.5);
      value[ID::osc2Overtone]->setFromNormalized(0.0);
      value[ID::osc2Slope]->setFromNormalized(0.5);
      value[ID::osc2PulseWidth]->setFromNormalized(0.5);
      value[ID::pmOsc2ToOsc1]->setFromNormalized(0.8799999356269836);
      value[ID::gain]->setFromNormalized(0.5);
      value[ID::gainA]->setFromNormalized(0.0);
      value[ID::gainD]->setFromNormalized(0.29600000381469727);
      value[ID::gainS]->setFromNormalized(0.0);
      value[ID::gainR]->setFromNormalized(0.18800002336502072);
      value[ID::gainCurve]->setFromNormalized(0.0);
      value[ID::gainEnvRetrigger]->setFromInt(1);
      value[ID::filterOrder]->setFromInt(7);
      value[ID::filterCutoff]->setFromNormalized(1.0);
      value[ID::filterFeedback]->setFromNormalized(0.0);
      value[ID::filterSaturation]->setFromNormalized(0.3);
      value[ID::filterEnvToCutoff]->setFromNormalized(0.5);
      value[ID::filterKeyToCutoff]->setFromNormalized(0.5);
      value[ID::oscMixToFilterCutoff]->setFromNormalized(0.0);
      value[ID::filterA]->setFromNormalized(0.0);
      value[ID::filterD]->setFromNormalized(0.5);
      value[ID::filterS]->setFromNormalized(0.0);
      value[ID::filterR]->setFromNormalized(0.5);
      value[ID::filterCurve]->setFromNormalized(0.0);
      value[ID::filterEnvToOctave]->setFromNormalized(0.5);
      value[ID::filterEnvRetrigger]->setFromInt(1);
      value[ID::modEnv1Attack]->setFromNormalized(0.0);
      value[ID::modEnv1Curve]->setFromNormalized(0.5);
      value[ID::modEnv1ToPhaseMod]->setFromNormalized(0.0);
      value[ID::modEnv1Retrigger]->setFromInt(1);
      value[ID::modEnv2Attack]->setFromNormalized(0.0);
      value[ID::modEnv2Curve]->setFromNormalized(0.32800009846687317);
      value[ID::modEnv2ToFeedback]->setFromNormalized(0.4520000219345093);
      value[ID::modEnv2ToLFOFrequency]->setFromNormalized(0.0);
      value[ID::modEnv2ToOsc2Slope]->setFromNormalized(0.0);
      value[ID::modEnv2ToShifter1]->setFromNormalized(0.0);
      value[ID::modEnv2Retrigger]->setFromInt(1);
      value[ID::shifter1Semi]->setFromNormalized(0.5077082514762878);
      value[ID::shifter1Cent]->setFromNormalized(0.0);
      value[ID::shifter1Gain]->setFromNormalized(1.0);
      value[ID::shifter2Semi]->setFromNormalized(0.6959993839263916);
      value[ID::shifter2Cent]->setFromNormalized(0.47599995136260986);
      value[ID::shifter2Gain]->setFromNormalized(1.0);
      value[ID::lfoType]->setFromInt(0);
      value[ID::lfoTempoSync]->setFromInt(0);
      value[ID::lfoFrequency]->setFromNormalized(0.5);
      value[ID::lfoShape]->setFromNormalized(0.5);
      value[ID::lfoToPitch]->setFromNormalized(0.0);
      value[ID::lfoToSlope]->setFromNormalized(0.0);
      value[ID::lfoToPulseWidth]->setFromNormalized(0.0);
      value[ID::lfoToCutoff]->setFromNormalized(0.0);
      value[ID::oscMix]->setFromNormalized(0.0);
      value[ID::octave]->setFromNormalized(1.0);
      value[ID::pitchSlideType]->setFromInt(1);
      value[ID::pitchSlide]->setFromNormalized(0.6360000371932983);
      value[ID::pitchSlideOffset]->setFromNormalized(0.796000063419342);
      value[ID::smoothness]->setFromNormalized(0.1);
      value[ID::pitchBend]->setFromNormalized(0.5);
    } break;

    case presetDetuneWhileSliding: {
      value[ID::bypass]->setFromInt(0);
      value[ID::osc1Semi]->setFromNormalized(0.5);
      value[ID::osc1Cent]->setFromNormalized(0.5);
      value[ID::osc1PitchDrift]->setFromNormalized(0.0);
      value[ID::osc1Slope]->setFromNormalized(0.0);
      value[ID::osc1PulseWidth]->setFromNormalized(0.5);
      value[ID::osc1Feedback]->setFromNormalized(0.0);
      value[ID::osc2Semi]->setFromNormalized(0.5);
      value[ID::osc2Cent]->setFromNormalized(0.5);
      value[ID::osc2Overtone]->setFromNormalized(0.0);
      value[ID::osc2Slope]->setFromNormalized(0.0);
      value[ID::osc2PulseWidth]->setFromNormalized(0.5);
      value[ID::pmOsc2ToOsc1]->setFromNormalized(0.0);
      value[ID::gain]->setFromNormalized(0.5);
      value[ID::gainA]->setFromNormalized(0.0);
      value[ID::gainD]->setFromNormalized(0.5);
      value[ID::gainS]->setFromNormalized(0.8);
      value[ID::gainR]->setFromNormalized(0.6920000314712524);
      value[ID::gainCurve]->setFromNormalized(0.0);
      value[ID::gainEnvRetrigger]->setFromInt(1);
      value[ID::filterOrder]->setFromInt(7);
      value[ID::filterCutoff]->setFromNormalized(1.0);
      value[ID::filterFeedback]->setFromNormalized(0.0);
      value[ID::filterSaturation]->setFromNormalized(0.3);
      value[ID::filterEnvToCutoff]->setFromNormalized(0.5);
      value[ID::filterKeyToCutoff]->setFromNormalized(0.5);
      value[ID::oscMixToFilterCutoff]->setFromNormalized(0.0);
      value[ID::filterA]->setFromNormalized(0.0);
      value[ID::filterD]->setFromNormalized(0.5);
      value[ID::filterS]->setFromNormalized(0.0);
      value[ID::filterR]->setFromNormalized(0.5);
      value[ID::filterCurve]->setFromNormalized(0.0);
      value[ID::filterEnvToOctave]->setFromNormalized(0.5);
      value[ID::filterEnvRetrigger]->setFromInt(1);
      value[ID::modEnv1Attack]->setFromNormalized(0.0);
      value[ID::modEnv1Curve]->setFromNormalized(0.5);
      value[ID::modEnv1ToPhaseMod]->setFromNormalized(0.0);
      value[ID::modEnv1Retrigger]->setFromInt(1);
      value[ID::modEnv2Attack]->setFromNormalized(0.0);
      value[ID::modEnv2Curve]->setFromNormalized(0.5);
      value[ID::modEnv2ToFeedback]->setFromNormalized(0.0);
      value[ID::modEnv2ToLFOFrequency]->setFromNormalized(0.0);
      value[ID::modEnv2ToOsc2Slope]->setFromNormalized(0.0);
      value[ID::modEnv2ToShifter1]->setFromNormalized(0.0);
      value[ID::modEnv2Retrigger]->setFromInt(1);
      value[ID::shifter1Semi]->setFromNormalized(0.29170833333333335);
      value[ID::shifter1Cent]->setFromNormalized(0.0);
      value[ID::shifter1Gain]->setFromNormalized(0.0);
      value[ID::shifter2Semi]->setFromNormalized(0.583375);
      value[ID::shifter2Cent]->setFromNormalized(0.0);
      value[ID::shifter2Gain]->setFromNormalized(0.0);
      value[ID::lfoType]->setFromInt(0);
      value[ID::lfoTempoSync]->setFromInt(0);
      value[ID::lfoFrequency]->setFromNormalized(0.5);
      value[ID::lfoShape]->setFromNormalized(0.5);
      value[ID::lfoToPitch]->setFromNormalized(0.0);
      value[ID::lfoToSlope]->setFromNormalized(0.0);
      value[ID::lfoToPulseWidth]->setFromNormalized(0.0);
      value[ID::lfoToCutoff]->setFromNormalized(0.0);
      value[ID::oscMix]->setFromNormalized(0.5);
      value[ID::octave]->setFromNormalized(0.5);
      value[ID::pitchSlideType]->setFromInt(0);
      value[ID::pitchSlide]->setFromNormalized(0.49199995398521423);
      value[ID::pitchSlideOffset]->setFromNormalized(0.800000011920929);
      value[ID::smoothness]->setFromNormalized(0.1);
      value[ID::pitchBend]->setFromNormalized(0.5);
    } break;

    case presetDetunedPhaseMod: {
      value[ID::bypass]->setFromInt(0);
      value[ID::osc1Semi]->setFromNormalized(0.24799992144107819);
      value[ID::osc1Cent]->setFromNormalized(0.6880001425743103);
      value[ID::osc1PitchDrift]->setFromNormalized(0.0);
      value[ID::osc1Slope]->setFromNormalized(0.6039999723434448);
      value[ID::osc1PulseWidth]->setFromNormalized(0.6280000805854797);
      value[ID::osc1Feedback]->setFromNormalized(0.0);
      value[ID::osc2Semi]->setFromNormalized(0.5);
      value[ID::osc2Cent]->setFromNormalized(0.5);
      value[ID::osc2Overtone]->setFromNormalized(0.0);
      value[ID::osc2Slope]->setFromNormalized(0.5);
      value[ID::osc2PulseWidth]->setFromNormalized(0.5);
      value[ID::pmOsc2ToOsc1]->setFromNormalized(0.19200000166893005);
      value[ID::gain]->setFromNormalized(0.5);
      value[ID::gainA]->setFromNormalized(0.0);
      value[ID::gainD]->setFromNormalized(0.5);
      value[ID::gainS]->setFromNormalized(0.800000011920929);
      value[ID::gainR]->setFromNormalized(0.09999999999999998);
      value[ID::gainCurve]->setFromNormalized(0.0);
      value[ID::gainEnvRetrigger]->setFromInt(1);
      value[ID::filterOrder]->setFromInt(7);
      value[ID::filterCutoff]->setFromNormalized(1.0);
      value[ID::filterFeedback]->setFromNormalized(0.0);
      value[ID::filterSaturation]->setFromNormalized(0.3);
      value[ID::filterEnvToCutoff]->setFromNormalized(0.5);
      value[ID::filterKeyToCutoff]->setFromNormalized(0.5);
      value[ID::oscMixToFilterCutoff]->setFromNormalized(0.0);
      value[ID::filterA]->setFromNormalized(0.0);
      value[ID::filterD]->setFromNormalized(0.5);
      value[ID::filterS]->setFromNormalized(0.0);
      value[ID::filterR]->setFromNormalized(0.5);
      value[ID::filterCurve]->setFromNormalized(0.0);
      value[ID::filterEnvToOctave]->setFromNormalized(0.5);
      value[ID::filterEnvRetrigger]->setFromInt(1);
      value[ID::modEnv1Attack]->setFromNormalized(0.0);
      value[ID::modEnv1Curve]->setFromNormalized(0.5);
      value[ID::modEnv1ToPhaseMod]->setFromNormalized(0.4400000274181366);
      value[ID::modEnv1Retrigger]->setFromInt(1);
      value[ID::modEnv2Attack]->setFromNormalized(0.8039999604225159);
      value[ID::modEnv2Curve]->setFromNormalized(0.5);
      value[ID::modEnv2ToFeedback]->setFromNormalized(0.0);
      value[ID::modEnv2ToLFOFrequency]->setFromNormalized(0.0);
      value[ID::modEnv2ToOsc2Slope]->setFromNormalized(0.4880000054836273);
      value[ID::modEnv2ToShifter1]->setFromNormalized(0.0);
      value[ID::modEnv2Retrigger]->setFromInt(1);
      value[ID::shifter1Semi]->setFromNormalized(0.09570838510990143);
      value[ID::shifter1Cent]->setFromNormalized(0.0);
      value[ID::shifter1Gain]->setFromNormalized(0.03199993073940277);
      value[ID::shifter2Semi]->setFromNormalized(0.7913753390312195);
      value[ID::shifter2Cent]->setFromNormalized(0.7720000147819519);
      value[ID::shifter2Gain]->setFromNormalized(0.13600000739097595);
      value[ID::lfoType]->setFromInt(0);
      value[ID::lfoTempoSync]->setFromInt(0);
      value[ID::lfoFrequency]->setFromNormalized(0.5);
      value[ID::lfoShape]->setFromNormalized(0.5);
      value[ID::lfoToPitch]->setFromNormalized(0.0);
      value[ID::lfoToSlope]->setFromNormalized(0.0);
      value[ID::lfoToPulseWidth]->setFromNormalized(0.0);
      value[ID::lfoToCutoff]->setFromNormalized(0.0);
      value[ID::oscMix]->setFromNormalized(0.0);
      value[ID::octave]->setFromNormalized(0.5);
      value[ID::pitchSlideType]->setFromInt(1);
      value[ID::pitchSlide]->setFromNormalized(0.1);
      value[ID::pitchSlideOffset]->setFromNormalized(0.5);
      value[ID::smoothness]->setFromNormalized(0.1);
      value[ID::pitchBend]->setFromNormalized(0.5);
    } break;

    case presetDrift: {
      value[ID::bypass]->setFromInt(0);
      value[ID::osc1Semi]->setFromNormalized(0.3640000820159912);
      value[ID::osc1Cent]->setFromNormalized(0.4280000925064087);
      value[ID::osc1PitchDrift]->setFromNormalized(0.1599999964237213);
      value[ID::osc1Slope]->setFromNormalized(0.5);
      value[ID::osc1PulseWidth]->setFromNormalized(0.2120000272989273);
      value[ID::osc1Feedback]->setFromNormalized(0.0);
      value[ID::osc2Semi]->setFromNormalized(0.5);
      value[ID::osc2Cent]->setFromNormalized(0.5);
      value[ID::osc2Overtone]->setFromNormalized(0.0);
      value[ID::osc2Slope]->setFromNormalized(0.38399997353553766);
      value[ID::osc2PulseWidth]->setFromNormalized(0.5);
      value[ID::pmOsc2ToOsc1]->setFromNormalized(0.0);
      value[ID::gain]->setFromNormalized(0.5);
      value[ID::gainA]->setFromNormalized(0.0);
      value[ID::gainD]->setFromNormalized(0.5);
      value[ID::gainS]->setFromNormalized(0.5960000157356262);
      value[ID::gainR]->setFromNormalized(0.5039999485015869);
      value[ID::gainCurve]->setFromNormalized(0.0);
      value[ID::gainEnvRetrigger]->setFromInt(1);
      value[ID::filterOrder]->setFromInt(7);
      value[ID::filterCutoff]->setFromNormalized(0.18400025367736816);
      value[ID::filterFeedback]->setFromNormalized(0.887999951839447);
      value[ID::filterSaturation]->setFromNormalized(0.3);
      value[ID::filterEnvToCutoff]->setFromNormalized(1.0);
      value[ID::filterKeyToCutoff]->setFromNormalized(0.5);
      value[ID::oscMixToFilterCutoff]->setFromNormalized(0.0);
      value[ID::filterA]->setFromNormalized(0.0);
      value[ID::filterD]->setFromNormalized(0.5);
      value[ID::filterS]->setFromNormalized(0.0);
      value[ID::filterR]->setFromNormalized(0.5);
      value[ID::filterCurve]->setFromNormalized(0.0);
      value[ID::filterEnvToOctave]->setFromNormalized(0.5);
      value[ID::filterEnvRetrigger]->setFromInt(1);
      value[ID::modEnv1Attack]->setFromNormalized(0.0);
      value[ID::modEnv1Curve]->setFromNormalized(0.5);
      value[ID::modEnv1ToPhaseMod]->setFromNormalized(0.0);
      value[ID::modEnv1Retrigger]->setFromInt(1);
      value[ID::modEnv2Attack]->setFromNormalized(0.0);
      value[ID::modEnv2Curve]->setFromNormalized(0.5);
      value[ID::modEnv2ToFeedback]->setFromNormalized(0.0);
      value[ID::modEnv2ToLFOFrequency]->setFromNormalized(0.0);
      value[ID::modEnv2ToOsc2Slope]->setFromNormalized(0.6600000858306885);
      value[ID::modEnv2ToShifter1]->setFromNormalized(0.0);
      value[ID::modEnv2Retrigger]->setFromInt(1);
      value[ID::shifter1Semi]->setFromNormalized(0.21570836007595062);
      value[ID::shifter1Cent]->setFromNormalized(0.1679999828338623);
      value[ID::shifter1Gain]->setFromNormalized(0.5880000591278076);
      value[ID::shifter2Semi]->setFromNormalized(0.7153752446174622);
      value[ID::shifter2Cent]->setFromNormalized(0.6079999804496765);
      value[ID::shifter2Gain]->setFromNormalized(0.2640000581741333);
      value[ID::lfoType]->setFromInt(1);
      value[ID::lfoTempoSync]->setFromInt(0);
      value[ID::lfoFrequency]->setFromNormalized(0.6359999179840088);
      value[ID::lfoShape]->setFromNormalized(0.04400002956390381);
      value[ID::lfoToPitch]->setFromNormalized(0.04400002956390381);
      value[ID::lfoToSlope]->setFromNormalized(0.0);
      value[ID::lfoToPulseWidth]->setFromNormalized(0.0);
      value[ID::lfoToCutoff]->setFromNormalized(0.0);
      value[ID::oscMix]->setFromNormalized(0.4720001220703125);
      value[ID::octave]->setFromNormalized(0.5);
      value[ID::pitchSlideType]->setFromInt(0);
      value[ID::pitchSlide]->setFromNormalized(0.12400000542402267);
      value[ID::pitchSlideOffset]->setFromNormalized(0.9440000057220459);
      value[ID::smoothness]->setFromNormalized(0.1);
      value[ID::pitchBend]->setFromNormalized(0.5);
    } break;

    case presetGroan: {
      value[ID::bypass]->setFromInt(0);
      value[ID::osc1Semi]->setFromNormalized(0.5);
      value[ID::osc1Cent]->setFromNormalized(0.5);
      value[ID::osc1PitchDrift]->setFromNormalized(0.0);
      value[ID::osc1Slope]->setFromNormalized(0.5);
      value[ID::osc1PulseWidth]->setFromNormalized(0.5);
      value[ID::osc1Feedback]->setFromNormalized(0.0);
      value[ID::osc2Semi]->setFromNormalized(0.5039994716644287);
      value[ID::osc2Cent]->setFromNormalized(0.5);
      value[ID::osc2Overtone]->setFromNormalized(0.34800001978874207);
      value[ID::osc2Slope]->setFromNormalized(0.5);
      value[ID::osc2PulseWidth]->setFromNormalized(0.1599999964237213);
      value[ID::pmOsc2ToOsc1]->setFromNormalized(0.0);
      value[ID::gain]->setFromNormalized(0.5);
      value[ID::gainA]->setFromNormalized(0.3280000686645508);
      value[ID::gainD]->setFromNormalized(0.3760000169277191);
      value[ID::gainS]->setFromNormalized(0.39599996805191046);
      value[ID::gainR]->setFromNormalized(0.4360000789165497);
      value[ID::gainCurve]->setFromNormalized(0.0);
      value[ID::gainEnvRetrigger]->setFromInt(0);
      value[ID::filterOrder]->setFromInt(7);
      value[ID::filterCutoff]->setFromNormalized(0.2879999279975891);
      value[ID::filterFeedback]->setFromNormalized(0.5160000324249268);
      value[ID::filterSaturation]->setFromNormalized(0.8480000495910645);
      value[ID::filterEnvToCutoff]->setFromNormalized(0.827777998783721);
      value[ID::filterKeyToCutoff]->setFromNormalized(0.5);
      value[ID::oscMixToFilterCutoff]->setFromNormalized(0.0);
      value[ID::filterA]->setFromNormalized(0.0);
      value[ID::filterD]->setFromNormalized(0.5);
      value[ID::filterS]->setFromNormalized(0.0);
      value[ID::filterR]->setFromNormalized(0.5);
      value[ID::filterCurve]->setFromNormalized(0.0);
      value[ID::filterEnvToOctave]->setFromNormalized(0.5);
      value[ID::filterEnvRetrigger]->setFromInt(1);
      value[ID::modEnv1Attack]->setFromNormalized(0.0);
      value[ID::modEnv1Curve]->setFromNormalized(0.5);
      value[ID::modEnv1ToPhaseMod]->setFromNormalized(0.0);
      value[ID::modEnv1Retrigger]->setFromInt(1);
      value[ID::modEnv2Attack]->setFromNormalized(0.0);
      value[ID::modEnv2Curve]->setFromNormalized(0.5);
      value[ID::modEnv2ToFeedback]->setFromNormalized(0.0);
      value[ID::modEnv2ToLFOFrequency]->setFromNormalized(0.0);
      value[ID::modEnv2ToOsc2Slope]->setFromNormalized(0.0);
      value[ID::modEnv2ToShifter1]->setFromNormalized(0.0);
      value[ID::modEnv2Retrigger]->setFromInt(1);
      value[ID::shifter1Semi]->setFromNormalized(0.29170833333333335);
      value[ID::shifter1Cent]->setFromNormalized(0.0);
      value[ID::shifter1Gain]->setFromNormalized(0.0);
      value[ID::shifter2Semi]->setFromNormalized(0.583375);
      value[ID::shifter2Cent]->setFromNormalized(0.0);
      value[ID::shifter2Gain]->setFromNormalized(0.0);
      value[ID::lfoType]->setFromInt(0);
      value[ID::lfoTempoSync]->setFromInt(0);
      value[ID::lfoFrequency]->setFromNormalized(0.5);
      value[ID::lfoShape]->setFromNormalized(0.5);
      value[ID::lfoToPitch]->setFromNormalized(0.0);
      value[ID::lfoToSlope]->setFromNormalized(0.0);
      value[ID::lfoToPulseWidth]->setFromNormalized(0.0);
      value[ID::lfoToCutoff]->setFromNormalized(0.0);
      value[ID::oscMix]->setFromNormalized(0.3680000305175781);
      value[ID::octave]->setFromNormalized(0.5);
      value[ID::pitchSlideType]->setFromInt(2);
      value[ID::pitchSlide]->setFromNormalized(0.5120000839233398);
      value[ID::pitchSlideOffset]->setFromNormalized(0.5);
      value[ID::smoothness]->setFromNormalized(0.1);
      value[ID::pitchBend]->setFromNormalized(0.5);
    } break;

    case presetLFOFreqDecay: {
      value[ID::bypass]->setFromInt(0);
      value[ID::osc1Semi]->setFromNormalized(0.2639999985694885);
      value[ID::osc1Cent]->setFromNormalized(0.5);
      value[ID::osc1PitchDrift]->setFromNormalized(0.0);
      value[ID::osc1Slope]->setFromNormalized(0.0);
      value[ID::osc1PulseWidth]->setFromNormalized(1.0);
      value[ID::osc1Feedback]->setFromNormalized(0.0);
      value[ID::osc2Semi]->setFromNormalized(0.5);
      value[ID::osc2Cent]->setFromNormalized(0.5);
      value[ID::osc2Overtone]->setFromNormalized(0.11600032448768616);
      value[ID::osc2Slope]->setFromNormalized(0.5);
      value[ID::osc2PulseWidth]->setFromNormalized(0.5);
      value[ID::pmOsc2ToOsc1]->setFromNormalized(0.0);
      value[ID::gain]->setFromNormalized(0.5);
      value[ID::gainA]->setFromNormalized(0.0);
      value[ID::gainD]->setFromNormalized(0.5);
      value[ID::gainS]->setFromNormalized(0.8);
      value[ID::gainR]->setFromNormalized(0.09999999999999998);
      value[ID::gainCurve]->setFromNormalized(0.0);
      value[ID::gainEnvRetrigger]->setFromInt(1);
      value[ID::filterOrder]->setFromInt(7);
      value[ID::filterCutoff]->setFromNormalized(1.0);
      value[ID::filterFeedback]->setFromNormalized(0.0);
      value[ID::filterSaturation]->setFromNormalized(0.3);
      value[ID::filterEnvToCutoff]->setFromNormalized(0.5);
      value[ID::filterKeyToCutoff]->setFromNormalized(0.5);
      value[ID::oscMixToFilterCutoff]->setFromNormalized(0.0);
      value[ID::filterA]->setFromNormalized(0.0);
      value[ID::filterD]->setFromNormalized(0.38800001144409174);
      value[ID::filterS]->setFromNormalized(0.0);
      value[ID::filterR]->setFromNormalized(0.5);
      value[ID::filterCurve]->setFromNormalized(0.0);
      value[ID::filterEnvToOctave]->setFromNormalized(0.34400027990341187);
      value[ID::filterEnvRetrigger]->setFromInt(1);
      value[ID::modEnv1Attack]->setFromNormalized(0.0);
      value[ID::modEnv1Curve]->setFromNormalized(0.5);
      value[ID::modEnv1ToPhaseMod]->setFromNormalized(0.0);
      value[ID::modEnv1Retrigger]->setFromInt(1);
      value[ID::modEnv2Attack]->setFromNormalized(0.0);
      value[ID::modEnv2Curve]->setFromNormalized(0.20000006258487707);
      value[ID::modEnv2ToFeedback]->setFromNormalized(0.0);
      value[ID::modEnv2ToLFOFrequency]->setFromNormalized(1.0);
      value[ID::modEnv2ToOsc2Slope]->setFromNormalized(0.0);
      value[ID::modEnv2ToShifter1]->setFromNormalized(0.0);
      value[ID::modEnv2Retrigger]->setFromInt(1);
      value[ID::shifter1Semi]->setFromNormalized(0.5077083706855774);
      value[ID::shifter1Cent]->setFromNormalized(0.531999945640564);
      value[ID::shifter1Gain]->setFromNormalized(0.4999998211860657);
      value[ID::shifter2Semi]->setFromNormalized(0.583375);
      value[ID::shifter2Cent]->setFromNormalized(0.0);
      value[ID::shifter2Gain]->setFromNormalized(0.7040000557899475);
      value[ID::lfoType]->setFromInt(0);
      value[ID::lfoTempoSync]->setFromInt(0);
      value[ID::lfoFrequency]->setFromNormalized(0.2159999310970306);
      value[ID::lfoShape]->setFromNormalized(0.5);
      value[ID::lfoToPitch]->setFromNormalized(0.0);
      value[ID::lfoToSlope]->setFromNormalized(1.0);
      value[ID::lfoToPulseWidth]->setFromNormalized(0.0);
      value[ID::lfoToCutoff]->setFromNormalized(0.0);
      value[ID::oscMix]->setFromNormalized(0.0);
      value[ID::octave]->setFromNormalized(0.7440001368522644);
      value[ID::pitchSlideType]->setFromInt(1);
      value[ID::pitchSlide]->setFromNormalized(0.1);
      value[ID::pitchSlideOffset]->setFromNormalized(0.5);
      value[ID::smoothness]->setFromNormalized(0.1);
      value[ID::pitchBend]->setFromNormalized(0.5);
    } break;

    case presetMindlessModulation: {
      value[ID::bypass]->setFromInt(0);
      value[ID::osc1Semi]->setFromNormalized(0.3840000331401825);
      value[ID::osc1Cent]->setFromNormalized(0.7480002045631409);
      value[ID::osc1PitchDrift]->setFromNormalized(0.0);
      value[ID::osc1Slope]->setFromNormalized(0.0);
      value[ID::osc1PulseWidth]->setFromNormalized(0.24000003933906555);
      value[ID::osc1Feedback]->setFromNormalized(0.1640000343322754);
      value[ID::osc2Semi]->setFromNormalized(0.5);
      value[ID::osc2Cent]->setFromNormalized(0.5);
      value[ID::osc2Overtone]->setFromNormalized(0.5840001106262207);
      value[ID::osc2Slope]->setFromNormalized(0.0);
      value[ID::osc2PulseWidth]->setFromNormalized(0.5);
      value[ID::pmOsc2ToOsc1]->setFromNormalized(0.22799997031688693);
      value[ID::gain]->setFromNormalized(0.36399999260902405);
      value[ID::gainA]->setFromNormalized(0.0);
      value[ID::gainD]->setFromNormalized(0.5);
      value[ID::gainS]->setFromNormalized(0.8);
      value[ID::gainR]->setFromNormalized(0.6920000314712524);
      value[ID::gainCurve]->setFromNormalized(0.0);
      value[ID::gainEnvRetrigger]->setFromInt(1);
      value[ID::filterOrder]->setFromInt(7);
      value[ID::filterCutoff]->setFromNormalized(0.6639999151229858);
      value[ID::filterFeedback]->setFromNormalized(0.38400003314018255);
      value[ID::filterSaturation]->setFromNormalized(0.8799999356269836);
      value[ID::filterEnvToCutoff]->setFromNormalized(1.0378216055388882);
      value[ID::filterKeyToCutoff]->setFromNormalized(0.10400000959634781);
      value[ID::oscMixToFilterCutoff]->setFromNormalized(0.4399999976158142);
      value[ID::filterA]->setFromNormalized(0.31200000643730164);
      value[ID::filterD]->setFromNormalized(0.304000049829483);
      value[ID::filterS]->setFromNormalized(0.239999994635582);
      value[ID::filterR]->setFromNormalized(0.5);
      value[ID::filterCurve]->setFromNormalized(0.3680000305175781);
      value[ID::filterEnvToOctave]->setFromNormalized(0.5159998536109924);
      value[ID::filterEnvRetrigger]->setFromInt(1);
      value[ID::modEnv1Attack]->setFromNormalized(0.8439999222755432);
      value[ID::modEnv1Curve]->setFromNormalized(0.8040001392364502);
      value[ID::modEnv1ToPhaseMod]->setFromNormalized(0.8959999084472656);
      value[ID::modEnv1Retrigger]->setFromInt(1);
      value[ID::modEnv2Attack]->setFromNormalized(0.6239999532699585);
      value[ID::modEnv2Curve]->setFromNormalized(0.5360000729560852);
      value[ID::modEnv2ToFeedback]->setFromNormalized(0.2520000636577606);
      value[ID::modEnv2ToLFOFrequency]->setFromNormalized(0.7079999446868896);
      value[ID::modEnv2ToOsc2Slope]->setFromNormalized(0.24800001084804535);
      value[ID::modEnv2ToShifter1]->setFromNormalized(0.3479999899864197);
      value[ID::modEnv2Retrigger]->setFromInt(1);
      value[ID::shifter1Semi]->setFromNormalized(0.29170833333333335);
      value[ID::shifter1Cent]->setFromNormalized(0.0);
      value[ID::shifter1Gain]->setFromNormalized(0.8800000548362732);
      value[ID::shifter2Semi]->setFromNormalized(0.2633749544620514);
      value[ID::shifter2Cent]->setFromNormalized(0.0);
      value[ID::shifter2Gain]->setFromNormalized(0.7319999933242798);
      value[ID::lfoType]->setFromInt(0);
      value[ID::lfoTempoSync]->setFromInt(0);
      value[ID::lfoFrequency]->setFromNormalized(0.19599997997283936);
      value[ID::lfoShape]->setFromNormalized(0.7559999823570251);
      value[ID::lfoToPitch]->setFromNormalized(0.25199997425079346);
      value[ID::lfoToSlope]->setFromNormalized(0.7239999771118164);
      value[ID::lfoToPulseWidth]->setFromNormalized(0.5600000023841858);
      value[ID::lfoToCutoff]->setFromNormalized(0.47600001096725464);
      value[ID::oscMix]->setFromNormalized(0.0);
      value[ID::octave]->setFromNormalized(0.5);
      value[ID::pitchSlideType]->setFromInt(1);
      value[ID::pitchSlide]->setFromNormalized(0.49199995398521423);
      value[ID::pitchSlideOffset]->setFromNormalized(0.4919999837875366);
      value[ID::smoothness]->setFromNormalized(0.1);
      value[ID::pitchBend]->setFromNormalized(0.5);
    } break;

    case presetMinor3rdShift: {
      value[ID::bypass]->setFromInt(0);
      value[ID::osc1Semi]->setFromNormalized(0.5);
      value[ID::osc1Cent]->setFromNormalized(0.5);
      value[ID::osc1PitchDrift]->setFromNormalized(0.0);
      value[ID::osc1Slope]->setFromNormalized(0.6399999856948853);
      value[ID::osc1PulseWidth]->setFromNormalized(0.5);
      value[ID::osc1Feedback]->setFromNormalized(0.0);
      value[ID::osc2Semi]->setFromNormalized(0.5720001459121704);
      value[ID::osc2Cent]->setFromNormalized(0.5);
      value[ID::osc2Overtone]->setFromNormalized(0.0);
      value[ID::osc2Slope]->setFromNormalized(0.0);
      value[ID::osc2PulseWidth]->setFromNormalized(0.5);
      value[ID::pmOsc2ToOsc1]->setFromNormalized(0.0);
      value[ID::gain]->setFromNormalized(0.5);
      value[ID::gainA]->setFromNormalized(0.0);
      value[ID::gainD]->setFromNormalized(0.5);
      value[ID::gainS]->setFromNormalized(0.8);
      value[ID::gainR]->setFromNormalized(0.09999999999999998);
      value[ID::gainCurve]->setFromNormalized(0.0);
      value[ID::gainEnvRetrigger]->setFromInt(1);
      value[ID::filterOrder]->setFromInt(7);
      value[ID::filterCutoff]->setFromNormalized(1.0);
      value[ID::filterFeedback]->setFromNormalized(0.0);
      value[ID::filterSaturation]->setFromNormalized(0.3);
      value[ID::filterEnvToCutoff]->setFromNormalized(0.5);
      value[ID::filterKeyToCutoff]->setFromNormalized(0.5);
      value[ID::oscMixToFilterCutoff]->setFromNormalized(0.0);
      value[ID::filterA]->setFromNormalized(0.0);
      value[ID::filterD]->setFromNormalized(0.5);
      value[ID::filterS]->setFromNormalized(0.0);
      value[ID::filterR]->setFromNormalized(0.5);
      value[ID::filterCurve]->setFromNormalized(0.0);
      value[ID::filterEnvToOctave]->setFromNormalized(0.5);
      value[ID::filterEnvRetrigger]->setFromInt(1);
      value[ID::modEnv1Attack]->setFromNormalized(0.0);
      value[ID::modEnv1Curve]->setFromNormalized(0.5);
      value[ID::modEnv1ToPhaseMod]->setFromNormalized(0.0);
      value[ID::modEnv1Retrigger]->setFromInt(1);
      value[ID::modEnv2Attack]->setFromNormalized(0.0);
      value[ID::modEnv2Curve]->setFromNormalized(0.20799997448921206);
      value[ID::modEnv2ToFeedback]->setFromNormalized(0.0);
      value[ID::modEnv2ToLFOFrequency]->setFromNormalized(0.0);
      value[ID::modEnv2ToOsc2Slope]->setFromNormalized(0.8079999685287476);
      value[ID::modEnv2ToShifter1]->setFromNormalized(0.0);
      value[ID::modEnv2Retrigger]->setFromInt(1);
      value[ID::shifter1Semi]->setFromNormalized(0.29170833333333335);
      value[ID::shifter1Cent]->setFromNormalized(0.0);
      value[ID::shifter1Gain]->setFromNormalized(0.5440000891685486);
      value[ID::shifter2Semi]->setFromNormalized(0.6873751878738403);
      value[ID::shifter2Cent]->setFromNormalized(0.0);
      value[ID::shifter2Gain]->setFromNormalized(0.8160001039505005);
      value[ID::lfoType]->setFromInt(1);
      value[ID::lfoTempoSync]->setFromInt(0);
      value[ID::lfoFrequency]->setFromNormalized(0.2000001221895218);
      value[ID::lfoShape]->setFromNormalized(0.5);
      value[ID::lfoToPitch]->setFromNormalized(0.0);
      value[ID::lfoToSlope]->setFromNormalized(0.6639999747276306);
      value[ID::lfoToPulseWidth]->setFromNormalized(0.3839999735355377);
      value[ID::lfoToCutoff]->setFromNormalized(0.0);
      value[ID::oscMix]->setFromNormalized(0.5);
      value[ID::octave]->setFromNormalized(0.5);
      value[ID::pitchSlideType]->setFromInt(1);
      value[ID::pitchSlide]->setFromNormalized(0.40400010347366333);
      value[ID::pitchSlideOffset]->setFromNormalized(0.5919997096061707);
      value[ID::smoothness]->setFromNormalized(0.1);
      value[ID::pitchBend]->setFromNormalized(0.5);
    } break;

    case presetOctaveDecay: {
      value[ID::bypass]->setFromInt(0);
      value[ID::osc1Semi]->setFromNormalized(0.5);
      value[ID::osc1Cent]->setFromNormalized(0.5);
      value[ID::osc1PitchDrift]->setFromNormalized(0.0);
      value[ID::osc1Slope]->setFromNormalized(0.5);
      value[ID::osc1PulseWidth]->setFromNormalized(0.5);
      value[ID::osc1Feedback]->setFromNormalized(0.0);
      value[ID::osc2Semi]->setFromNormalized(1.0);
      value[ID::osc2Cent]->setFromNormalized(0.5);
      value[ID::osc2Overtone]->setFromNormalized(0.0);
      value[ID::osc2Slope]->setFromNormalized(0.0);
      value[ID::osc2PulseWidth]->setFromNormalized(0.5);
      value[ID::pmOsc2ToOsc1]->setFromNormalized(0.0);
      value[ID::gain]->setFromNormalized(0.5);
      value[ID::gainA]->setFromNormalized(0.0);
      value[ID::gainD]->setFromNormalized(0.288000077009201);
      value[ID::gainS]->setFromNormalized(0.0);
      value[ID::gainR]->setFromNormalized(0.23999997973442078);
      value[ID::gainCurve]->setFromNormalized(0.0);
      value[ID::gainEnvRetrigger]->setFromInt(1);
      value[ID::filterOrder]->setFromInt(7);
      value[ID::filterCutoff]->setFromNormalized(1.0);
      value[ID::filterFeedback]->setFromNormalized(0.0);
      value[ID::filterSaturation]->setFromNormalized(0.3);
      value[ID::filterEnvToCutoff]->setFromNormalized(0.5);
      value[ID::filterKeyToCutoff]->setFromNormalized(0.5);
      value[ID::oscMixToFilterCutoff]->setFromNormalized(0.0);
      value[ID::filterA]->setFromNormalized(0.0);
      value[ID::filterD]->setFromNormalized(0.41599997878074646);
      value[ID::filterS]->setFromNormalized(0.0);
      value[ID::filterR]->setFromNormalized(0.5);
      value[ID::filterCurve]->setFromNormalized(0.0);
      value[ID::filterEnvToOctave]->setFromNormalized(0.7960000038146973);
      value[ID::filterEnvRetrigger]->setFromInt(1);
      value[ID::modEnv1Attack]->setFromNormalized(0.0);
      value[ID::modEnv1Curve]->setFromNormalized(0.5759999752044678);
      value[ID::modEnv1ToPhaseMod]->setFromNormalized(0.09200000762939455);
      value[ID::modEnv1Retrigger]->setFromInt(1);
      value[ID::modEnv2Attack]->setFromNormalized(0.0);
      value[ID::modEnv2Curve]->setFromNormalized(0.5);
      value[ID::modEnv2ToFeedback]->setFromNormalized(0.0);
      value[ID::modEnv2ToLFOFrequency]->setFromNormalized(0.0);
      value[ID::modEnv2ToOsc2Slope]->setFromNormalized(0.0);
      value[ID::modEnv2ToShifter1]->setFromNormalized(0.0);
      value[ID::modEnv2Retrigger]->setFromInt(1);
      value[ID::shifter1Semi]->setFromNormalized(0.29170833333333335);
      value[ID::shifter1Cent]->setFromNormalized(0.0);
      value[ID::shifter1Gain]->setFromNormalized(0.0);
      value[ID::shifter2Semi]->setFromNormalized(0.583375);
      value[ID::shifter2Cent]->setFromNormalized(0.0);
      value[ID::shifter2Gain]->setFromNormalized(0.0);
      value[ID::lfoType]->setFromInt(0);
      value[ID::lfoTempoSync]->setFromInt(0);
      value[ID::lfoFrequency]->setFromNormalized(0.5);
      value[ID::lfoShape]->setFromNormalized(0.5);
      value[ID::lfoToPitch]->setFromNormalized(0.0);
      value[ID::lfoToSlope]->setFromNormalized(0.0);
      value[ID::lfoToPulseWidth]->setFromNormalized(0.0);
      value[ID::lfoToCutoff]->setFromNormalized(0.0);
      value[ID::oscMix]->setFromNormalized(0.5);
      value[ID::octave]->setFromNormalized(0.20800001919269562);
      value[ID::pitchSlideType]->setFromInt(0);
      value[ID::pitchSlide]->setFromNormalized(0.10000000149011612);
      value[ID::pitchSlideOffset]->setFromNormalized(0.6200000047683716);
      value[ID::smoothness]->setFromNormalized(0.1);
      value[ID::pitchBend]->setFromNormalized(0.5);
    } break;

    case presetOsc1PitchLFO: {
      value[ID::bypass]->setFromInt(0);
      value[ID::osc1Semi]->setFromNormalized(1.0);
      value[ID::osc1Cent]->setFromNormalized(0.5);
      value[ID::osc1PitchDrift]->setFromNormalized(0.0);
      value[ID::osc1Slope]->setFromNormalized(0.5);
      value[ID::osc1PulseWidth]->setFromNormalized(0.5);
      value[ID::osc1Feedback]->setFromNormalized(0.1999999433755875);
      value[ID::osc2Semi]->setFromNormalized(0.5);
      value[ID::osc2Cent]->setFromNormalized(0.6720001697540283);
      value[ID::osc2Overtone]->setFromNormalized(0.0);
      value[ID::osc2Slope]->setFromNormalized(0.1199997514486313);
      value[ID::osc2PulseWidth]->setFromNormalized(0.5);
      value[ID::pmOsc2ToOsc1]->setFromNormalized(0.0);
      value[ID::gain]->setFromNormalized(0.5);
      value[ID::gainA]->setFromNormalized(0.0);
      value[ID::gainD]->setFromNormalized(0.5);
      value[ID::gainS]->setFromNormalized(0.8);
      value[ID::gainR]->setFromNormalized(0.09999999999999998);
      value[ID::gainCurve]->setFromNormalized(0.0);
      value[ID::gainEnvRetrigger]->setFromInt(1);
      value[ID::filterOrder]->setFromInt(7);
      value[ID::filterCutoff]->setFromNormalized(1.0);
      value[ID::filterFeedback]->setFromNormalized(0.0);
      value[ID::filterSaturation]->setFromNormalized(0.3);
      value[ID::filterEnvToCutoff]->setFromNormalized(0.5);
      value[ID::filterKeyToCutoff]->setFromNormalized(0.5);
      value[ID::oscMixToFilterCutoff]->setFromNormalized(0.0);
      value[ID::filterA]->setFromNormalized(0.0);
      value[ID::filterD]->setFromNormalized(0.5);
      value[ID::filterS]->setFromNormalized(0.0);
      value[ID::filterR]->setFromNormalized(0.5);
      value[ID::filterCurve]->setFromNormalized(0.0);
      value[ID::filterEnvToOctave]->setFromNormalized(0.5);
      value[ID::filterEnvRetrigger]->setFromInt(1);
      value[ID::modEnv1Attack]->setFromNormalized(0.2919999659061432);
      value[ID::modEnv1Curve]->setFromNormalized(0.5);
      value[ID::modEnv1ToPhaseMod]->setFromNormalized(0.04800000786781312);
      value[ID::modEnv1Retrigger]->setFromInt(1);
      value[ID::modEnv2Attack]->setFromNormalized(0.48799997568130493);
      value[ID::modEnv2Curve]->setFromNormalized(0.3319999873638153);
      value[ID::modEnv2ToFeedback]->setFromNormalized(0.0);
      value[ID::modEnv2ToLFOFrequency]->setFromNormalized(0.5440000891685486);
      value[ID::modEnv2ToOsc2Slope]->setFromNormalized(0.5520000457763672);
      value[ID::modEnv2ToShifter1]->setFromNormalized(0.0);
      value[ID::modEnv2Retrigger]->setFromInt(1);
      value[ID::shifter1Semi]->setFromNormalized(0.19970837235450745);
      value[ID::shifter1Cent]->setFromNormalized(0.0);
      value[ID::shifter1Gain]->setFromNormalized(0.0);
      value[ID::shifter2Semi]->setFromNormalized(1.0);
      value[ID::shifter2Cent]->setFromNormalized(0.0);
      value[ID::shifter2Gain]->setFromNormalized(0.0);
      value[ID::lfoType]->setFromInt(0);
      value[ID::lfoTempoSync]->setFromInt(0);
      value[ID::lfoFrequency]->setFromNormalized(0.4439997375011444);
      value[ID::lfoShape]->setFromNormalized(0.5);
      value[ID::lfoToPitch]->setFromNormalized(0.25200000405311584);
      value[ID::lfoToSlope]->setFromNormalized(0.0);
      value[ID::lfoToPulseWidth]->setFromNormalized(0.4359999895095825);
      value[ID::lfoToCutoff]->setFromNormalized(0.0);
      value[ID::oscMix]->setFromNormalized(0.5);
      value[ID::octave]->setFromNormalized(0.5);
      value[ID::pitchSlideType]->setFromInt(1);
      value[ID::pitchSlide]->setFromNormalized(0.1);
      value[ID::pitchSlideOffset]->setFromNormalized(0.5);
      value[ID::smoothness]->setFromNormalized(0.1);
      value[ID::pitchBend]->setFromNormalized(0.5);
    } break;

    case presetOverTheNyquist: {
      value[ID::bypass]->setFromInt(0);
      value[ID::osc1Semi]->setFromNormalized(0.5);
      value[ID::osc1Cent]->setFromNormalized(0.5);
      value[ID::osc1PitchDrift]->setFromNormalized(0.0);
      value[ID::osc1Slope]->setFromNormalized(0.36399996280670166);
      value[ID::osc1PulseWidth]->setFromNormalized(0.5);
      value[ID::osc1Feedback]->setFromNormalized(0.0);
      value[ID::osc2Semi]->setFromNormalized(1.0);
      value[ID::osc2Cent]->setFromNormalized(0.5);
      value[ID::osc2Overtone]->setFromNormalized(0.6119998693466187);
      value[ID::osc2Slope]->setFromNormalized(0.0);
      value[ID::osc2PulseWidth]->setFromNormalized(0.5);
      value[ID::pmOsc2ToOsc1]->setFromNormalized(0.7920000553131104);
      value[ID::gain]->setFromNormalized(0.5);
      value[ID::gainA]->setFromNormalized(0.0);
      value[ID::gainD]->setFromNormalized(0.5);
      value[ID::gainS]->setFromNormalized(0.8);
      value[ID::gainR]->setFromNormalized(0.09999999999999998);
      value[ID::gainCurve]->setFromNormalized(0.0);
      value[ID::gainEnvRetrigger]->setFromInt(1);
      value[ID::filterOrder]->setFromInt(7);
      value[ID::filterCutoff]->setFromNormalized(1.0);
      value[ID::filterFeedback]->setFromNormalized(0.0);
      value[ID::filterSaturation]->setFromNormalized(0.3);
      value[ID::filterEnvToCutoff]->setFromNormalized(0.5);
      value[ID::filterKeyToCutoff]->setFromNormalized(0.5);
      value[ID::oscMixToFilterCutoff]->setFromNormalized(0.0);
      value[ID::filterA]->setFromNormalized(0.0);
      value[ID::filterD]->setFromNormalized(0.5);
      value[ID::filterS]->setFromNormalized(0.0);
      value[ID::filterR]->setFromNormalized(0.5);
      value[ID::filterCurve]->setFromNormalized(0.0);
      value[ID::filterEnvToOctave]->setFromNormalized(0.5);
      value[ID::filterEnvRetrigger]->setFromInt(1);
      value[ID::modEnv1Attack]->setFromNormalized(0.0);
      value[ID::modEnv1Curve]->setFromNormalized(0.5);
      value[ID::modEnv1ToPhaseMod]->setFromNormalized(0.0);
      value[ID::modEnv1Retrigger]->setFromInt(1);
      value[ID::modEnv2Attack]->setFromNormalized(0.0);
      value[ID::modEnv2Curve]->setFromNormalized(0.5);
      value[ID::modEnv2ToFeedback]->setFromNormalized(0.0);
      value[ID::modEnv2ToLFOFrequency]->setFromNormalized(0.0);
      value[ID::modEnv2ToOsc2Slope]->setFromNormalized(0.0);
      value[ID::modEnv2ToShifter1]->setFromNormalized(0.0);
      value[ID::modEnv2Retrigger]->setFromInt(1);
      value[ID::shifter1Semi]->setFromNormalized(0.29170833333333335);
      value[ID::shifter1Cent]->setFromNormalized(0.0);
      value[ID::shifter1Gain]->setFromNormalized(0.0);
      value[ID::shifter2Semi]->setFromNormalized(0.583375);
      value[ID::shifter2Cent]->setFromNormalized(0.0);
      value[ID::shifter2Gain]->setFromNormalized(0.0);
      value[ID::lfoType]->setFromInt(0);
      value[ID::lfoTempoSync]->setFromInt(0);
      value[ID::lfoFrequency]->setFromNormalized(0.5);
      value[ID::lfoShape]->setFromNormalized(0.5);
      value[ID::lfoToPitch]->setFromNormalized(0.0);
      value[ID::lfoToSlope]->setFromNormalized(0.0);
      value[ID::lfoToPulseWidth]->setFromNormalized(0.0);
      value[ID::lfoToCutoff]->setFromNormalized(0.0);
      value[ID::oscMix]->setFromNormalized(0.5);
      value[ID::octave]->setFromNormalized(0.5);
      value[ID::pitchSlideType]->setFromInt(1);
      value[ID::pitchSlide]->setFromNormalized(0.1);
      value[ID::pitchSlideOffset]->setFromNormalized(0.5);
      value[ID::smoothness]->setFromNormalized(0.1);
      value[ID::pitchBend]->setFromNormalized(0.5);
    } break;

    case presetOvertone19: {
      value[ID::bypass]->setFromInt(0);
      value[ID::osc1Semi]->setFromNormalized(0.7600004076957703);
      value[ID::osc1Cent]->setFromNormalized(0.5);
      value[ID::osc1PitchDrift]->setFromNormalized(0.0);
      value[ID::osc1Slope]->setFromNormalized(0.44799935817718506);
      value[ID::osc1PulseWidth]->setFromNormalized(0.03999999165534973);
      value[ID::osc1Feedback]->setFromNormalized(0.0);
      value[ID::osc2Semi]->setFromNormalized(0.0);
      value[ID::osc2Cent]->setFromNormalized(0.5);
      value[ID::osc2Overtone]->setFromNormalized(0.5919999480247498);
      value[ID::osc2Slope]->setFromNormalized(0.8400000929832458);
      value[ID::osc2PulseWidth]->setFromNormalized(0.004000050947070122);
      value[ID::pmOsc2ToOsc1]->setFromNormalized(0.0);
      value[ID::gain]->setFromNormalized(0.5);
      value[ID::gainA]->setFromNormalized(0.0);
      value[ID::gainD]->setFromNormalized(0.5);
      value[ID::gainS]->setFromNormalized(0.8);
      value[ID::gainR]->setFromNormalized(0.09999999999999998);
      value[ID::gainCurve]->setFromNormalized(0.0);
      value[ID::gainEnvRetrigger]->setFromInt(1);
      value[ID::filterOrder]->setFromInt(7);
      value[ID::filterCutoff]->setFromNormalized(0.7119999527931213);
      value[ID::filterFeedback]->setFromNormalized(0.0);
      value[ID::filterSaturation]->setFromNormalized(0.30000001192092896);
      value[ID::filterEnvToCutoff]->setFromNormalized(1.7268072314089384);
      value[ID::filterKeyToCutoff]->setFromNormalized(0.5);
      value[ID::oscMixToFilterCutoff]->setFromNormalized(1.0);
      value[ID::filterA]->setFromNormalized(0.531999945640564);
      value[ID::filterD]->setFromNormalized(0.7640001177787781);
      value[ID::filterS]->setFromNormalized(0.0);
      value[ID::filterR]->setFromNormalized(0.5);
      value[ID::filterCurve]->setFromNormalized(0.0);
      value[ID::filterEnvToOctave]->setFromNormalized(0.5);
      value[ID::filterEnvRetrigger]->setFromInt(1);
      value[ID::modEnv1Attack]->setFromNormalized(0.0);
      value[ID::modEnv1Curve]->setFromNormalized(0.5);
      value[ID::modEnv1ToPhaseMod]->setFromNormalized(0.0);
      value[ID::modEnv1Retrigger]->setFromInt(1);
      value[ID::modEnv2Attack]->setFromNormalized(0.0);
      value[ID::modEnv2Curve]->setFromNormalized(0.5);
      value[ID::modEnv2ToFeedback]->setFromNormalized(0.0);
      value[ID::modEnv2ToLFOFrequency]->setFromNormalized(0.0);
      value[ID::modEnv2ToOsc2Slope]->setFromNormalized(0.0);
      value[ID::modEnv2ToShifter1]->setFromNormalized(0.0);
      value[ID::modEnv2Retrigger]->setFromInt(1);
      value[ID::shifter1Semi]->setFromNormalized(0.29170833333333335);
      value[ID::shifter1Cent]->setFromNormalized(0.0);
      value[ID::shifter1Gain]->setFromNormalized(0.0);
      value[ID::shifter2Semi]->setFromNormalized(0.583375);
      value[ID::shifter2Cent]->setFromNormalized(0.0);
      value[ID::shifter2Gain]->setFromNormalized(0.0);
      value[ID::lfoType]->setFromInt(0);
      value[ID::lfoTempoSync]->setFromInt(0);
      value[ID::lfoFrequency]->setFromNormalized(0.2120000123977661);
      value[ID::lfoShape]->setFromNormalized(0.5);
      value[ID::lfoToPitch]->setFromNormalized(0.0);
      value[ID::lfoToSlope]->setFromNormalized(0.8080000281333923);
      value[ID::lfoToPulseWidth]->setFromNormalized(0.0);
      value[ID::lfoToCutoff]->setFromNormalized(0.0);
      value[ID::oscMix]->setFromNormalized(0.41200003027915955);
      value[ID::octave]->setFromNormalized(0.18400004506111145);
      value[ID::pitchSlideType]->setFromInt(1);
      value[ID::pitchSlide]->setFromNormalized(0.1);
      value[ID::pitchSlideOffset]->setFromNormalized(0.5);
      value[ID::smoothness]->setFromNormalized(0.1);
      value[ID::pitchBend]->setFromNormalized(0.5);
    } break;

    case presetResShortDecay: {
      value[ID::bypass]->setFromInt(0);
      value[ID::osc1Semi]->setFromNormalized(0.5);
      value[ID::osc1Cent]->setFromNormalized(0.3319999873638153);
      value[ID::osc1PitchDrift]->setFromNormalized(0.0);
      value[ID::osc1Slope]->setFromNormalized(0.0);
      value[ID::osc1PulseWidth]->setFromNormalized(0.8040000200271606);
      value[ID::osc1Feedback]->setFromNormalized(0.0);
      value[ID::osc2Semi]->setFromNormalized(0.5);
      value[ID::osc2Cent]->setFromNormalized(0.6919999718666077);
      value[ID::osc2Overtone]->setFromNormalized(0.0);
      value[ID::osc2Slope]->setFromNormalized(0.0);
      value[ID::osc2PulseWidth]->setFromNormalized(0.7400000095367432);
      value[ID::pmOsc2ToOsc1]->setFromNormalized(0.0);
      value[ID::gain]->setFromNormalized(0.5);
      value[ID::gainA]->setFromNormalized(0.0);
      value[ID::gainD]->setFromNormalized(0.1599999815225601);
      value[ID::gainS]->setFromNormalized(0.8);
      value[ID::gainR]->setFromNormalized(0.09999999999999998);
      value[ID::gainCurve]->setFromNormalized(0.0);
      value[ID::gainEnvRetrigger]->setFromInt(1);
      value[ID::filterOrder]->setFromInt(3);
      value[ID::filterCutoff]->setFromNormalized(0.20400018990039825);
      value[ID::filterFeedback]->setFromNormalized(1.0);
      value[ID::filterSaturation]->setFromNormalized(0.6679999828338623);
      value[ID::filterEnvToCutoff]->setFromNormalized(1.7268078049901712);
      value[ID::filterKeyToCutoff]->setFromNormalized(0.5);
      value[ID::oscMixToFilterCutoff]->setFromNormalized(0.0);
      value[ID::filterA]->setFromNormalized(0.0);
      value[ID::filterD]->setFromNormalized(0.17200005054473874);
      value[ID::filterS]->setFromNormalized(0.0);
      value[ID::filterR]->setFromNormalized(0.5);
      value[ID::filterCurve]->setFromNormalized(0.0);
      value[ID::filterEnvToOctave]->setFromNormalized(0.5);
      value[ID::filterEnvRetrigger]->setFromInt(1);
      value[ID::modEnv1Attack]->setFromNormalized(0.0);
      value[ID::modEnv1Curve]->setFromNormalized(0.5);
      value[ID::modEnv1ToPhaseMod]->setFromNormalized(0.16799999773502353);
      value[ID::modEnv1Retrigger]->setFromInt(1);
      value[ID::modEnv2Attack]->setFromNormalized(0.0);
      value[ID::modEnv2Curve]->setFromNormalized(0.7839998006820679);
      value[ID::modEnv2ToFeedback]->setFromNormalized(0.0);
      value[ID::modEnv2ToLFOFrequency]->setFromNormalized(0.0);
      value[ID::modEnv2ToOsc2Slope]->setFromNormalized(0.14000001549720764);
      value[ID::modEnv2ToShifter1]->setFromNormalized(0.0);
      value[ID::modEnv2Retrigger]->setFromInt(1);
      value[ID::shifter1Semi]->setFromNormalized(0.29170833333333335);
      value[ID::shifter1Cent]->setFromNormalized(0.0);
      value[ID::shifter1Gain]->setFromNormalized(0.0);
      value[ID::shifter2Semi]->setFromNormalized(0.583375);
      value[ID::shifter2Cent]->setFromNormalized(0.0);
      value[ID::shifter2Gain]->setFromNormalized(0.0);
      value[ID::lfoType]->setFromInt(0);
      value[ID::lfoTempoSync]->setFromInt(0);
      value[ID::lfoFrequency]->setFromNormalized(0.5);
      value[ID::lfoShape]->setFromNormalized(0.5);
      value[ID::lfoToPitch]->setFromNormalized(0.0);
      value[ID::lfoToSlope]->setFromNormalized(0.0);
      value[ID::lfoToPulseWidth]->setFromNormalized(0.0);
      value[ID::lfoToCutoff]->setFromNormalized(0.0);
      value[ID::oscMix]->setFromNormalized(0.5);
      value[ID::octave]->setFromNormalized(0.5320000648498535);
      value[ID::pitchSlideType]->setFromInt(1);
      value[ID::pitchSlide]->setFromNormalized(0.1);
      value[ID::pitchSlideOffset]->setFromNormalized(0.5);
      value[ID::smoothness]->setFromNormalized(0.1);
      value[ID::pitchBend]->setFromNormalized(0.5);
    } break;

    case presetSaturation: {
      value[ID::bypass]->setFromInt(0);
      value[ID::osc1Semi]->setFromNormalized(0.34800001978874207);
      value[ID::osc1Cent]->setFromNormalized(0.5);
      value[ID::osc1PitchDrift]->setFromNormalized(0.5680000185966492);
      value[ID::osc1Slope]->setFromNormalized(0.5);
      value[ID::osc1PulseWidth]->setFromNormalized(0.11200003325939178);
      value[ID::osc1Feedback]->setFromNormalized(0.0);
      value[ID::osc2Semi]->setFromNormalized(0.5);
      value[ID::osc2Cent]->setFromNormalized(0.5);
      value[ID::osc2Overtone]->setFromNormalized(0.0);
      value[ID::osc2Slope]->setFromNormalized(0.5);
      value[ID::osc2PulseWidth]->setFromNormalized(0.5);
      value[ID::pmOsc2ToOsc1]->setFromNormalized(0.45200008153915405);
      value[ID::gain]->setFromNormalized(0.5);
      value[ID::gainA]->setFromNormalized(0.0);
      value[ID::gainD]->setFromNormalized(0.5);
      value[ID::gainS]->setFromNormalized(0.8);
      value[ID::gainR]->setFromNormalized(0.09999999999999998);
      value[ID::gainCurve]->setFromNormalized(0.0);
      value[ID::gainEnvRetrigger]->setFromInt(1);
      value[ID::filterOrder]->setFromInt(7);
      value[ID::filterCutoff]->setFromNormalized(0.16400000452995303);
      value[ID::filterFeedback]->setFromNormalized(0.9280000329017639);
      value[ID::filterSaturation]->setFromNormalized(0.8719999194145203);
      value[ID::filterEnvToCutoff]->setFromNormalized(0.9224026595554398);
      value[ID::filterKeyToCutoff]->setFromNormalized(0.5);
      value[ID::oscMixToFilterCutoff]->setFromNormalized(0.42000001668930054);
      value[ID::filterA]->setFromNormalized(0.42800000309944153);
      value[ID::filterD]->setFromNormalized(0.5);
      value[ID::filterS]->setFromNormalized(0.0);
      value[ID::filterR]->setFromNormalized(0.5);
      value[ID::filterCurve]->setFromNormalized(0.0);
      value[ID::filterEnvToOctave]->setFromNormalized(0.7400000095367432);
      value[ID::filterEnvRetrigger]->setFromInt(1);
      value[ID::modEnv1Attack]->setFromNormalized(0.0);
      value[ID::modEnv1Curve]->setFromNormalized(0.5);
      value[ID::modEnv1ToPhaseMod]->setFromNormalized(0.0);
      value[ID::modEnv1Retrigger]->setFromInt(1);
      value[ID::modEnv2Attack]->setFromNormalized(0.0);
      value[ID::modEnv2Curve]->setFromNormalized(0.5);
      value[ID::modEnv2ToFeedback]->setFromNormalized(0.0);
      value[ID::modEnv2ToLFOFrequency]->setFromNormalized(0.0);
      value[ID::modEnv2ToOsc2Slope]->setFromNormalized(0.0);
      value[ID::modEnv2ToShifter1]->setFromNormalized(0.0);
      value[ID::modEnv2Retrigger]->setFromInt(1);
      value[ID::shifter1Semi]->setFromNormalized(0.29170833333333335);
      value[ID::shifter1Cent]->setFromNormalized(0.0);
      value[ID::shifter1Gain]->setFromNormalized(0.0);
      value[ID::shifter2Semi]->setFromNormalized(0.583375);
      value[ID::shifter2Cent]->setFromNormalized(0.0);
      value[ID::shifter2Gain]->setFromNormalized(0.0);
      value[ID::lfoType]->setFromInt(0);
      value[ID::lfoTempoSync]->setFromInt(0);
      value[ID::lfoFrequency]->setFromNormalized(0.5);
      value[ID::lfoShape]->setFromNormalized(0.5);
      value[ID::lfoToPitch]->setFromNormalized(0.0);
      value[ID::lfoToSlope]->setFromNormalized(0.0);
      value[ID::lfoToPulseWidth]->setFromNormalized(0.0);
      value[ID::lfoToCutoff]->setFromNormalized(0.0);
      value[ID::oscMix]->setFromNormalized(0.5);
      value[ID::octave]->setFromNormalized(0.5);
      value[ID::pitchSlideType]->setFromInt(1);
      value[ID::pitchSlide]->setFromNormalized(0.1);
      value[ID::pitchSlideOffset]->setFromNormalized(0.5);
      value[ID::smoothness]->setFromNormalized(0.1);
      value[ID::pitchBend]->setFromNormalized(0.5);
    } break;

    case presetShifterPseudoResonance: {
      value[ID::bypass]->setFromInt(0);
      value[ID::osc1Semi]->setFromNormalized(0.0);
      value[ID::osc1Cent]->setFromNormalized(0.5);
      value[ID::osc1PitchDrift]->setFromNormalized(0.0);
      value[ID::osc1Slope]->setFromNormalized(0.9240001440048218);
      value[ID::osc1PulseWidth]->setFromNormalized(0.2080000340938568);
      value[ID::osc1Feedback]->setFromNormalized(0.0);
      value[ID::osc2Semi]->setFromNormalized(0.503999650478363);
      value[ID::osc2Cent]->setFromNormalized(0.5);
      value[ID::osc2Overtone]->setFromNormalized(0.2359999567270279);
      value[ID::osc2Slope]->setFromNormalized(0.5);
      value[ID::osc2PulseWidth]->setFromNormalized(0.2080000638961792);
      value[ID::pmOsc2ToOsc1]->setFromNormalized(0.0);
      value[ID::gain]->setFromNormalized(0.5);
      value[ID::gainA]->setFromNormalized(0.0);
      value[ID::gainD]->setFromNormalized(0.28000000119209284);
      value[ID::gainS]->setFromNormalized(0.0);
      value[ID::gainR]->setFromNormalized(0.09999999999999998);
      value[ID::gainCurve]->setFromNormalized(0.0);
      value[ID::gainEnvRetrigger]->setFromInt(1);
      value[ID::filterOrder]->setFromInt(7);
      value[ID::filterCutoff]->setFromNormalized(0.08800026029348379);
      value[ID::filterFeedback]->setFromNormalized(1.0);
      value[ID::filterSaturation]->setFromNormalized(1.0);
      value[ID::filterEnvToCutoff]->setFromNormalized(0.6805153348553992);
      value[ID::filterKeyToCutoff]->setFromNormalized(0.4439999759197235);
      value[ID::oscMixToFilterCutoff]->setFromNormalized(0.8520000576972961);
      value[ID::filterA]->setFromNormalized(0.0);
      value[ID::filterD]->setFromNormalized(0.5);
      value[ID::filterS]->setFromNormalized(0.0);
      value[ID::filterR]->setFromNormalized(0.5);
      value[ID::filterCurve]->setFromNormalized(0.0);
      value[ID::filterEnvToOctave]->setFromNormalized(0.5);
      value[ID::filterEnvRetrigger]->setFromInt(0);
      value[ID::modEnv1Attack]->setFromNormalized(0.0);
      value[ID::modEnv1Curve]->setFromNormalized(0.591999888420105);
      value[ID::modEnv1ToPhaseMod]->setFromNormalized(0.15600022673606875);
      value[ID::modEnv1Retrigger]->setFromInt(1);
      value[ID::modEnv2Attack]->setFromNormalized(0.0);
      value[ID::modEnv2Curve]->setFromNormalized(0.5);
      value[ID::modEnv2ToFeedback]->setFromNormalized(0.0);
      value[ID::modEnv2ToLFOFrequency]->setFromNormalized(0.0);
      value[ID::modEnv2ToOsc2Slope]->setFromNormalized(0.0);
      value[ID::modEnv2ToShifter1]->setFromNormalized(0.7119998335838318);
      value[ID::modEnv2Retrigger]->setFromInt(1);
      value[ID::shifter1Semi]->setFromNormalized(1.0);
      value[ID::shifter1Cent]->setFromNormalized(0.0);
      value[ID::shifter1Gain]->setFromNormalized(1.0);
      value[ID::shifter2Semi]->setFromNormalized(0.583375);
      value[ID::shifter2Cent]->setFromNormalized(0.0);
      value[ID::shifter2Gain]->setFromNormalized(0.0);
      value[ID::lfoType]->setFromInt(0);
      value[ID::lfoTempoSync]->setFromInt(0);
      value[ID::lfoFrequency]->setFromNormalized(0.5);
      value[ID::lfoShape]->setFromNormalized(0.5);
      value[ID::lfoToPitch]->setFromNormalized(0.0);
      value[ID::lfoToSlope]->setFromNormalized(0.0);
      value[ID::lfoToPulseWidth]->setFromNormalized(0.0);
      value[ID::lfoToCutoff]->setFromNormalized(0.0);
      value[ID::oscMix]->setFromNormalized(0.0);
      value[ID::octave]->setFromNormalized(0.5);
      value[ID::pitchSlideType]->setFromInt(2);
      value[ID::pitchSlide]->setFromNormalized(0.1);
      value[ID::pitchSlideOffset]->setFromNormalized(0.5);
      value[ID::smoothness]->setFromNormalized(0.1);
      value[ID::pitchBend]->setFromNormalized(0.5);
    } break;

    case presetSubBassDrum: {
      value[ID::bypass]->setFromInt(0);
      value[ID::osc1Semi]->setFromNormalized(0.5);
      value[ID::osc1Cent]->setFromNormalized(0.5);
      value[ID::osc1PitchDrift]->setFromNormalized(0.0);
      value[ID::osc1Slope]->setFromNormalized(0.0);
      value[ID::osc1PulseWidth]->setFromNormalized(0.5);
      value[ID::osc1Feedback]->setFromNormalized(0.0);
      value[ID::osc2Semi]->setFromNormalized(0.5);
      value[ID::osc2Cent]->setFromNormalized(0.5);
      value[ID::osc2Overtone]->setFromNormalized(0.0);
      value[ID::osc2Slope]->setFromNormalized(0.5);
      value[ID::osc2PulseWidth]->setFromNormalized(0.5);
      value[ID::pmOsc2ToOsc1]->setFromNormalized(0.0);
      value[ID::gain]->setFromNormalized(0.5);
      value[ID::gainA]->setFromNormalized(0.0);
      value[ID::gainD]->setFromNormalized(0.5);
      value[ID::gainS]->setFromNormalized(0.8);
      value[ID::gainR]->setFromNormalized(0.43199998140335083);
      value[ID::gainCurve]->setFromNormalized(0.0);
      value[ID::gainEnvRetrigger]->setFromInt(1);
      value[ID::filterOrder]->setFromInt(7);
      value[ID::filterCutoff]->setFromNormalized(0.2720000445842743);
      value[ID::filterFeedback]->setFromNormalized(1.0);
      value[ID::filterSaturation]->setFromNormalized(1.0);
      value[ID::filterEnvToCutoff]->setFromNormalized(0.551459278417076);
      value[ID::filterKeyToCutoff]->setFromNormalized(0.0);
      value[ID::oscMixToFilterCutoff]->setFromNormalized(0.0);
      value[ID::filterA]->setFromNormalized(0.0);
      value[ID::filterD]->setFromNormalized(0.25200003385543823);
      value[ID::filterS]->setFromNormalized(0.0);
      value[ID::filterR]->setFromNormalized(0.5);
      value[ID::filterCurve]->setFromNormalized(0.0);
      value[ID::filterEnvToOctave]->setFromNormalized(0.5);
      value[ID::filterEnvRetrigger]->setFromInt(1);
      value[ID::modEnv1Attack]->setFromNormalized(0.0);
      value[ID::modEnv1Curve]->setFromNormalized(0.5);
      value[ID::modEnv1ToPhaseMod]->setFromNormalized(0.0);
      value[ID::modEnv1Retrigger]->setFromInt(1);
      value[ID::modEnv2Attack]->setFromNormalized(0.0);
      value[ID::modEnv2Curve]->setFromNormalized(0.5);
      value[ID::modEnv2ToFeedback]->setFromNormalized(0.0);
      value[ID::modEnv2ToLFOFrequency]->setFromNormalized(0.0);
      value[ID::modEnv2ToOsc2Slope]->setFromNormalized(0.0);
      value[ID::modEnv2ToShifter1]->setFromNormalized(0.0);
      value[ID::modEnv2Retrigger]->setFromInt(1);
      value[ID::shifter1Semi]->setFromNormalized(0.29170833333333335);
      value[ID::shifter1Cent]->setFromNormalized(0.0);
      value[ID::shifter1Gain]->setFromNormalized(0.0);
      value[ID::shifter2Semi]->setFromNormalized(0.583375);
      value[ID::shifter2Cent]->setFromNormalized(0.0);
      value[ID::shifter2Gain]->setFromNormalized(0.0);
      value[ID::lfoType]->setFromInt(0);
      value[ID::lfoTempoSync]->setFromInt(0);
      value[ID::lfoFrequency]->setFromNormalized(0.5);
      value[ID::lfoShape]->setFromNormalized(0.5);
      value[ID::lfoToPitch]->setFromNormalized(0.0);
      value[ID::lfoToSlope]->setFromNormalized(0.0);
      value[ID::lfoToPulseWidth]->setFromNormalized(0.0);
      value[ID::lfoToCutoff]->setFromNormalized(0.0);
      value[ID::oscMix]->setFromNormalized(0.5);
      value[ID::octave]->setFromNormalized(0.5000000596046448);
      value[ID::pitchSlideType]->setFromInt(1);
      value[ID::pitchSlide]->setFromNormalized(0.1);
      value[ID::pitchSlideOffset]->setFromNormalized(0.5);
      value[ID::smoothness]->setFromNormalized(0.1);
      value[ID::pitchBend]->setFromNormalized(0.5);
    } break;

    case presetTpzRoar: {
      value[ID::bypass]->setFromInt(0);
      value[ID::osc1Semi]->setFromNormalized(0.5);
      value[ID::osc1Cent]->setFromNormalized(0.5);
      value[ID::osc1PitchDrift]->setFromNormalized(0.0);
      value[ID::osc1Slope]->setFromNormalized(0.5);
      value[ID::osc1PulseWidth]->setFromNormalized(0.5);
      value[ID::osc1Feedback]->setFromNormalized(0.10000018030405046);
      value[ID::osc2Semi]->setFromNormalized(0.0);
      value[ID::osc2Cent]->setFromNormalized(0.5);
      value[ID::osc2Overtone]->setFromNormalized(0.0);
      value[ID::osc2Slope]->setFromNormalized(0.8040000200271606);
      value[ID::osc2PulseWidth]->setFromNormalized(0.3320000171661377);
      value[ID::pmOsc2ToOsc1]->setFromNormalized(0.0);
      value[ID::gain]->setFromNormalized(0.5);
      value[ID::gainA]->setFromNormalized(0.0);
      value[ID::gainD]->setFromNormalized(0.5);
      value[ID::gainS]->setFromNormalized(0.8);
      value[ID::gainR]->setFromNormalized(0.09999999999999998);
      value[ID::gainCurve]->setFromNormalized(0.0);
      value[ID::gainEnvRetrigger]->setFromInt(1);
      value[ID::filterOrder]->setFromInt(7);
      value[ID::filterCutoff]->setFromNormalized(1.0);
      value[ID::filterFeedback]->setFromNormalized(0.0);
      value[ID::filterSaturation]->setFromNormalized(0.3);
      value[ID::filterEnvToCutoff]->setFromNormalized(0.5);
      value[ID::filterKeyToCutoff]->setFromNormalized(0.5);
      value[ID::oscMixToFilterCutoff]->setFromNormalized(0.0);
      value[ID::filterA]->setFromNormalized(0.0);
      value[ID::filterD]->setFromNormalized(0.5);
      value[ID::filterS]->setFromNormalized(0.0);
      value[ID::filterR]->setFromNormalized(0.5);
      value[ID::filterCurve]->setFromNormalized(0.0);
      value[ID::filterEnvToOctave]->setFromNormalized(0.5);
      value[ID::filterEnvRetrigger]->setFromInt(1);
      value[ID::modEnv1Attack]->setFromNormalized(0.0);
      value[ID::modEnv1Curve]->setFromNormalized(0.5);
      value[ID::modEnv1ToPhaseMod]->setFromNormalized(0.0);
      value[ID::modEnv1Retrigger]->setFromInt(1);
      value[ID::modEnv2Attack]->setFromNormalized(0.5760000348091125);
      value[ID::modEnv2Curve]->setFromNormalized(0.5);
      value[ID::modEnv2ToFeedback]->setFromNormalized(0.5919999480247498);
      value[ID::modEnv2ToLFOFrequency]->setFromNormalized(0.0);
      value[ID::modEnv2ToOsc2Slope]->setFromNormalized(0.0);
      value[ID::modEnv2ToShifter1]->setFromNormalized(0.0);
      value[ID::modEnv2Retrigger]->setFromInt(1);
      value[ID::shifter1Semi]->setFromNormalized(0.29170833333333335);
      value[ID::shifter1Cent]->setFromNormalized(0.0);
      value[ID::shifter1Gain]->setFromNormalized(0.0);
      value[ID::shifter2Semi]->setFromNormalized(0.583375);
      value[ID::shifter2Cent]->setFromNormalized(0.0);
      value[ID::shifter2Gain]->setFromNormalized(0.0);
      value[ID::lfoType]->setFromInt(0);
      value[ID::lfoTempoSync]->setFromInt(0);
      value[ID::lfoFrequency]->setFromNormalized(0.5);
      value[ID::lfoShape]->setFromNormalized(0.5);
      value[ID::lfoToPitch]->setFromNormalized(0.0);
      value[ID::lfoToSlope]->setFromNormalized(0.0);
      value[ID::lfoToPulseWidth]->setFromNormalized(0.0);
      value[ID::lfoToCutoff]->setFromNormalized(0.0);
      value[ID::oscMix]->setFromNormalized(0.5);
      value[ID::octave]->setFromNormalized(0.5);
      value[ID::pitchSlideType]->setFromInt(1);
      value[ID::pitchSlide]->setFromNormalized(0.1);
      value[ID::pitchSlideOffset]->setFromNormalized(0.5);
      value[ID::smoothness]->setFromNormalized(0.1);
      value[ID::pitchBend]->setFromNormalized(0.5);
    } break;
  }
}
