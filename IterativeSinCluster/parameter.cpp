// (c) 2019 Takamitsu Endo
//
// This file is part of IterativeSinCluster.
//
// IterativeSinCluster is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// IterativeSinCluster is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with IterativeSinCluster.  If not, see <https://www.gnu.org/licenses/>.

#include "parameter.hpp"
#include "dsp/constants.hpp"

using namespace SomeDSP;

IntScale<double> Scales::boolScale(1);
LinearScale<double> Scales::defaultScale(0.0, 1.0);

LinearScale<double> Scales::masterOctave(-4.0, 4.0);
LinearScale<double> Scales::equalTemperament(1.0, 60.0);
LinearScale<double> Scales::pitchMultiply(0.0, 4.0);
LinearScale<double> Scales::pitchModulo(0.0, 60.0);

IntScale<double> Scales::seed(16777215); // 2^24 - 1
LogScale<double> Scales::randomAmount(0.0, 1.0, 0.5, 0.1);

SPolyScale<double> Scales::chorusFrequency(-40.0, 40.0, 0.6);
LogScale<double> Scales::chorusDelayTimeRange(0.00003, 0.001, 0.5, 0.0001);
LogScale<double> Scales::chorusMinDelayTime(0, 0.01, 0.5, 0.001);
LinearScale<double> Scales::chorusPhase(0, twopi);
LinearScale<double> Scales::chorusOffset(0, twopi / 3.0);

IntScale<double> Scales::oscSemi(120);
IntScale<double> Scales::oscMilli(1000);
IntScale<double> Scales::oscOctave(8);

LogScale<double> Scales::gain(0.0, 4.0, 0.5, 1.0);
LinearScale<double> Scales::gainBoost(1.0, 16.0);
DecibelScale<double> Scales::gainDecibel(-40.0, 0.0, true);

LinearScale<double> Scales::shelvingPitch(0.0, 60.0);
DecibelScale<double> Scales::shelvingGain(-30.0, 30.0, true);

LogScale<double> Scales::envelopeA(0.0001, 16.0, 0.5, 2.0);
LogScale<double> Scales::envelopeD(0.0001, 16.0, 0.5, 4.0);
LogScale<double> Scales::envelopeS(0.0, 0.9995, 0.5, 0.3);
LogScale<double> Scales::envelopeR(0.001, 16.0, 0.5, 2.0);

IntScale<double> Scales::nVoice(5);
LogScale<double> Scales::smoothness(0.0, 0.5, 0.1, 0.04);

// Generated from preset dump. This works, but hard coding preset data is seriously bad.
#ifndef TEST_BUILD
void GlobalParameter::loadProgram(uint32_t index)
{
  using ID = ParameterID::ID;

  switch (index) {
    default:
      resetParameter();
      break;

    case presetDefault: {
      value[ID::bypass]->setFromInt(0);
      value[ID::aliasing]->setFromInt(0);
      value[ID::negativeSemi]->setFromInt(0);
      value[ID::masterOctave]->setFromNormalized(0.5);
      value[ID::equalTemperament]->setFromNormalized(0.1864406779661017);
      value[ID::pitchMultiply]->setFromNormalized(0.25);
      value[ID::pitchModulo]->setFromNormalized(0.0);
      value[ID::seed]->setFromInt(0);
      value[ID::randomRetrigger]->setFromInt(0);
      value[ID::randomGainAmount]->setFromNormalized(0.0);
      value[ID::randomFrequencyAmount]->setFromNormalized(0.0);
      value[ID::chorusMix]->setFromNormalized(0.0);
      value[ID::chorusFrequency]->setFromNormalized(0.5);
      value[ID::chorusDepth]->setFromNormalized(0.0);
      value[ID::chorusDelayTimeRange0]->setFromNormalized(0.0);
      value[ID::chorusDelayTimeRange1]->setFromNormalized(0.0);
      value[ID::chorusDelayTimeRange2]->setFromNormalized(0.0);
      value[ID::chorusMinDelayTime0]->setFromNormalized(0.5);
      value[ID::chorusMinDelayTime1]->setFromNormalized(0.5);
      value[ID::chorusMinDelayTime2]->setFromNormalized(0.5);
      value[ID::chorusPhase]->setFromNormalized(0.0);
      value[ID::chorusOffset]->setFromNormalized(0.0);
      value[ID::chorusFeedback]->setFromNormalized(0.0);
      value[ID::chorusKeyFollow]->setFromInt(1);
      value[ID::gain]->setFromNormalized(0.5);
      value[ID::gainBoost]->setFromNormalized(0.0);
      value[ID::gainA]->setFromNormalized(0.0);
      value[ID::gainD]->setFromNormalized(0.49999999999999994);
      value[ID::gainS]->setFromNormalized(0.49999999999999994);
      value[ID::gainR]->setFromNormalized(0.0);
      value[ID::gainEnvelopeCurve]->setFromNormalized(0.0);
      value[ID::lowShelfPitch]->setFromNormalized(0.0);
      value[ID::lowShelfGain]->setFromNormalized(0.5);
      value[ID::highShelfPitch]->setFromNormalized(0.0);
      value[ID::highShelfGain]->setFromNormalized(0.5);
      value[ID::gain0]->setFromNormalized(1.0);
      value[ID::gain1]->setFromNormalized(1.0);
      value[ID::gain2]->setFromNormalized(1.0);
      value[ID::gain3]->setFromNormalized(1.0);
      value[ID::gain4]->setFromNormalized(1.0);
      value[ID::gain5]->setFromNormalized(1.0);
      value[ID::gain6]->setFromNormalized(1.0);
      value[ID::gain7]->setFromNormalized(1.0);
      value[ID::semi0]->setFromInt(0);
      value[ID::semi1]->setFromInt(0);
      value[ID::semi2]->setFromInt(0);
      value[ID::semi3]->setFromInt(0);
      value[ID::semi4]->setFromInt(0);
      value[ID::semi5]->setFromInt(0);
      value[ID::semi6]->setFromInt(0);
      value[ID::semi7]->setFromInt(0);
      value[ID::milli0]->setFromInt(0);
      value[ID::milli1]->setFromInt(0);
      value[ID::milli2]->setFromInt(0);
      value[ID::milli3]->setFromInt(0);
      value[ID::milli4]->setFromInt(0);
      value[ID::milli5]->setFromInt(0);
      value[ID::milli6]->setFromInt(0);
      value[ID::milli7]->setFromInt(0);
      value[ID::overtone0]->setFromNormalized(1.0);
      value[ID::overtone1]->setFromNormalized(0.8494850021680094);
      value[ID::overtone2]->setFromNormalized(0.7614393726401688);
      value[ID::overtone3]->setFromNormalized(0.6989700043360189);
      value[ID::overtone4]->setFromNormalized(0.6505149978319906);
      value[ID::overtone5]->setFromNormalized(0.6109243748081782);
      value[ID::overtone6]->setFromNormalized(0.5774509799928716);
      value[ID::overtone7]->setFromNormalized(0.5484550065040282);
      value[ID::overtone8]->setFromNormalized(0.5228787452803376);
      value[ID::overtone9]->setFromNormalized(0.5);
      value[ID::overtone10]->setFromNormalized(0.47930365742088743);
      value[ID::overtone11]->setFromNormalized(0.46040937697618756);
      value[ID::overtone12]->setFromNormalized(0.44302832384658164);
      value[ID::overtone13]->setFromNormalized(0.426935982160881);
      value[ID::overtone14]->setFromNormalized(0.4119543704721593);
      value[ID::overtone15]->setFromNormalized(0.3979400086720375);
      value[ID::chordGain0]->setFromNormalized(1.0);
      value[ID::chordGain1]->setFromNormalized(1.0);
      value[ID::chordGain2]->setFromNormalized(1.0);
      value[ID::chordGain3]->setFromNormalized(1.0);
      value[ID::chordSemi0]->setFromInt(0);
      value[ID::chordSemi1]->setFromInt(0);
      value[ID::chordSemi2]->setFromInt(0);
      value[ID::chordSemi3]->setFromInt(0);
      value[ID::chordMilli0]->setFromInt(0);
      value[ID::chordMilli1]->setFromInt(0);
      value[ID::chordMilli2]->setFromInt(0);
      value[ID::chordMilli3]->setFromInt(0);
      value[ID::chordPan0]->setFromNormalized(0.5);
      value[ID::chordPan1]->setFromNormalized(0.5);
      value[ID::chordPan2]->setFromNormalized(0.5);
      value[ID::chordPan3]->setFromNormalized(0.5);
      value[ID::nVoice]->setFromInt(5);
      value[ID::smoothness]->setFromNormalized(0.10000000000000002);
      value[ID::pitchBend]->setFromNormalized(0.5);
    } break;

    case preset2479: {
      value[ID::bypass]->setFromInt(0);
      value[ID::aliasing]->setFromInt(0);
      value[ID::negativeSemi]->setFromInt(0);
      value[ID::masterOctave]->setFromNormalized(0.422);
      value[ID::equalTemperament]->setFromNormalized(0.186441);
      value[ID::pitchMultiply]->setFromNormalized(0.25);
      value[ID::pitchModulo]->setFromNormalized(0.0);
      value[ID::seed]->setFromInt(0);
      value[ID::randomRetrigger]->setFromInt(0);
      value[ID::randomGainAmount]->setFromNormalized(1.0);
      value[ID::randomFrequencyAmount]->setFromNormalized(0.0);
      value[ID::chorusMix]->setFromNormalized(0.484);
      value[ID::chorusFrequency]->setFromNormalized(0.5144);
      value[ID::chorusDepth]->setFromNormalized(0.752);
      value[ID::chorusDelayTimeRange0]->setFromNormalized(0.0);
      value[ID::chorusDelayTimeRange1]->setFromNormalized(0.0);
      value[ID::chorusDelayTimeRange2]->setFromNormalized(0.0);
      value[ID::chorusMinDelayTime0]->setFromNormalized(0.696);
      value[ID::chorusMinDelayTime1]->setFromNormalized(1.0);
      value[ID::chorusMinDelayTime2]->setFromNormalized(0.9);
      value[ID::chorusPhase]->setFromNormalized(0.0);
      value[ID::chorusOffset]->setFromNormalized(0.492);
      value[ID::chorusFeedback]->setFromNormalized(0.7);
      value[ID::chorusKeyFollow]->setFromInt(1);
      value[ID::gain]->setFromNormalized(0.5);
      value[ID::gainBoost]->setFromNormalized(0.0);
      value[ID::gainA]->setFromNormalized(0.0);
      value[ID::gainD]->setFromNormalized(0.5);
      value[ID::gainS]->setFromNormalized(0.5);
      value[ID::gainR]->setFromNormalized(0.004144);
      value[ID::gainEnvelopeCurve]->setFromNormalized(0.0);
      value[ID::lowShelfPitch]->setFromNormalized(0.414);
      value[ID::lowShelfGain]->setFromNormalized(0.8);
      value[ID::highShelfPitch]->setFromNormalized(1.0);
      value[ID::highShelfGain]->setFromNormalized(0.754);
      value[ID::gain0]->setFromNormalized(1.0);
      value[ID::gain1]->setFromNormalized(1.0);
      value[ID::gain2]->setFromNormalized(1.0);
      value[ID::gain3]->setFromNormalized(1.0);
      value[ID::gain4]->setFromNormalized(1.0);
      value[ID::gain5]->setFromNormalized(1.0);
      value[ID::gain6]->setFromNormalized(1.0);
      value[ID::gain7]->setFromNormalized(1.0);
      value[ID::semi0]->setFromInt(0);
      value[ID::semi1]->setFromInt(2);
      value[ID::semi2]->setFromInt(4);
      value[ID::semi3]->setFromInt(7);
      value[ID::semi4]->setFromInt(9);
      value[ID::semi5]->setFromInt(12);
      value[ID::semi6]->setFromInt(11);
      value[ID::semi7]->setFromInt(12);
      value[ID::milli0]->setFromInt(0);
      value[ID::milli1]->setFromInt(0);
      value[ID::milli2]->setFromInt(0);
      value[ID::milli3]->setFromInt(0);
      value[ID::milli4]->setFromInt(0);
      value[ID::milli5]->setFromInt(0);
      value[ID::milli6]->setFromInt(592);
      value[ID::milli7]->setFromInt(0);
      value[ID::overtone0]->setFromNormalized(0.635714);
      value[ID::overtone1]->setFromNormalized(0.792857);
      value[ID::overtone2]->setFromNormalized(0.907143);
      value[ID::overtone3]->setFromNormalized(0.692857);
      value[ID::overtone4]->setFromNormalized(0.65);
      value[ID::overtone5]->setFromNormalized(0.621429);
      value[ID::overtone6]->setFromNormalized(0.607143);
      value[ID::overtone7]->setFromNormalized(0.607143);
      value[ID::overtone8]->setFromNormalized(0.635714);
      value[ID::overtone9]->setFromNormalized(0.678571);
      value[ID::overtone10]->setFromNormalized(0.714286);
      value[ID::overtone11]->setFromNormalized(0.721429);
      value[ID::overtone12]->setFromNormalized(0.685714);
      value[ID::overtone13]->setFromNormalized(0.492857);
      value[ID::overtone14]->setFromNormalized(0.414286);
      value[ID::overtone15]->setFromNormalized(0.478571);
      value[ID::chordGain0]->setFromNormalized(1.0);
      value[ID::chordGain1]->setFromNormalized(1.0);
      value[ID::chordGain2]->setFromNormalized(1.0);
      value[ID::chordGain3]->setFromNormalized(1.0);
      value[ID::chordSemi0]->setFromInt(0);
      value[ID::chordSemi1]->setFromInt(12);
      value[ID::chordSemi2]->setFromInt(0);
      value[ID::chordSemi3]->setFromInt(23);
      value[ID::chordMilli0]->setFromInt(0);
      value[ID::chordMilli1]->setFromInt(0);
      value[ID::chordMilli2]->setFromInt(498);
      value[ID::chordMilli3]->setFromInt(918);
      value[ID::chordPan0]->setFromNormalized(1.0);
      value[ID::chordPan1]->setFromNormalized(0.272);
      value[ID::chordPan2]->setFromNormalized(0.0);
      value[ID::chordPan3]->setFromNormalized(0.788);
      value[ID::nVoice]->setFromInt(5);
      value[ID::smoothness]->setFromNormalized(0.1);
      value[ID::pitchBend]->setFromNormalized(0.5);
    } break;

    case preset5Times7: {
      value[ID::bypass]->setFromInt(0);
      value[ID::aliasing]->setFromInt(0);
      value[ID::negativeSemi]->setFromInt(0);
      value[ID::masterOctave]->setFromNormalized(0.5);
      value[ID::equalTemperament]->setFromNormalized(0.186441);
      value[ID::pitchMultiply]->setFromNormalized(0.25);
      value[ID::pitchModulo]->setFromNormalized(0.0);
      value[ID::seed]->setFromInt(0);
      value[ID::randomRetrigger]->setFromInt(0);
      value[ID::randomGainAmount]->setFromNormalized(0.0);
      value[ID::randomFrequencyAmount]->setFromNormalized(0.0);
      value[ID::chorusMix]->setFromNormalized(0.0);
      value[ID::chorusFrequency]->setFromNormalized(0.5);
      value[ID::chorusDepth]->setFromNormalized(0.0);
      value[ID::chorusDelayTimeRange0]->setFromNormalized(0.0);
      value[ID::chorusDelayTimeRange1]->setFromNormalized(0.0);
      value[ID::chorusDelayTimeRange2]->setFromNormalized(0.0);
      value[ID::chorusMinDelayTime0]->setFromNormalized(0.5);
      value[ID::chorusMinDelayTime1]->setFromNormalized(0.5);
      value[ID::chorusMinDelayTime2]->setFromNormalized(0.5);
      value[ID::chorusPhase]->setFromNormalized(0.0);
      value[ID::chorusOffset]->setFromNormalized(0.0);
      value[ID::chorusFeedback]->setFromNormalized(0.0);
      value[ID::chorusKeyFollow]->setFromInt(1);
      value[ID::gain]->setFromNormalized(0.5);
      value[ID::gainBoost]->setFromNormalized(0.0);
      value[ID::gainA]->setFromNormalized(0.0);
      value[ID::gainD]->setFromNormalized(0.5);
      value[ID::gainS]->setFromNormalized(0.5);
      value[ID::gainR]->setFromNormalized(0.152);
      value[ID::gainEnvelopeCurve]->setFromNormalized(0.0);
      value[ID::lowShelfPitch]->setFromNormalized(0.0);
      value[ID::lowShelfGain]->setFromNormalized(0.5);
      value[ID::highShelfPitch]->setFromNormalized(0.0);
      value[ID::highShelfGain]->setFromNormalized(0.5);
      value[ID::gain0]->setFromNormalized(1.0);
      value[ID::gain1]->setFromNormalized(1.0);
      value[ID::gain2]->setFromNormalized(1.0);
      value[ID::gain3]->setFromNormalized(1.0);
      value[ID::gain4]->setFromNormalized(1.0);
      value[ID::gain5]->setFromNormalized(1.0);
      value[ID::gain6]->setFromNormalized(1.0);
      value[ID::gain7]->setFromNormalized(1.0);
      value[ID::semi0]->setFromInt(0);
      value[ID::semi1]->setFromInt(5);
      value[ID::semi2]->setFromInt(10);
      value[ID::semi3]->setFromInt(15);
      value[ID::semi4]->setFromInt(20);
      value[ID::semi5]->setFromInt(25);
      value[ID::semi6]->setFromInt(30);
      value[ID::semi7]->setFromInt(35);
      value[ID::milli0]->setFromInt(0);
      value[ID::milli1]->setFromInt(0);
      value[ID::milli2]->setFromInt(0);
      value[ID::milli3]->setFromInt(0);
      value[ID::milli4]->setFromInt(0);
      value[ID::milli5]->setFromInt(0);
      value[ID::milli6]->setFromInt(0);
      value[ID::milli7]->setFromInt(0);
      value[ID::overtone0]->setFromNormalized(1.0);
      value[ID::overtone1]->setFromNormalized(0.849485);
      value[ID::overtone2]->setFromNormalized(0.761439);
      value[ID::overtone3]->setFromNormalized(0.69897);
      value[ID::overtone4]->setFromNormalized(0.650515);
      value[ID::overtone5]->setFromNormalized(0.610925);
      value[ID::overtone6]->setFromNormalized(0.577451);
      value[ID::overtone7]->setFromNormalized(0.548455);
      value[ID::overtone8]->setFromNormalized(0.522879);
      value[ID::overtone9]->setFromNormalized(0.5);
      value[ID::overtone10]->setFromNormalized(0.479303);
      value[ID::overtone11]->setFromNormalized(0.460409);
      value[ID::overtone12]->setFromNormalized(0.443028);
      value[ID::overtone13]->setFromNormalized(0.426937);
      value[ID::overtone14]->setFromNormalized(0.411955);
      value[ID::overtone15]->setFromNormalized(0.39794);
      value[ID::chordGain0]->setFromNormalized(1.0);
      value[ID::chordGain1]->setFromNormalized(1.0);
      value[ID::chordGain2]->setFromNormalized(1.0);
      value[ID::chordGain3]->setFromNormalized(1.0);
      value[ID::chordSemi0]->setFromInt(0);
      value[ID::chordSemi1]->setFromInt(12);
      value[ID::chordSemi2]->setFromInt(12);
      value[ID::chordSemi3]->setFromInt(0);
      value[ID::chordMilli0]->setFromInt(0);
      value[ID::chordMilli1]->setFromInt(160);
      value[ID::chordMilli2]->setFromInt(0);
      value[ID::chordMilli3]->setFromInt(156);
      value[ID::chordPan0]->setFromNormalized(0.0);
      value[ID::chordPan1]->setFromNormalized(0.0);
      value[ID::chordPan2]->setFromNormalized(1.0);
      value[ID::chordPan3]->setFromNormalized(1.0);
      value[ID::nVoice]->setFromInt(5);
      value[ID::smoothness]->setFromNormalized(0.1);
      value[ID::pitchBend]->setFromNormalized(0.5);
    } break;

    case presetAliasing: {
      value[ID::bypass]->setFromInt(0);
      value[ID::aliasing]->setFromInt(1);
      value[ID::negativeSemi]->setFromInt(0);
      value[ID::masterOctave]->setFromNormalized(0.374);
      value[ID::equalTemperament]->setFromNormalized(0.186441);
      value[ID::pitchMultiply]->setFromNormalized(0.0962);
      value[ID::pitchModulo]->setFromNormalized(0.0002);
      value[ID::seed]->setFromInt(0);
      value[ID::randomRetrigger]->setFromInt(0);
      value[ID::randomGainAmount]->setFromNormalized(0.0);
      value[ID::randomFrequencyAmount]->setFromNormalized(0.0);
      value[ID::chorusMix]->setFromNormalized(0.0);
      value[ID::chorusFrequency]->setFromNormalized(0.5);
      value[ID::chorusDepth]->setFromNormalized(0.0);
      value[ID::chorusDelayTimeRange0]->setFromNormalized(0.0);
      value[ID::chorusDelayTimeRange1]->setFromNormalized(0.0);
      value[ID::chorusDelayTimeRange2]->setFromNormalized(0.0);
      value[ID::chorusMinDelayTime0]->setFromNormalized(0.5);
      value[ID::chorusMinDelayTime1]->setFromNormalized(0.5);
      value[ID::chorusMinDelayTime2]->setFromNormalized(0.5);
      value[ID::chorusPhase]->setFromNormalized(0.0);
      value[ID::chorusOffset]->setFromNormalized(0.0);
      value[ID::chorusFeedback]->setFromNormalized(0.0);
      value[ID::chorusKeyFollow]->setFromInt(1);
      value[ID::gain]->setFromNormalized(0.5);
      value[ID::gainBoost]->setFromNormalized(0.0);
      value[ID::gainA]->setFromNormalized(0.0);
      value[ID::gainD]->setFromNormalized(0.5);
      value[ID::gainS]->setFromNormalized(0.5);
      value[ID::gainR]->setFromNormalized(0.000144);
      value[ID::gainEnvelopeCurve]->setFromNormalized(0.0);
      value[ID::lowShelfPitch]->setFromNormalized(0.0);
      value[ID::lowShelfGain]->setFromNormalized(0.5);
      value[ID::highShelfPitch]->setFromNormalized(0.0);
      value[ID::highShelfGain]->setFromNormalized(0.5);
      value[ID::gain0]->setFromNormalized(1.0);
      value[ID::gain1]->setFromNormalized(1.0);
      value[ID::gain2]->setFromNormalized(1.0);
      value[ID::gain3]->setFromNormalized(1.0);
      value[ID::gain4]->setFromNormalized(1.0);
      value[ID::gain5]->setFromNormalized(1.0);
      value[ID::gain6]->setFromNormalized(1.0);
      value[ID::gain7]->setFromNormalized(1.0);
      value[ID::semi0]->setFromInt(0);
      value[ID::semi1]->setFromInt(20);
      value[ID::semi2]->setFromInt(49);
      value[ID::semi3]->setFromInt(56);
      value[ID::semi4]->setFromInt(68);
      value[ID::semi5]->setFromInt(86);
      value[ID::semi6]->setFromInt(75);
      value[ID::semi7]->setFromInt(74);
      value[ID::milli0]->setFromInt(0);
      value[ID::milli1]->setFromInt(0);
      value[ID::milli2]->setFromInt(0);
      value[ID::milli3]->setFromInt(0);
      value[ID::milli4]->setFromInt(0);
      value[ID::milli5]->setFromInt(0);
      value[ID::milli6]->setFromInt(0);
      value[ID::milli7]->setFromInt(0);
      value[ID::overtone0]->setFromNormalized(1.0);
      value[ID::overtone1]->setFromNormalized(0.0);
      value[ID::overtone2]->setFromNormalized(0.0);
      value[ID::overtone3]->setFromNormalized(0.0);
      value[ID::overtone4]->setFromNormalized(0.0);
      value[ID::overtone5]->setFromNormalized(0.0);
      value[ID::overtone6]->setFromNormalized(0.0);
      value[ID::overtone7]->setFromNormalized(0.0);
      value[ID::overtone8]->setFromNormalized(0.0);
      value[ID::overtone9]->setFromNormalized(0.0);
      value[ID::overtone10]->setFromNormalized(0.0);
      value[ID::overtone11]->setFromNormalized(0.0);
      value[ID::overtone12]->setFromNormalized(0.0);
      value[ID::overtone13]->setFromNormalized(0.0);
      value[ID::overtone14]->setFromNormalized(0.0);
      value[ID::overtone15]->setFromNormalized(0.0);
      value[ID::chordGain0]->setFromNormalized(1.0);
      value[ID::chordGain1]->setFromNormalized(1.0);
      value[ID::chordGain2]->setFromNormalized(1.0);
      value[ID::chordGain3]->setFromNormalized(1.0);
      value[ID::chordSemi0]->setFromInt(120);
      value[ID::chordSemi1]->setFromInt(96);
      value[ID::chordSemi2]->setFromInt(120);
      value[ID::chordSemi3]->setFromInt(120);
      value[ID::chordMilli0]->setFromInt(0);
      value[ID::chordMilli1]->setFromInt(0);
      value[ID::chordMilli2]->setFromInt(568);
      value[ID::chordMilli3]->setFromInt(88);
      value[ID::chordPan0]->setFromNormalized(0.5);
      value[ID::chordPan1]->setFromNormalized(0.5);
      value[ID::chordPan2]->setFromNormalized(0.5);
      value[ID::chordPan3]->setFromNormalized(0.5);
      value[ID::nVoice]->setFromInt(5);
      value[ID::smoothness]->setFromNormalized(0.1);
      value[ID::pitchBend]->setFromNormalized(0.5);
    } break;

    case presetAnotherPad: {
      value[ID::bypass]->setFromInt(0);
      value[ID::aliasing]->setFromInt(0);
      value[ID::negativeSemi]->setFromInt(0);
      value[ID::masterOctave]->setFromNormalized(0.5);
      value[ID::equalTemperament]->setFromNormalized(0.192441);
      value[ID::pitchMultiply]->setFromNormalized(0.125);
      value[ID::pitchModulo]->setFromNormalized(0.0);
      value[ID::seed]->setFromInt(0);
      value[ID::randomRetrigger]->setFromInt(0);
      value[ID::randomGainAmount]->setFromNormalized(0.0);
      value[ID::randomFrequencyAmount]->setFromNormalized(0.272);
      value[ID::chorusMix]->setFromNormalized(0.404);
      value[ID::chorusFrequency]->setFromNormalized(0.416);
      value[ID::chorusDepth]->setFromNormalized(1.0);
      value[ID::chorusDelayTimeRange0]->setFromNormalized(0.06);
      value[ID::chorusDelayTimeRange1]->setFromNormalized(0.156);
      value[ID::chorusDelayTimeRange2]->setFromNormalized(0.136);
      value[ID::chorusMinDelayTime0]->setFromNormalized(0.316);
      value[ID::chorusMinDelayTime1]->setFromNormalized(0.212);
      value[ID::chorusMinDelayTime2]->setFromNormalized(0.136);
      value[ID::chorusPhase]->setFromNormalized(0.0);
      value[ID::chorusOffset]->setFromNormalized(1.0);
      value[ID::chorusFeedback]->setFromNormalized(0.712);
      value[ID::chorusKeyFollow]->setFromInt(0);
      value[ID::gain]->setFromNormalized(0.5);
      value[ID::gainBoost]->setFromNormalized(0.368);
      value[ID::gainA]->setFromNormalized(0.46);
      value[ID::gainD]->setFromNormalized(0.5);
      value[ID::gainS]->setFromNormalized(1.0);
      value[ID::gainR]->setFromNormalized(0.72);
      value[ID::gainEnvelopeCurve]->setFromNormalized(0.656);
      value[ID::lowShelfPitch]->setFromNormalized(0.0);
      value[ID::lowShelfGain]->setFromNormalized(0.5);
      value[ID::highShelfPitch]->setFromNormalized(0.574);
      value[ID::highShelfGain]->setFromNormalized(0.356);
      value[ID::gain0]->setFromNormalized(1.0);
      value[ID::gain1]->setFromNormalized(0.792);
      value[ID::gain2]->setFromNormalized(1.0);
      value[ID::gain3]->setFromNormalized(1.0);
      value[ID::gain4]->setFromNormalized(1.0);
      value[ID::gain5]->setFromNormalized(0.708);
      value[ID::gain6]->setFromNormalized(0.872);
      value[ID::gain7]->setFromNormalized(0.826);
      value[ID::semi0]->setFromInt(0);
      value[ID::semi1]->setFromInt(0);
      value[ID::semi2]->setFromInt(6);
      value[ID::semi3]->setFromInt(7);
      value[ID::semi4]->setFromInt(7);
      value[ID::semi5]->setFromInt(17);
      value[ID::semi6]->setFromInt(0);
      value[ID::semi7]->setFromInt(0);
      value[ID::milli0]->setFromInt(0);
      value[ID::milli1]->setFromInt(176);
      value[ID::milli2]->setFromInt(946);
      value[ID::milli3]->setFromInt(0);
      value[ID::milli4]->setFromInt(190);
      value[ID::milli5]->setFromInt(0);
      value[ID::milli6]->setFromInt(192);
      value[ID::milli7]->setFromInt(12);
      value[ID::overtone0]->setFromNormalized(0.721429);
      value[ID::overtone1]->setFromNormalized(0.357143);
      value[ID::overtone2]->setFromNormalized(0.592857);
      value[ID::overtone3]->setFromNormalized(0.664286);
      value[ID::overtone4]->setFromNormalized(0.328571);
      value[ID::overtone5]->setFromNormalized(0.164286);
      value[ID::overtone6]->setFromNormalized(0.114286);
      value[ID::overtone7]->setFromNormalized(0.114286);
      value[ID::overtone8]->setFromNormalized(0.114286);
      value[ID::overtone9]->setFromNormalized(0.15);
      value[ID::overtone10]->setFromNormalized(0.307143);
      value[ID::overtone11]->setFromNormalized(0.557143);
      value[ID::overtone12]->setFromNormalized(0.721429);
      value[ID::overtone13]->setFromNormalized(0.621429);
      value[ID::overtone14]->setFromNormalized(0.357143);
      value[ID::overtone15]->setFromNormalized(0.2);
      value[ID::chordGain0]->setFromNormalized(1.0);
      value[ID::chordGain1]->setFromNormalized(0.824);
      value[ID::chordGain2]->setFromNormalized(0.974);
      value[ID::chordGain3]->setFromNormalized(0.756);
      value[ID::chordSemi0]->setFromInt(0);
      value[ID::chordSemi1]->setFromInt(24);
      value[ID::chordSemi2]->setFromInt(0);
      value[ID::chordSemi3]->setFromInt(12);
      value[ID::chordMilli0]->setFromInt(0);
      value[ID::chordMilli1]->setFromInt(418);
      value[ID::chordMilli2]->setFromInt(0);
      value[ID::chordMilli3]->setFromInt(0);
      value[ID::chordPan0]->setFromNormalized(0.0);
      value[ID::chordPan1]->setFromNormalized(0.672);
      value[ID::chordPan2]->setFromNormalized(1.0);
      value[ID::chordPan3]->setFromNormalized(0.288);
      value[ID::nVoice]->setFromInt(5);
      value[ID::smoothness]->setFromNormalized(0.1);
      value[ID::pitchBend]->setFromNormalized(0.5);
    } break;

    case presetCalmDecay: {
      value[ID::bypass]->setFromInt(0);
      value[ID::aliasing]->setFromInt(0);
      value[ID::negativeSemi]->setFromInt(0);
      value[ID::masterOctave]->setFromNormalized(0.30399975180625916);
      value[ID::equalTemperament]->setFromNormalized(0.1864406779661017);
      value[ID::pitchMultiply]->setFromNormalized(0.25);
      value[ID::pitchModulo]->setFromNormalized(0.0);
      value[ID::seed]->setFromInt(0);
      value[ID::randomRetrigger]->setFromInt(0);
      value[ID::randomGainAmount]->setFromNormalized(0.0);
      value[ID::randomFrequencyAmount]->setFromNormalized(0.0);
      value[ID::chorusMix]->setFromNormalized(0.0);
      value[ID::chorusFrequency]->setFromNormalized(0.5);
      value[ID::chorusDepth]->setFromNormalized(0.0);
      value[ID::chorusDelayTimeRange0]->setFromNormalized(0.0);
      value[ID::chorusDelayTimeRange1]->setFromNormalized(0.0);
      value[ID::chorusDelayTimeRange2]->setFromNormalized(0.0);
      value[ID::chorusMinDelayTime0]->setFromNormalized(0.5);
      value[ID::chorusMinDelayTime1]->setFromNormalized(0.5);
      value[ID::chorusMinDelayTime2]->setFromNormalized(0.5);
      value[ID::chorusPhase]->setFromNormalized(0.0);
      value[ID::chorusOffset]->setFromNormalized(0.0);
      value[ID::chorusFeedback]->setFromNormalized(0.0);
      value[ID::chorusKeyFollow]->setFromInt(1);
      value[ID::gain]->setFromNormalized(0.5);
      value[ID::gainBoost]->setFromNormalized(0.5920000076293945);
      value[ID::gainA]->setFromNormalized(0.0);
      value[ID::gainD]->setFromNormalized(0.21200002729892728);
      value[ID::gainS]->setFromNormalized(0.17600002884864804);
      value[ID::gainR]->setFromNormalized(0.6479997038841248);
      value[ID::gainEnvelopeCurve]->setFromNormalized(0.0);
      value[ID::lowShelfPitch]->setFromNormalized(0.0);
      value[ID::lowShelfGain]->setFromNormalized(0.5);
      value[ID::highShelfPitch]->setFromNormalized(0.0);
      value[ID::highShelfGain]->setFromNormalized(0.5);
      value[ID::gain0]->setFromNormalized(1.0);
      value[ID::gain1]->setFromNormalized(0.7379998564720154);
      value[ID::gain2]->setFromNormalized(0.554000973701477);
      value[ID::gain3]->setFromNormalized(0.8940006494522095);
      value[ID::gain4]->setFromNormalized(0.8820001482963562);
      value[ID::gain5]->setFromNormalized(0.8540000319480896);
      value[ID::gain6]->setFromNormalized(0.8320000767707825);
      value[ID::gain7]->setFromNormalized(0.8160005807876587);
      value[ID::semi0]->setFromInt(0);
      value[ID::semi1]->setFromInt(2);
      value[ID::semi2]->setFromInt(4);
      value[ID::semi3]->setFromInt(7);
      value[ID::semi4]->setFromInt(12);
      value[ID::semi5]->setFromInt(19);
      value[ID::semi6]->setFromInt(17);
      value[ID::semi7]->setFromInt(16);
      value[ID::milli0]->setFromInt(0);
      value[ID::milli1]->setFromInt(0);
      value[ID::milli2]->setFromInt(0);
      value[ID::milli3]->setFromInt(0);
      value[ID::milli4]->setFromInt(408);
      value[ID::milli5]->setFromInt(0);
      value[ID::milli6]->setFromInt(538);
      value[ID::milli7]->setFromInt(0);
      value[ID::overtone0]->setFromNormalized(1.0);
      value[ID::overtone1]->setFromNormalized(0.0);
      value[ID::overtone2]->setFromNormalized(0.7642857142857142);
      value[ID::overtone3]->setFromNormalized(0.0);
      value[ID::overtone4]->setFromNormalized(0.5714285714285714);
      value[ID::overtone5]->setFromNormalized(0.0);
      value[ID::overtone6]->setFromNormalized(0.29999999999999993);
      value[ID::overtone7]->setFromNormalized(0.0);
      value[ID::overtone8]->setFromNormalized(0.12857142857142845);
      value[ID::overtone9]->setFromNormalized(0.0);
      value[ID::overtone10]->setFromNormalized(0.0);
      value[ID::overtone11]->setFromNormalized(0.0);
      value[ID::overtone12]->setFromNormalized(0.0);
      value[ID::overtone13]->setFromNormalized(0.0);
      value[ID::overtone14]->setFromNormalized(0.0);
      value[ID::overtone15]->setFromNormalized(0.0);
      value[ID::chordGain0]->setFromNormalized(1.0);
      value[ID::chordGain1]->setFromNormalized(1.0);
      value[ID::chordGain2]->setFromNormalized(0.5640004277229309);
      value[ID::chordGain3]->setFromNormalized(0.7600002288818359);
      value[ID::chordSemi0]->setFromInt(0);
      value[ID::chordSemi1]->setFromInt(7);
      value[ID::chordSemi2]->setFromInt(14);
      value[ID::chordSemi3]->setFromInt(9);
      value[ID::chordMilli0]->setFromInt(0);
      value[ID::chordMilli1]->setFromInt(0);
      value[ID::chordMilli2]->setFromInt(0);
      value[ID::chordMilli3]->setFromInt(476);
      value[ID::chordPan0]->setFromNormalized(0.5);
      value[ID::chordPan1]->setFromNormalized(0.19200004637241364);
      value[ID::chordPan2]->setFromNormalized(0.5);
      value[ID::chordPan3]->setFromNormalized(0.7080000042915344);
      value[ID::nVoice]->setFromInt(5);
      value[ID::smoothness]->setFromNormalized(0.10000000000000003);
      value[ID::pitchBend]->setFromNormalized(0.5);
    } break;

    case presetChorusKeyFollow: {
      value[ID::bypass]->setFromInt(0);
      value[ID::aliasing]->setFromInt(0);
      value[ID::negativeSemi]->setFromInt(0);
      value[ID::masterOctave]->setFromNormalized(0.5);
      value[ID::equalTemperament]->setFromNormalized(0.186441);
      value[ID::pitchMultiply]->setFromNormalized(0.25);
      value[ID::pitchModulo]->setFromNormalized(0.0);
      value[ID::seed]->setFromInt(0);
      value[ID::randomRetrigger]->setFromInt(0);
      value[ID::randomGainAmount]->setFromNormalized(0.128);
      value[ID::randomFrequencyAmount]->setFromNormalized(0.064);
      value[ID::chorusMix]->setFromNormalized(0.76);
      value[ID::chorusFrequency]->setFromNormalized(0.464);
      value[ID::chorusDepth]->setFromNormalized(1.0);
      value[ID::chorusDelayTimeRange0]->setFromNormalized(0.128);
      value[ID::chorusDelayTimeRange1]->setFromNormalized(0.0);
      value[ID::chorusDelayTimeRange2]->setFromNormalized(0.0);
      value[ID::chorusMinDelayTime0]->setFromNormalized(0.14);
      value[ID::chorusMinDelayTime1]->setFromNormalized(0.736);
      value[ID::chorusMinDelayTime2]->setFromNormalized(0.5);
      value[ID::chorusPhase]->setFromNormalized(0.0);
      value[ID::chorusOffset]->setFromNormalized(1.0);
      value[ID::chorusFeedback]->setFromNormalized(0.956);
      value[ID::chorusKeyFollow]->setFromInt(1);
      value[ID::gain]->setFromNormalized(0.5);
      value[ID::gainBoost]->setFromNormalized(0.0);
      value[ID::gainA]->setFromNormalized(0.0);
      value[ID::gainD]->setFromNormalized(0.5);
      value[ID::gainS]->setFromNormalized(0.548);
      value[ID::gainR]->setFromNormalized(0.0);
      value[ID::gainEnvelopeCurve]->setFromNormalized(0.0);
      value[ID::lowShelfPitch]->setFromNormalized(0.0);
      value[ID::lowShelfGain]->setFromNormalized(0.5);
      value[ID::highShelfPitch]->setFromNormalized(0.0);
      value[ID::highShelfGain]->setFromNormalized(0.5);
      value[ID::gain0]->setFromNormalized(1.0);
      value[ID::gain1]->setFromNormalized(1.0);
      value[ID::gain2]->setFromNormalized(1.0);
      value[ID::gain3]->setFromNormalized(1.0);
      value[ID::gain4]->setFromNormalized(0.788);
      value[ID::gain5]->setFromNormalized(1.0);
      value[ID::gain6]->setFromNormalized(1.0);
      value[ID::gain7]->setFromNormalized(0.9);
      value[ID::semi0]->setFromInt(0);
      value[ID::semi1]->setFromInt(0);
      value[ID::semi2]->setFromInt(0);
      value[ID::semi3]->setFromInt(0);
      value[ID::semi4]->setFromInt(12);
      value[ID::semi5]->setFromInt(0);
      value[ID::semi6]->setFromInt(18);
      value[ID::semi7]->setFromInt(29);
      value[ID::milli0]->setFromInt(0);
      value[ID::milli1]->setFromInt(102);
      value[ID::milli2]->setFromInt(0);
      value[ID::milli3]->setFromInt(82);
      value[ID::milli4]->setFromInt(0);
      value[ID::milli5]->setFromInt(0);
      value[ID::milli6]->setFromInt(726);
      value[ID::milli7]->setFromInt(0);
      value[ID::overtone0]->setFromNormalized(0.564286);
      value[ID::overtone1]->setFromNormalized(1.0);
      value[ID::overtone2]->setFromNormalized(0.835714);
      value[ID::overtone3]->setFromNormalized(0.707143);
      value[ID::overtone4]->setFromNormalized(0.571429);
      value[ID::overtone5]->setFromNormalized(0.478571);
      value[ID::overtone6]->setFromNormalized(0.385714);
      value[ID::overtone7]->setFromNormalized(0.378571);
      value[ID::overtone8]->setFromNormalized(0.471429);
      value[ID::overtone9]->setFromNormalized(0.585714);
      value[ID::overtone10]->setFromNormalized(0.642857);
      value[ID::overtone11]->setFromNormalized(0.728571);
      value[ID::overtone12]->setFromNormalized(0.771429);
      value[ID::overtone13]->setFromNormalized(0.728571);
      value[ID::overtone14]->setFromNormalized(0.607143);
      value[ID::overtone15]->setFromNormalized(0.45);
      value[ID::chordGain0]->setFromNormalized(1.0);
      value[ID::chordGain1]->setFromNormalized(1.0);
      value[ID::chordGain2]->setFromNormalized(1.0);
      value[ID::chordGain3]->setFromNormalized(1.0);
      value[ID::chordSemi0]->setFromInt(0);
      value[ID::chordSemi1]->setFromInt(0);
      value[ID::chordSemi2]->setFromInt(0);
      value[ID::chordSemi3]->setFromInt(0);
      value[ID::chordMilli0]->setFromInt(0);
      value[ID::chordMilli1]->setFromInt(0);
      value[ID::chordMilli2]->setFromInt(0);
      value[ID::chordMilli3]->setFromInt(0);
      value[ID::chordPan0]->setFromNormalized(0.5);
      value[ID::chordPan1]->setFromNormalized(0.5);
      value[ID::chordPan2]->setFromNormalized(0.5);
      value[ID::chordPan3]->setFromNormalized(0.5);
      value[ID::nVoice]->setFromInt(5);
      value[ID::smoothness]->setFromNormalized(0.1);
      value[ID::pitchBend]->setFromNormalized(0.5);
    } break;

    case presetClick: {
      value[ID::bypass]->setFromInt(0);
      value[ID::aliasing]->setFromInt(0);
      value[ID::negativeSemi]->setFromInt(0);
      value[ID::masterOctave]->setFromNormalized(0.5);
      value[ID::equalTemperament]->setFromNormalized(0.1864406779661017);
      value[ID::pitchMultiply]->setFromNormalized(0.25);
      value[ID::pitchModulo]->setFromNormalized(0.0);
      value[ID::seed]->setFromInt(0);
      value[ID::randomRetrigger]->setFromInt(0);
      value[ID::randomGainAmount]->setFromNormalized(0.0);
      value[ID::randomFrequencyAmount]->setFromNormalized(0.0);
      value[ID::chorusMix]->setFromNormalized(0.0);
      value[ID::chorusFrequency]->setFromNormalized(0.5);
      value[ID::chorusDepth]->setFromNormalized(0.0);
      value[ID::chorusDelayTimeRange0]->setFromNormalized(0.0);
      value[ID::chorusDelayTimeRange1]->setFromNormalized(0.0);
      value[ID::chorusDelayTimeRange2]->setFromNormalized(0.0);
      value[ID::chorusMinDelayTime0]->setFromNormalized(0.5);
      value[ID::chorusMinDelayTime1]->setFromNormalized(0.5);
      value[ID::chorusMinDelayTime2]->setFromNormalized(0.5);
      value[ID::chorusPhase]->setFromNormalized(0.0);
      value[ID::chorusOffset]->setFromNormalized(0.0);
      value[ID::chorusFeedback]->setFromNormalized(0.9919999241828918);
      value[ID::chorusKeyFollow]->setFromInt(1);
      value[ID::gain]->setFromNormalized(0.5);
      value[ID::gainBoost]->setFromNormalized(0.0);
      value[ID::gainA]->setFromNormalized(0.0);
      value[ID::gainD]->setFromNormalized(0.09599999338388442);
      value[ID::gainS]->setFromNormalized(0.0);
      value[ID::gainR]->setFromNormalized(0.0);
      value[ID::gainEnvelopeCurve]->setFromNormalized(0.0);
      value[ID::lowShelfPitch]->setFromNormalized(0.0);
      value[ID::lowShelfGain]->setFromNormalized(0.5);
      value[ID::highShelfPitch]->setFromNormalized(0.0);
      value[ID::highShelfGain]->setFromNormalized(0.5);
      value[ID::gain0]->setFromNormalized(1.0);
      value[ID::gain1]->setFromNormalized(1.0);
      value[ID::gain2]->setFromNormalized(1.0);
      value[ID::gain3]->setFromNormalized(1.0);
      value[ID::gain4]->setFromNormalized(1.0);
      value[ID::gain5]->setFromNormalized(1.0);
      value[ID::gain6]->setFromNormalized(1.0);
      value[ID::gain7]->setFromNormalized(1.0);
      value[ID::semi0]->setFromInt(0);
      value[ID::semi1]->setFromInt(0);
      value[ID::semi2]->setFromInt(0);
      value[ID::semi3]->setFromInt(0);
      value[ID::semi4]->setFromInt(0);
      value[ID::semi5]->setFromInt(0);
      value[ID::semi6]->setFromInt(0);
      value[ID::semi7]->setFromInt(0);
      value[ID::milli0]->setFromInt(19);
      value[ID::milli1]->setFromInt(79);
      value[ID::milli2]->setFromInt(101);
      value[ID::milli3]->setFromInt(227);
      value[ID::milli4]->setFromInt(311);
      value[ID::milli5]->setFromInt(757);
      value[ID::milli6]->setFromInt(859);
      value[ID::milli7]->setFromInt(997);
      value[ID::overtone0]->setFromNormalized(1.0);
      value[ID::overtone1]->setFromNormalized(0.8494850021680094);
      value[ID::overtone2]->setFromNormalized(0.7614393726401688);
      value[ID::overtone3]->setFromNormalized(0.5857142857142856);
      value[ID::overtone4]->setFromNormalized(0.6428571428571428);
      value[ID::overtone5]->setFromNormalized(0.6857142857142857);
      value[ID::overtone6]->setFromNormalized(0.7071428571428571);
      value[ID::overtone7]->setFromNormalized(0.7571428571428571);
      value[ID::overtone8]->setFromNormalized(0.8428571428571429);
      value[ID::overtone9]->setFromNormalized(0.8785714285714284);
      value[ID::overtone10]->setFromNormalized(0.9071428571428571);
      value[ID::overtone11]->setFromNormalized(0.9357142857142857);
      value[ID::overtone12]->setFromNormalized(0.9357142857142857);
      value[ID::overtone13]->setFromNormalized(0.9357142857142857);
      value[ID::overtone14]->setFromNormalized(0.9357142857142857);
      value[ID::overtone15]->setFromNormalized(0.8785714285714284);
      value[ID::chordGain0]->setFromNormalized(1.0);
      value[ID::chordGain1]->setFromNormalized(0.9860000610351562);
      value[ID::chordGain2]->setFromNormalized(0.9580003023147583);
      value[ID::chordGain3]->setFromNormalized(0.9220002889633179);
      value[ID::chordSemi0]->setFromInt(0);
      value[ID::chordSemi1]->setFromInt(1);
      value[ID::chordSemi2]->setFromInt(2);
      value[ID::chordSemi3]->setFromInt(3);
      value[ID::chordMilli0]->setFromInt(0);
      value[ID::chordMilli1]->setFromInt(0);
      value[ID::chordMilli2]->setFromInt(0);
      value[ID::chordMilli3]->setFromInt(0);
      value[ID::chordPan0]->setFromNormalized(0.5);
      value[ID::chordPan1]->setFromNormalized(0.5);
      value[ID::chordPan2]->setFromNormalized(0.5);
      value[ID::chordPan3]->setFromNormalized(0.5);
      value[ID::nVoice]->setFromInt(5);
      value[ID::smoothness]->setFromNormalized(0.10000000000000003);
      value[ID::pitchBend]->setFromNormalized(0.5);
    } break;

    case presetDenseDetune: {
      value[ID::bypass]->setFromInt(0);
      value[ID::aliasing]->setFromInt(0);
      value[ID::negativeSemi]->setFromInt(0);
      value[ID::masterOctave]->setFromNormalized(0.5);
      value[ID::equalTemperament]->setFromNormalized(0.1864406779661017);
      value[ID::pitchMultiply]->setFromNormalized(0.25);
      value[ID::pitchModulo]->setFromNormalized(0.0);
      value[ID::seed]->setFromInt(0);
      value[ID::randomRetrigger]->setFromInt(0);
      value[ID::randomGainAmount]->setFromNormalized(0.0);
      value[ID::randomFrequencyAmount]->setFromNormalized(0.284000039100647);
      value[ID::chorusMix]->setFromNormalized(0.0);
      value[ID::chorusFrequency]->setFromNormalized(0.5);
      value[ID::chorusDepth]->setFromNormalized(0.0);
      value[ID::chorusDelayTimeRange0]->setFromNormalized(0.0);
      value[ID::chorusDelayTimeRange1]->setFromNormalized(0.0);
      value[ID::chorusDelayTimeRange2]->setFromNormalized(0.0);
      value[ID::chorusMinDelayTime0]->setFromNormalized(0.5);
      value[ID::chorusMinDelayTime1]->setFromNormalized(0.5);
      value[ID::chorusMinDelayTime2]->setFromNormalized(0.5);
      value[ID::chorusPhase]->setFromNormalized(0.0);
      value[ID::chorusOffset]->setFromNormalized(0.0);
      value[ID::chorusFeedback]->setFromNormalized(0.0);
      value[ID::chorusKeyFollow]->setFromInt(1);
      value[ID::gain]->setFromNormalized(0.5);
      value[ID::gainBoost]->setFromNormalized(0.0);
      value[ID::gainA]->setFromNormalized(0.0);
      value[ID::gainD]->setFromNormalized(0.4999999999999999);
      value[ID::gainS]->setFromNormalized(0.4999999999999999);
      value[ID::gainR]->setFromNormalized(0.6720000505447388);
      value[ID::gainEnvelopeCurve]->setFromNormalized(0.0);
      value[ID::lowShelfPitch]->setFromNormalized(0.0);
      value[ID::lowShelfGain]->setFromNormalized(0.5);
      value[ID::highShelfPitch]->setFromNormalized(0.0);
      value[ID::highShelfGain]->setFromNormalized(0.5);
      value[ID::gain0]->setFromNormalized(1.0);
      value[ID::gain1]->setFromNormalized(1.0);
      value[ID::gain2]->setFromNormalized(1.0);
      value[ID::gain3]->setFromNormalized(1.0);
      value[ID::gain4]->setFromNormalized(1.0);
      value[ID::gain5]->setFromNormalized(1.0);
      value[ID::gain6]->setFromNormalized(1.0);
      value[ID::gain7]->setFromNormalized(1.0);
      value[ID::semi0]->setFromInt(0);
      value[ID::semi1]->setFromInt(5);
      value[ID::semi2]->setFromInt(10);
      value[ID::semi3]->setFromInt(15);
      value[ID::semi4]->setFromInt(7);
      value[ID::semi5]->setFromInt(14);
      value[ID::semi6]->setFromInt(21);
      value[ID::semi7]->setFromInt(0);
      value[ID::milli0]->setFromInt(0);
      value[ID::milli1]->setFromInt(0);
      value[ID::milli2]->setFromInt(0);
      value[ID::milli3]->setFromInt(0);
      value[ID::milli4]->setFromInt(0);
      value[ID::milli5]->setFromInt(0);
      value[ID::milli6]->setFromInt(0);
      value[ID::milli7]->setFromInt(0);
      value[ID::overtone0]->setFromNormalized(1.0);
      value[ID::overtone1]->setFromNormalized(0.6);
      value[ID::overtone2]->setFromNormalized(0.8357142857142857);
      value[ID::overtone3]->setFromNormalized(0.9571428571428571);
      value[ID::overtone4]->setFromNormalized(0.24285714285714288);
      value[ID::overtone5]->setFromNormalized(0.6109243748081782);
      value[ID::overtone6]->setFromNormalized(0.2571428571428571);
      value[ID::overtone7]->setFromNormalized(0.7785714285714286);
      value[ID::overtone8]->setFromNormalized(0.09285714285714286);
      value[ID::overtone9]->setFromNormalized(0.37857142857142856);
      value[ID::overtone10]->setFromNormalized(0.19285714285714284);
      value[ID::overtone11]->setFromNormalized(0.65);
      value[ID::overtone12]->setFromNormalized(0.5571428571428572);
      value[ID::overtone13]->setFromNormalized(0.12857142857142845);
      value[ID::overtone14]->setFromNormalized(0.4642857142857143);
      value[ID::overtone15]->setFromNormalized(0.16428571428571415);
      value[ID::chordGain0]->setFromNormalized(1.0);
      value[ID::chordGain1]->setFromNormalized(1.0);
      value[ID::chordGain2]->setFromNormalized(1.0);
      value[ID::chordGain3]->setFromNormalized(1.0);
      value[ID::chordSemi0]->setFromInt(0);
      value[ID::chordSemi1]->setFromInt(0);
      value[ID::chordSemi2]->setFromInt(0);
      value[ID::chordSemi3]->setFromInt(0);
      value[ID::chordMilli0]->setFromInt(0);
      value[ID::chordMilli1]->setFromInt(0);
      value[ID::chordMilli2]->setFromInt(0);
      value[ID::chordMilli3]->setFromInt(0);
      value[ID::chordPan0]->setFromNormalized(0.0);
      value[ID::chordPan1]->setFromNormalized(0.5);
      value[ID::chordPan2]->setFromNormalized(0.5);
      value[ID::chordPan3]->setFromNormalized(1.0);
      value[ID::nVoice]->setFromInt(5);
      value[ID::smoothness]->setFromNormalized(0.10000000000000003);
      value[ID::pitchBend]->setFromNormalized(0.5);
    } break;

    case presetDim: {
      value[ID::bypass]->setFromInt(0);
      value[ID::aliasing]->setFromInt(0);
      value[ID::negativeSemi]->setFromInt(0);
      value[ID::masterOctave]->setFromNormalized(0.5);
      value[ID::equalTemperament]->setFromNormalized(0.186441);
      value[ID::pitchMultiply]->setFromNormalized(0.25);
      value[ID::pitchModulo]->setFromNormalized(0.0);
      value[ID::seed]->setFromInt(0);
      value[ID::randomRetrigger]->setFromInt(0);
      value[ID::randomGainAmount]->setFromNormalized(0.0);
      value[ID::randomFrequencyAmount]->setFromNormalized(0.0);
      value[ID::chorusMix]->setFromNormalized(0.0);
      value[ID::chorusFrequency]->setFromNormalized(0.5);
      value[ID::chorusDepth]->setFromNormalized(0.0);
      value[ID::chorusDelayTimeRange0]->setFromNormalized(0.0);
      value[ID::chorusDelayTimeRange1]->setFromNormalized(0.0);
      value[ID::chorusDelayTimeRange2]->setFromNormalized(0.0);
      value[ID::chorusMinDelayTime0]->setFromNormalized(0.5);
      value[ID::chorusMinDelayTime1]->setFromNormalized(0.5);
      value[ID::chorusMinDelayTime2]->setFromNormalized(0.5);
      value[ID::chorusPhase]->setFromNormalized(0.0);
      value[ID::chorusOffset]->setFromNormalized(0.0);
      value[ID::chorusFeedback]->setFromNormalized(0.0);
      value[ID::chorusKeyFollow]->setFromInt(1);
      value[ID::gain]->setFromNormalized(0.5);
      value[ID::gainBoost]->setFromNormalized(0.176);
      value[ID::gainA]->setFromNormalized(0.0);
      value[ID::gainD]->setFromNormalized(0.22);
      value[ID::gainS]->setFromNormalized(0.0);
      value[ID::gainR]->setFromNormalized(0.604144);
      value[ID::gainEnvelopeCurve]->setFromNormalized(0.0);
      value[ID::lowShelfPitch]->setFromNormalized(0.0);
      value[ID::lowShelfGain]->setFromNormalized(0.5);
      value[ID::highShelfPitch]->setFromNormalized(0.372);
      value[ID::highShelfGain]->setFromNormalized(0.354);
      value[ID::gain0]->setFromNormalized(1.0);
      value[ID::gain1]->setFromNormalized(0.656);
      value[ID::gain2]->setFromNormalized(1.0);
      value[ID::gain3]->setFromNormalized(1.0);
      value[ID::gain4]->setFromNormalized(0.872);
      value[ID::gain5]->setFromNormalized(1.0);
      value[ID::gain6]->setFromNormalized(1.0);
      value[ID::gain7]->setFromNormalized(1.0);
      value[ID::semi0]->setFromInt(0);
      value[ID::semi1]->setFromInt(0);
      value[ID::semi2]->setFromInt(4);
      value[ID::semi3]->setFromInt(5);
      value[ID::semi4]->setFromInt(12);
      value[ID::semi5]->setFromInt(7);
      value[ID::semi6]->setFromInt(0);
      value[ID::semi7]->setFromInt(0);
      value[ID::milli0]->setFromInt(0);
      value[ID::milli1]->setFromInt(32);
      value[ID::milli2]->setFromInt(0);
      value[ID::milli3]->setFromInt(0);
      value[ID::milli4]->setFromInt(0);
      value[ID::milli5]->setFromInt(0);
      value[ID::milli6]->setFromInt(0);
      value[ID::milli7]->setFromInt(0);
      value[ID::overtone0]->setFromNormalized(0.971429);
      value[ID::overtone1]->setFromNormalized(0.121432);
      value[ID::overtone2]->setFromNormalized(0.921429);
      value[ID::overtone3]->setFromNormalized(0.164282);
      value[ID::overtone4]->setFromNormalized(0.178567);
      value[ID::overtone5]->setFromNormalized(0.207144);
      value[ID::overtone6]->setFromNormalized(0.257141);
      value[ID::overtone7]->setFromNormalized(0.292854);
      value[ID::overtone8]->setFromNormalized(0.6);
      value[ID::overtone9]->setFromNormalized(0.885714);
      value[ID::overtone10]->setFromNormalized(0.328571);
      value[ID::overtone11]->setFromNormalized(0.142857);
      value[ID::overtone12]->setFromNormalized(0.135712);
      value[ID::overtone13]->setFromNormalized(0.271431);
      value[ID::overtone14]->setFromNormalized(0.442856);
      value[ID::overtone15]->setFromNormalized(0.971429);
      value[ID::chordGain0]->setFromNormalized(1.0);
      value[ID::chordGain1]->setFromNormalized(0.834);
      value[ID::chordGain2]->setFromNormalized(1.0);
      value[ID::chordGain3]->setFromNormalized(1.0);
      value[ID::chordSemi0]->setFromInt(0);
      value[ID::chordSemi1]->setFromInt(22);
      value[ID::chordSemi2]->setFromInt(7);
      value[ID::chordSemi3]->setFromInt(7);
      value[ID::chordMilli0]->setFromInt(0);
      value[ID::chordMilli1]->setFromInt(600);
      value[ID::chordMilli2]->setFromInt(56);
      value[ID::chordMilli3]->setFromInt(190);
      value[ID::chordPan0]->setFromNormalized(0.5);
      value[ID::chordPan1]->setFromNormalized(0.5);
      value[ID::chordPan2]->setFromNormalized(0.0);
      value[ID::chordPan3]->setFromNormalized(1.0);
      value[ID::nVoice]->setFromInt(5);
      value[ID::smoothness]->setFromNormalized(0.1);
      value[ID::pitchBend]->setFromNormalized(0.5);
    } break;

    case presetET12ToneCluster: {
      value[ID::bypass]->setFromInt(0);
      value[ID::aliasing]->setFromInt(0);
      value[ID::negativeSemi]->setFromInt(0);
      value[ID::masterOctave]->setFromNormalized(0.5);
      value[ID::equalTemperament]->setFromNormalized(0.188);
      value[ID::pitchMultiply]->setFromNormalized(0.25);
      value[ID::pitchModulo]->setFromNormalized(0.0);
      value[ID::seed]->setFromInt(0);
      value[ID::randomRetrigger]->setFromInt(0);
      value[ID::randomGainAmount]->setFromNormalized(0.0);
      value[ID::randomFrequencyAmount]->setFromNormalized(0.0);
      value[ID::chorusMix]->setFromNormalized(0.0);
      value[ID::chorusFrequency]->setFromNormalized(0.5);
      value[ID::chorusDepth]->setFromNormalized(0.0);
      value[ID::chorusDelayTimeRange0]->setFromNormalized(0.0);
      value[ID::chorusDelayTimeRange1]->setFromNormalized(0.0);
      value[ID::chorusDelayTimeRange2]->setFromNormalized(0.0);
      value[ID::chorusMinDelayTime0]->setFromNormalized(0.5);
      value[ID::chorusMinDelayTime1]->setFromNormalized(0.5);
      value[ID::chorusMinDelayTime2]->setFromNormalized(0.5);
      value[ID::chorusPhase]->setFromNormalized(0.0);
      value[ID::chorusOffset]->setFromNormalized(0.0);
      value[ID::chorusFeedback]->setFromNormalized(0.0);
      value[ID::chorusKeyFollow]->setFromInt(1);
      value[ID::gain]->setFromNormalized(0.5);
      value[ID::gainBoost]->setFromNormalized(0.0);
      value[ID::gainA]->setFromNormalized(0.0);
      value[ID::gainD]->setFromNormalized(0.5);
      value[ID::gainS]->setFromNormalized(0.5);
      value[ID::gainR]->setFromNormalized(0.000144);
      value[ID::gainEnvelopeCurve]->setFromNormalized(0.0);
      value[ID::lowShelfPitch]->setFromNormalized(0.0);
      value[ID::lowShelfGain]->setFromNormalized(0.5);
      value[ID::highShelfPitch]->setFromNormalized(0.0);
      value[ID::highShelfGain]->setFromNormalized(0.5);
      value[ID::gain0]->setFromNormalized(1.0);
      value[ID::gain1]->setFromNormalized(1.0);
      value[ID::gain2]->setFromNormalized(1.0);
      value[ID::gain3]->setFromNormalized(1.0);
      value[ID::gain4]->setFromNormalized(1.0);
      value[ID::gain5]->setFromNormalized(1.0);
      value[ID::gain6]->setFromNormalized(1.0);
      value[ID::gain7]->setFromNormalized(1.0);
      value[ID::semi0]->setFromInt(0);
      value[ID::semi1]->setFromInt(1);
      value[ID::semi2]->setFromInt(2);
      value[ID::semi3]->setFromInt(3);
      value[ID::semi4]->setFromInt(4);
      value[ID::semi5]->setFromInt(5);
      value[ID::semi6]->setFromInt(6);
      value[ID::semi7]->setFromInt(7);
      value[ID::milli0]->setFromInt(0);
      value[ID::milli1]->setFromInt(0);
      value[ID::milli2]->setFromInt(0);
      value[ID::milli3]->setFromInt(0);
      value[ID::milli4]->setFromInt(0);
      value[ID::milli5]->setFromInt(0);
      value[ID::milli6]->setFromInt(0);
      value[ID::milli7]->setFromInt(0);
      value[ID::overtone0]->setFromNormalized(1.0);
      value[ID::overtone1]->setFromNormalized(1.0);
      value[ID::overtone2]->setFromNormalized(1.0);
      value[ID::overtone3]->setFromNormalized(1.0);
      value[ID::overtone4]->setFromNormalized(1.0);
      value[ID::overtone5]->setFromNormalized(1.0);
      value[ID::overtone6]->setFromNormalized(1.0);
      value[ID::overtone7]->setFromNormalized(1.0);
      value[ID::overtone8]->setFromNormalized(1.0);
      value[ID::overtone9]->setFromNormalized(1.0);
      value[ID::overtone10]->setFromNormalized(1.0);
      value[ID::overtone11]->setFromNormalized(1.0);
      value[ID::overtone12]->setFromNormalized(1.0);
      value[ID::overtone13]->setFromNormalized(1.0);
      value[ID::overtone14]->setFromNormalized(1.0);
      value[ID::overtone15]->setFromNormalized(1.0);
      value[ID::chordGain0]->setFromNormalized(1.0);
      value[ID::chordGain1]->setFromNormalized(1.0);
      value[ID::chordGain2]->setFromNormalized(1.0);
      value[ID::chordGain3]->setFromNormalized(1.0);
      value[ID::chordSemi0]->setFromInt(0);
      value[ID::chordSemi1]->setFromInt(8);
      value[ID::chordSemi2]->setFromInt(16);
      value[ID::chordSemi3]->setFromInt(24);
      value[ID::chordMilli0]->setFromInt(0);
      value[ID::chordMilli1]->setFromInt(0);
      value[ID::chordMilli2]->setFromInt(0);
      value[ID::chordMilli3]->setFromInt(0);
      value[ID::chordPan0]->setFromNormalized(0.5);
      value[ID::chordPan1]->setFromNormalized(0.5);
      value[ID::chordPan2]->setFromNormalized(0.5);
      value[ID::chordPan3]->setFromNormalized(0.5);
      value[ID::nVoice]->setFromInt(5);
      value[ID::smoothness]->setFromNormalized(0.1);
      value[ID::pitchBend]->setFromNormalized(0.5);
    } break;

    case presetET13Bright: {
      value[ID::bypass]->setFromInt(0);
      value[ID::aliasing]->setFromInt(0);
      value[ID::negativeSemi]->setFromInt(0);
      value[ID::masterOctave]->setFromNormalized(0.5);
      value[ID::equalTemperament]->setFromNormalized(0.2004406750202179);
      value[ID::pitchMultiply]->setFromNormalized(0.25);
      value[ID::pitchModulo]->setFromNormalized(0.0);
      value[ID::seed]->setFromInt(0);
      value[ID::randomRetrigger]->setFromInt(0);
      value[ID::randomGainAmount]->setFromNormalized(0.0);
      value[ID::randomFrequencyAmount]->setFromNormalized(0.2720000147819519);
      value[ID::chorusMix]->setFromNormalized(0.0);
      value[ID::chorusFrequency]->setFromNormalized(0.5);
      value[ID::chorusDepth]->setFromNormalized(0.0);
      value[ID::chorusDelayTimeRange0]->setFromNormalized(0.0);
      value[ID::chorusDelayTimeRange1]->setFromNormalized(0.0);
      value[ID::chorusDelayTimeRange2]->setFromNormalized(0.0);
      value[ID::chorusMinDelayTime0]->setFromNormalized(0.5);
      value[ID::chorusMinDelayTime1]->setFromNormalized(0.5);
      value[ID::chorusMinDelayTime2]->setFromNormalized(0.5);
      value[ID::chorusPhase]->setFromNormalized(0.0);
      value[ID::chorusOffset]->setFromNormalized(0.0);
      value[ID::chorusFeedback]->setFromNormalized(0.0);
      value[ID::chorusKeyFollow]->setFromInt(1);
      value[ID::gain]->setFromNormalized(0.5);
      value[ID::gainBoost]->setFromNormalized(0.0);
      value[ID::gainA]->setFromNormalized(0.0);
      value[ID::gainD]->setFromNormalized(0.49999999999999994);
      value[ID::gainS]->setFromNormalized(0.49999999999999994);
      value[ID::gainR]->setFromNormalized(0.5920000076293945);
      value[ID::gainEnvelopeCurve]->setFromNormalized(0.0);
      value[ID::lowShelfPitch]->setFromNormalized(0.0);
      value[ID::lowShelfGain]->setFromNormalized(0.5);
      value[ID::highShelfPitch]->setFromNormalized(0.0);
      value[ID::highShelfGain]->setFromNormalized(0.5);
      value[ID::gain0]->setFromNormalized(1.0);
      value[ID::gain1]->setFromNormalized(1.0);
      value[ID::gain2]->setFromNormalized(1.0);
      value[ID::gain3]->setFromNormalized(1.0);
      value[ID::gain4]->setFromNormalized(1.0);
      value[ID::gain5]->setFromNormalized(1.0);
      value[ID::gain6]->setFromNormalized(1.0);
      value[ID::gain7]->setFromNormalized(1.0);
      value[ID::semi0]->setFromInt(0);
      value[ID::semi1]->setFromInt(5);
      value[ID::semi2]->setFromInt(9);
      value[ID::semi3]->setFromInt(12);
      value[ID::semi4]->setFromInt(4);
      value[ID::semi5]->setFromInt(4);
      value[ID::semi6]->setFromInt(0);
      value[ID::semi7]->setFromInt(0);
      value[ID::milli0]->setFromInt(0);
      value[ID::milli1]->setFromInt(0);
      value[ID::milli2]->setFromInt(0);
      value[ID::milli3]->setFromInt(0);
      value[ID::milli4]->setFromInt(0);
      value[ID::milli5]->setFromInt(500);
      value[ID::milli6]->setFromInt(0);
      value[ID::milli7]->setFromInt(0);
      value[ID::overtone0]->setFromNormalized(1.0);
      value[ID::overtone1]->setFromNormalized(0.9142857142857143);
      value[ID::overtone2]->setFromNormalized(0.9071428571428571);
      value[ID::overtone3]->setFromNormalized(0.8642857142857142);
      value[ID::overtone4]->setFromNormalized(0.8357142857142857);
      value[ID::overtone5]->setFromNormalized(0.8);
      value[ID::overtone6]->setFromNormalized(0.7714285714285715);
      value[ID::overtone7]->setFromNormalized(0.7642857142857142);
      value[ID::overtone8]->setFromNormalized(0.7428571428571429);
      value[ID::overtone9]->setFromNormalized(0.7071428571428571);
      value[ID::overtone10]->setFromNormalized(0.6857142857142857);
      value[ID::overtone11]->setFromNormalized(0.6642857142857144);
      value[ID::overtone12]->setFromNormalized(0.6571428571428571);
      value[ID::overtone13]->setFromNormalized(0.6142857142857143);
      value[ID::overtone14]->setFromNormalized(0.5857142857142856);
      value[ID::overtone15]->setFromNormalized(0.5642857142857143);
      value[ID::chordGain0]->setFromNormalized(1.0);
      value[ID::chordGain1]->setFromNormalized(1.0);
      value[ID::chordGain2]->setFromNormalized(1.0);
      value[ID::chordGain3]->setFromNormalized(1.0);
      value[ID::chordSemi0]->setFromInt(0);
      value[ID::chordSemi1]->setFromInt(7);
      value[ID::chordSemi2]->setFromInt(12);
      value[ID::chordSemi3]->setFromInt(16);
      value[ID::chordMilli0]->setFromInt(0);
      value[ID::chordMilli1]->setFromInt(0);
      value[ID::chordMilli2]->setFromInt(0);
      value[ID::chordMilli3]->setFromInt(0);
      value[ID::chordPan0]->setFromNormalized(0.5);
      value[ID::chordPan1]->setFromNormalized(0.0);
      value[ID::chordPan2]->setFromNormalized(0.5);
      value[ID::chordPan3]->setFromNormalized(1.0);
      value[ID::nVoice]->setFromInt(5);
      value[ID::smoothness]->setFromNormalized(0.10000000000000002);
      value[ID::pitchBend]->setFromNormalized(0.5);
    } break;

    case presetET15: {
      value[ID::bypass]->setFromInt(0);
      value[ID::aliasing]->setFromInt(0);
      value[ID::negativeSemi]->setFromInt(0);
      value[ID::masterOctave]->setFromNormalized(0.43);
      value[ID::equalTemperament]->setFromNormalized(0.236441);
      value[ID::pitchMultiply]->setFromNormalized(0.25);
      value[ID::pitchModulo]->setFromNormalized(0.0);
      value[ID::seed]->setFromInt(0);
      value[ID::randomRetrigger]->setFromInt(0);
      value[ID::randomGainAmount]->setFromNormalized(0.0);
      value[ID::randomFrequencyAmount]->setFromNormalized(0.124);
      value[ID::chorusMix]->setFromNormalized(0.0);
      value[ID::chorusFrequency]->setFromNormalized(0.5);
      value[ID::chorusDepth]->setFromNormalized(0.0);
      value[ID::chorusDelayTimeRange0]->setFromNormalized(0.0);
      value[ID::chorusDelayTimeRange1]->setFromNormalized(0.0);
      value[ID::chorusDelayTimeRange2]->setFromNormalized(0.0);
      value[ID::chorusMinDelayTime0]->setFromNormalized(0.5);
      value[ID::chorusMinDelayTime1]->setFromNormalized(0.5);
      value[ID::chorusMinDelayTime2]->setFromNormalized(0.5);
      value[ID::chorusPhase]->setFromNormalized(0.0);
      value[ID::chorusOffset]->setFromNormalized(0.0);
      value[ID::chorusFeedback]->setFromNormalized(0.0);
      value[ID::chorusKeyFollow]->setFromInt(1);
      value[ID::gain]->setFromNormalized(0.5);
      value[ID::gainBoost]->setFromNormalized(0.0);
      value[ID::gainA]->setFromNormalized(0.0);
      value[ID::gainD]->setFromNormalized(0.752);
      value[ID::gainS]->setFromNormalized(0.216);
      value[ID::gainR]->setFromNormalized(0.704);
      value[ID::gainEnvelopeCurve]->setFromNormalized(0.0);
      value[ID::lowShelfPitch]->setFromNormalized(0.0);
      value[ID::lowShelfGain]->setFromNormalized(0.5);
      value[ID::highShelfPitch]->setFromNormalized(0.0);
      value[ID::highShelfGain]->setFromNormalized(0.5);
      value[ID::gain0]->setFromNormalized(1.0);
      value[ID::gain1]->setFromNormalized(0.83);
      value[ID::gain2]->setFromNormalized(0.84);
      value[ID::gain3]->setFromNormalized(1.0);
      value[ID::gain4]->setFromNormalized(1.0);
      value[ID::gain5]->setFromNormalized(1.0);
      value[ID::gain6]->setFromNormalized(0.436);
      value[ID::gain7]->setFromNormalized(0.318);
      value[ID::semi0]->setFromInt(0);
      value[ID::semi1]->setFromInt(6);
      value[ID::semi2]->setFromInt(5);
      value[ID::semi3]->setFromInt(22);
      value[ID::semi4]->setFromInt(9);
      value[ID::semi5]->setFromInt(9);
      value[ID::semi6]->setFromInt(47);
      value[ID::semi7]->setFromInt(74);
      value[ID::milli0]->setFromInt(0);
      value[ID::milli1]->setFromInt(0);
      value[ID::milli2]->setFromInt(0);
      value[ID::milli3]->setFromInt(0);
      value[ID::milli4]->setFromInt(0);
      value[ID::milli5]->setFromInt(10);
      value[ID::milli6]->setFromInt(0);
      value[ID::milli7]->setFromInt(0);
      value[ID::overtone0]->setFromNormalized(1.0);
      value[ID::overtone1]->setFromNormalized(0.3);
      value[ID::overtone2]->setFromNormalized(0.014286);
      value[ID::overtone3]->setFromNormalized(0.178571);
      value[ID::overtone4]->setFromNormalized(1.0);
      value[ID::overtone5]->setFromNormalized(0.185714);
      value[ID::overtone6]->setFromNormalized(0.285714);
      value[ID::overtone7]->setFromNormalized(0.285714);
      value[ID::overtone8]->setFromNormalized(0.128571);
      value[ID::overtone9]->setFromNormalized(1.0);
      value[ID::overtone10]->setFromNormalized(0.185714);
      value[ID::overtone11]->setFromNormalized(0.214286);
      value[ID::overtone12]->setFromNormalized(0.25);
      value[ID::overtone13]->setFromNormalized(0.192857);
      value[ID::overtone14]->setFromNormalized(0.864286);
      value[ID::overtone15]->setFromNormalized(0.135714);
      value[ID::chordGain0]->setFromNormalized(1.0);
      value[ID::chordGain1]->setFromNormalized(1.0);
      value[ID::chordGain2]->setFromNormalized(1.0);
      value[ID::chordGain3]->setFromNormalized(0.844);
      value[ID::chordSemi0]->setFromInt(0);
      value[ID::chordSemi1]->setFromInt(0);
      value[ID::chordSemi2]->setFromInt(6);
      value[ID::chordSemi3]->setFromInt(15);
      value[ID::chordMilli0]->setFromInt(0);
      value[ID::chordMilli1]->setFromInt(8);
      value[ID::chordMilli2]->setFromInt(4);
      value[ID::chordMilli3]->setFromInt(0);
      value[ID::chordPan0]->setFromNormalized(0.312);
      value[ID::chordPan1]->setFromNormalized(0.52);
      value[ID::chordPan2]->setFromNormalized(1.0);
      value[ID::chordPan3]->setFromNormalized(0.0);
      value[ID::nVoice]->setFromInt(5);
      value[ID::smoothness]->setFromNormalized(0.1);
      value[ID::pitchBend]->setFromNormalized(0.5);
    } break;

    case presetET19: {
      value[ID::bypass]->setFromInt(0);
      value[ID::aliasing]->setFromInt(0);
      value[ID::negativeSemi]->setFromInt(0);
      value[ID::masterOctave]->setFromNormalized(0.5);
      value[ID::equalTemperament]->setFromNormalized(0.304441);
      value[ID::pitchMultiply]->setFromNormalized(0.25);
      value[ID::pitchModulo]->setFromNormalized(0.0);
      value[ID::seed]->setFromInt(0);
      value[ID::randomRetrigger]->setFromInt(0);
      value[ID::randomGainAmount]->setFromNormalized(0.0);
      value[ID::randomFrequencyAmount]->setFromNormalized(0.0);
      value[ID::chorusMix]->setFromNormalized(0.308);
      value[ID::chorusFrequency]->setFromNormalized(0.596);
      value[ID::chorusDepth]->setFromNormalized(1.0);
      value[ID::chorusDelayTimeRange0]->setFromNormalized(0.0);
      value[ID::chorusDelayTimeRange1]->setFromNormalized(0.0);
      value[ID::chorusDelayTimeRange2]->setFromNormalized(0.0);
      value[ID::chorusMinDelayTime0]->setFromNormalized(0.5);
      value[ID::chorusMinDelayTime1]->setFromNormalized(0.364);
      value[ID::chorusMinDelayTime2]->setFromNormalized(0.096);
      value[ID::chorusPhase]->setFromNormalized(0.0);
      value[ID::chorusOffset]->setFromNormalized(1.0);
      value[ID::chorusFeedback]->setFromNormalized(0.232);
      value[ID::chorusKeyFollow]->setFromInt(1);
      value[ID::gain]->setFromNormalized(0.5);
      value[ID::gainBoost]->setFromNormalized(0.184);
      value[ID::gainA]->setFromNormalized(0.0);
      value[ID::gainD]->setFromNormalized(0.176);
      value[ID::gainS]->setFromNormalized(0.808);
      value[ID::gainR]->setFromNormalized(0.176);
      value[ID::gainEnvelopeCurve]->setFromNormalized(0.0);
      value[ID::lowShelfPitch]->setFromNormalized(0.0);
      value[ID::lowShelfGain]->setFromNormalized(0.5);
      value[ID::highShelfPitch]->setFromNormalized(0.0);
      value[ID::highShelfGain]->setFromNormalized(0.5);
      value[ID::gain0]->setFromNormalized(1.0);
      value[ID::gain1]->setFromNormalized(1.0);
      value[ID::gain2]->setFromNormalized(0.718);
      value[ID::gain3]->setFromNormalized(0.676);
      value[ID::gain4]->setFromNormalized(0.588);
      value[ID::gain5]->setFromNormalized(1.0);
      value[ID::gain6]->setFromNormalized(0.386);
      value[ID::gain7]->setFromNormalized(1.0);
      value[ID::semi0]->setFromInt(0);
      value[ID::semi1]->setFromInt(5);
      value[ID::semi2]->setFromInt(27);
      value[ID::semi3]->setFromInt(13);
      value[ID::semi4]->setFromInt(24);
      value[ID::semi5]->setFromInt(38);
      value[ID::semi6]->setFromInt(57);
      value[ID::semi7]->setFromInt(39);
      value[ID::milli0]->setFromInt(0);
      value[ID::milli1]->setFromInt(0);
      value[ID::milli2]->setFromInt(0);
      value[ID::milli3]->setFromInt(306);
      value[ID::milli4]->setFromInt(0);
      value[ID::milli5]->setFromInt(0);
      value[ID::milli6]->setFromInt(0);
      value[ID::milli7]->setFromInt(0);
      value[ID::overtone0]->setFromNormalized(1.0);
      value[ID::overtone1]->setFromNormalized(0.471429);
      value[ID::overtone2]->setFromNormalized(0.821429);
      value[ID::overtone3]->setFromNormalized(0.771429);
      value[ID::overtone4]->setFromNormalized(1.0);
      value[ID::overtone5]->setFromNormalized(0.592857);
      value[ID::overtone6]->setFromNormalized(0.507143);
      value[ID::overtone7]->setFromNormalized(0.464286);
      value[ID::overtone8]->setFromNormalized(0.45);
      value[ID::overtone9]->setFromNormalized(0.442857);
      value[ID::overtone10]->setFromNormalized(0.421429);
      value[ID::overtone11]->setFromNormalized(0.414286);
      value[ID::overtone12]->setFromNormalized(0.385714);
      value[ID::overtone13]->setFromNormalized(0.371429);
      value[ID::overtone14]->setFromNormalized(0.357143);
      value[ID::overtone15]->setFromNormalized(0.335714);
      value[ID::chordGain0]->setFromNormalized(1.0);
      value[ID::chordGain1]->setFromNormalized(0.754);
      value[ID::chordGain2]->setFromNormalized(1.0);
      value[ID::chordGain3]->setFromNormalized(1.0);
      value[ID::chordSemi0]->setFromInt(0);
      value[ID::chordSemi1]->setFromInt(24);
      value[ID::chordSemi2]->setFromInt(3);
      value[ID::chordSemi3]->setFromInt(3);
      value[ID::chordMilli0]->setFromInt(0);
      value[ID::chordMilli1]->setFromInt(56);
      value[ID::chordMilli2]->setFromInt(0);
      value[ID::chordMilli3]->setFromInt(0);
      value[ID::chordPan0]->setFromNormalized(0.5);
      value[ID::chordPan1]->setFromNormalized(0.5);
      value[ID::chordPan2]->setFromNormalized(1.0);
      value[ID::chordPan3]->setFromNormalized(0.0);
      value[ID::nVoice]->setFromInt(5);
      value[ID::smoothness]->setFromNormalized(0.1);
      value[ID::pitchBend]->setFromNormalized(0.5);
    } break;

    case presetET7Cluster: {
      value[ID::bypass]->setFromInt(0);
      value[ID::aliasing]->setFromInt(0);
      value[ID::negativeSemi]->setFromInt(0);
      value[ID::masterOctave]->setFromNormalized(0.5);
      value[ID::equalTemperament]->setFromNormalized(0.098441);
      value[ID::pitchMultiply]->setFromNormalized(0.25);
      value[ID::pitchModulo]->setFromNormalized(0.0);
      value[ID::seed]->setFromInt(0);
      value[ID::randomRetrigger]->setFromInt(0);
      value[ID::randomGainAmount]->setFromNormalized(0.0);
      value[ID::randomFrequencyAmount]->setFromNormalized(0.0);
      value[ID::chorusMix]->setFromNormalized(0.744);
      value[ID::chorusFrequency]->setFromNormalized(0.508052);
      value[ID::chorusDepth]->setFromNormalized(0.128);
      value[ID::chorusDelayTimeRange0]->setFromNormalized(0.236);
      value[ID::chorusDelayTimeRange1]->setFromNormalized(0.692);
      value[ID::chorusDelayTimeRange2]->setFromNormalized(0.352);
      value[ID::chorusMinDelayTime0]->setFromNormalized(0.5);
      value[ID::chorusMinDelayTime1]->setFromNormalized(0.5);
      value[ID::chorusMinDelayTime2]->setFromNormalized(0.5);
      value[ID::chorusPhase]->setFromNormalized(0.0);
      value[ID::chorusOffset]->setFromNormalized(1.0);
      value[ID::chorusFeedback]->setFromNormalized(0.0);
      value[ID::chorusKeyFollow]->setFromInt(1);
      value[ID::gain]->setFromNormalized(0.5);
      value[ID::gainBoost]->setFromNormalized(0.0);
      value[ID::gainA]->setFromNormalized(0.216);
      value[ID::gainD]->setFromNormalized(0.5);
      value[ID::gainS]->setFromNormalized(1.0);
      value[ID::gainR]->setFromNormalized(0.34);
      value[ID::gainEnvelopeCurve]->setFromNormalized(0.0);
      value[ID::lowShelfPitch]->setFromNormalized(0.0);
      value[ID::lowShelfGain]->setFromNormalized(0.5);
      value[ID::highShelfPitch]->setFromNormalized(0.0);
      value[ID::highShelfGain]->setFromNormalized(0.5);
      value[ID::gain0]->setFromNormalized(1.0);
      value[ID::gain1]->setFromNormalized(1.0);
      value[ID::gain2]->setFromNormalized(0.63);
      value[ID::gain3]->setFromNormalized(0.808);
      value[ID::gain4]->setFromNormalized(0.852);
      value[ID::gain5]->setFromNormalized(0.776);
      value[ID::gain6]->setFromNormalized(0.824);
      value[ID::gain7]->setFromNormalized(0.932);
      value[ID::semi0]->setFromInt(0);
      value[ID::semi1]->setFromInt(2);
      value[ID::semi2]->setFromInt(6);
      value[ID::semi3]->setFromInt(8);
      value[ID::semi4]->setFromInt(10);
      value[ID::semi5]->setFromInt(7);
      value[ID::semi6]->setFromInt(14);
      value[ID::semi7]->setFromInt(0);
      value[ID::milli0]->setFromInt(0);
      value[ID::milli1]->setFromInt(0);
      value[ID::milli2]->setFromInt(0);
      value[ID::milli3]->setFromInt(0);
      value[ID::milli4]->setFromInt(0);
      value[ID::milli5]->setFromInt(512);
      value[ID::milli6]->setFromInt(0);
      value[ID::milli7]->setFromInt(254);
      value[ID::overtone0]->setFromNormalized(1.0);
      value[ID::overtone1]->setFromNormalized(0.849485);
      value[ID::overtone2]->setFromNormalized(0.761439);
      value[ID::overtone3]->setFromNormalized(0.69897);
      value[ID::overtone4]->setFromNormalized(0.650515);
      value[ID::overtone5]->setFromNormalized(0.610925);
      value[ID::overtone6]->setFromNormalized(0.577451);
      value[ID::overtone7]->setFromNormalized(0.548455);
      value[ID::overtone8]->setFromNormalized(0.522879);
      value[ID::overtone9]->setFromNormalized(0.5);
      value[ID::overtone10]->setFromNormalized(0.479303);
      value[ID::overtone11]->setFromNormalized(0.460409);
      value[ID::overtone12]->setFromNormalized(0.443028);
      value[ID::overtone13]->setFromNormalized(0.426937);
      value[ID::overtone14]->setFromNormalized(0.411955);
      value[ID::overtone15]->setFromNormalized(0.39794);
      value[ID::chordGain0]->setFromNormalized(1.0);
      value[ID::chordGain1]->setFromNormalized(1.0);
      value[ID::chordGain2]->setFromNormalized(1.0);
      value[ID::chordGain3]->setFromNormalized(1.0);
      value[ID::chordSemi0]->setFromInt(0);
      value[ID::chordSemi1]->setFromInt(3);
      value[ID::chordSemi2]->setFromInt(4);
      value[ID::chordSemi3]->setFromInt(10);
      value[ID::chordMilli0]->setFromInt(0);
      value[ID::chordMilli1]->setFromInt(0);
      value[ID::chordMilli2]->setFromInt(0);
      value[ID::chordMilli3]->setFromInt(0);
      value[ID::chordPan0]->setFromNormalized(0.5);
      value[ID::chordPan1]->setFromNormalized(0.416);
      value[ID::chordPan2]->setFromNormalized(0.632);
      value[ID::chordPan3]->setFromNormalized(0.5);
      value[ID::nVoice]->setFromInt(5);
      value[ID::smoothness]->setFromNormalized(0.1);
      value[ID::pitchBend]->setFromNormalized(0.5);
    } break;

    case presetEasy4th: {
      value[ID::bypass]->setFromInt(0);
      value[ID::aliasing]->setFromInt(0);
      value[ID::negativeSemi]->setFromInt(0);
      value[ID::masterOctave]->setFromNormalized(0.5);
      value[ID::equalTemperament]->setFromNormalized(0.1864406779661017);
      value[ID::pitchMultiply]->setFromNormalized(0.25);
      value[ID::pitchModulo]->setFromNormalized(0.0);
      value[ID::seed]->setFromInt(0);
      value[ID::randomRetrigger]->setFromInt(0);
      value[ID::randomGainAmount]->setFromNormalized(0.42799997329711914);
      value[ID::randomFrequencyAmount]->setFromNormalized(0.10400009900331499);
      value[ID::chorusMix]->setFromNormalized(0.0);
      value[ID::chorusFrequency]->setFromNormalized(0.5);
      value[ID::chorusDepth]->setFromNormalized(0.0);
      value[ID::chorusDelayTimeRange0]->setFromNormalized(0.0);
      value[ID::chorusDelayTimeRange1]->setFromNormalized(0.0);
      value[ID::chorusDelayTimeRange2]->setFromNormalized(0.0);
      value[ID::chorusMinDelayTime0]->setFromNormalized(0.5);
      value[ID::chorusMinDelayTime1]->setFromNormalized(0.5);
      value[ID::chorusMinDelayTime2]->setFromNormalized(0.5);
      value[ID::chorusPhase]->setFromNormalized(0.0);
      value[ID::chorusOffset]->setFromNormalized(0.0);
      value[ID::chorusFeedback]->setFromNormalized(0.0);
      value[ID::chorusKeyFollow]->setFromInt(1);
      value[ID::gain]->setFromNormalized(0.5);
      value[ID::gainBoost]->setFromNormalized(0.0);
      value[ID::gainA]->setFromNormalized(0.0);
      value[ID::gainD]->setFromNormalized(0.4999999999999999);
      value[ID::gainS]->setFromNormalized(0.4999999999999999);
      value[ID::gainR]->setFromNormalized(0.0);
      value[ID::gainEnvelopeCurve]->setFromNormalized(0.0);
      value[ID::lowShelfPitch]->setFromNormalized(0.0);
      value[ID::lowShelfGain]->setFromNormalized(0.5);
      value[ID::highShelfPitch]->setFromNormalized(0.0);
      value[ID::highShelfGain]->setFromNormalized(0.5);
      value[ID::gain0]->setFromNormalized(1.0);
      value[ID::gain1]->setFromNormalized(1.0);
      value[ID::gain2]->setFromNormalized(1.0);
      value[ID::gain3]->setFromNormalized(1.0);
      value[ID::gain4]->setFromNormalized(1.0);
      value[ID::gain5]->setFromNormalized(1.0);
      value[ID::gain6]->setFromNormalized(1.0);
      value[ID::gain7]->setFromNormalized(1.0);
      value[ID::semi0]->setFromInt(0);
      value[ID::semi1]->setFromInt(4);
      value[ID::semi2]->setFromInt(4);
      value[ID::semi3]->setFromInt(7);
      value[ID::semi4]->setFromInt(7);
      value[ID::semi5]->setFromInt(4);
      value[ID::semi6]->setFromInt(0);
      value[ID::semi7]->setFromInt(0);
      value[ID::milli0]->setFromInt(0);
      value[ID::milli1]->setFromInt(0);
      value[ID::milli2]->setFromInt(42);
      value[ID::milli3]->setFromInt(410);
      value[ID::milli4]->setFromInt(0);
      value[ID::milli5]->setFromInt(186);
      value[ID::milli6]->setFromInt(460);
      value[ID::milli7]->setFromInt(406);
      value[ID::overtone0]->setFromNormalized(1.0);
      value[ID::overtone1]->setFromNormalized(0.8494850021680094);
      value[ID::overtone2]->setFromNormalized(0.7614393726401688);
      value[ID::overtone3]->setFromNormalized(0.6989700043360189);
      value[ID::overtone4]->setFromNormalized(0.6505149978319906);
      value[ID::overtone5]->setFromNormalized(0.6109243748081782);
      value[ID::overtone6]->setFromNormalized(0.5774509799928716);
      value[ID::overtone7]->setFromNormalized(0.5484550065040282);
      value[ID::overtone8]->setFromNormalized(0.5228787452803376);
      value[ID::overtone9]->setFromNormalized(0.5);
      value[ID::overtone10]->setFromNormalized(0.47930365742088743);
      value[ID::overtone11]->setFromNormalized(0.46040937697618756);
      value[ID::overtone12]->setFromNormalized(0.44302832384658164);
      value[ID::overtone13]->setFromNormalized(0.426935982160881);
      value[ID::overtone14]->setFromNormalized(0.4119543704721593);
      value[ID::overtone15]->setFromNormalized(0.3979400086720375);
      value[ID::chordGain0]->setFromNormalized(1.0);
      value[ID::chordGain1]->setFromNormalized(1.0);
      value[ID::chordGain2]->setFromNormalized(1.0);
      value[ID::chordGain3]->setFromNormalized(1.0);
      value[ID::chordSemi0]->setFromInt(0);
      value[ID::chordSemi1]->setFromInt(12);
      value[ID::chordSemi2]->setFromInt(12);
      value[ID::chordSemi3]->setFromInt(7);
      value[ID::chordMilli0]->setFromInt(0);
      value[ID::chordMilli1]->setFromInt(96);
      value[ID::chordMilli2]->setFromInt(0);
      value[ID::chordMilli3]->setFromInt(120);
      value[ID::chordPan0]->setFromNormalized(0.5);
      value[ID::chordPan1]->setFromNormalized(0.0);
      value[ID::chordPan2]->setFromNormalized(1.0);
      value[ID::chordPan3]->setFromNormalized(0.5);
      value[ID::nVoice]->setFromInt(5);
      value[ID::smoothness]->setFromNormalized(0.10000000000000003);
      value[ID::pitchBend]->setFromNormalized(0.5);
    } break;

    case presetLooseTuning: {
      value[ID::bypass]->setFromInt(0);
      value[ID::aliasing]->setFromInt(0);
      value[ID::negativeSemi]->setFromInt(0);
      value[ID::masterOctave]->setFromNormalized(0.35799989104270935);
      value[ID::equalTemperament]->setFromNormalized(0.18044064939022064);
      value[ID::pitchMultiply]->setFromNormalized(0.17999999225139618);
      value[ID::pitchModulo]->setFromNormalized(0.13600000739097595);
      value[ID::seed]->setFromInt(11710496);
      value[ID::randomRetrigger]->setFromInt(0);
      value[ID::randomGainAmount]->setFromNormalized(0.6920000314712524);
      value[ID::randomFrequencyAmount]->setFromNormalized(0.3600001931190491);
      value[ID::chorusMix]->setFromNormalized(0.31599995493888855);
      value[ID::chorusFrequency]->setFromNormalized(0.47999989986419683);
      value[ID::chorusDepth]->setFromNormalized(0.2919993996620178);
      value[ID::chorusDelayTimeRange0]->setFromNormalized(0.351999968290329);
      value[ID::chorusDelayTimeRange1]->setFromNormalized(0.46399998664855957);
      value[ID::chorusDelayTimeRange2]->setFromNormalized(0.6800000071525574);
      value[ID::chorusMinDelayTime0]->setFromNormalized(0.08000013977289201);
      value[ID::chorusMinDelayTime1]->setFromNormalized(0.260000079870224);
      value[ID::chorusMinDelayTime2]->setFromNormalized(0.2839999794960022);
      value[ID::chorusPhase]->setFromNormalized(0.0);
      value[ID::chorusOffset]->setFromNormalized(0.6680001020431519);
      value[ID::chorusFeedback]->setFromNormalized(0.920000433921814);
      value[ID::chorusKeyFollow]->setFromInt(1);
      value[ID::gain]->setFromNormalized(0.5);
      value[ID::gainBoost]->setFromNormalized(0.4599999785423279);
      value[ID::gainA]->setFromNormalized(0.0);
      value[ID::gainD]->setFromNormalized(0.30400002002716064);
      value[ID::gainS]->setFromNormalized(0.23200005292892453);
      value[ID::gainR]->setFromNormalized(0.708000123500824);
      value[ID::gainEnvelopeCurve]->setFromNormalized(0.0);
      value[ID::lowShelfPitch]->setFromNormalized(0.2860000729560852);
      value[ID::lowShelfGain]->setFromNormalized(0.23199990391731262);
      value[ID::highShelfPitch]->setFromNormalized(0.0);
      value[ID::highShelfGain]->setFromNormalized(0.5);
      value[ID::gain0]->setFromNormalized(1.0);
      value[ID::gain1]->setFromNormalized(0.984000027179718);
      value[ID::gain2]->setFromNormalized(0.9600001573562622);
      value[ID::gain3]->setFromNormalized(0.9440003633499146);
      value[ID::gain4]->setFromNormalized(0.9240005612373352);
      value[ID::gain5]->setFromNormalized(0.9100002646446228);
      value[ID::gain6]->setFromNormalized(0.8900007605552673);
      value[ID::gain7]->setFromNormalized(0.8680005669593811);
      value[ID::semi0]->setFromInt(0);
      value[ID::semi1]->setFromInt(4);
      value[ID::semi2]->setFromInt(7);
      value[ID::semi3]->setFromInt(11);
      value[ID::semi4]->setFromInt(14);
      value[ID::semi5]->setFromInt(18);
      value[ID::semi6]->setFromInt(21);
      value[ID::semi7]->setFromInt(25);
      value[ID::milli0]->setFromInt(0);
      value[ID::milli1]->setFromInt(0);
      value[ID::milli2]->setFromInt(0);
      value[ID::milli3]->setFromInt(0);
      value[ID::milli4]->setFromInt(0);
      value[ID::milli5]->setFromInt(0);
      value[ID::milli6]->setFromInt(0);
      value[ID::milli7]->setFromInt(0);
      value[ID::overtone0]->setFromNormalized(0.6214285714285714);
      value[ID::overtone1]->setFromNormalized(1.0);
      value[ID::overtone2]->setFromNormalized(0.2857142857142856);
      value[ID::overtone3]->setFromNormalized(0.40714285714285714);
      value[ID::overtone4]->setFromNormalized(0.12857142857142845);
      value[ID::overtone5]->setFromNormalized(0.55);
      value[ID::overtone6]->setFromNormalized(0.7928571428571428);
      value[ID::overtone7]->setFromNormalized(0.37857142857142856);
      value[ID::overtone8]->setFromNormalized(0.18571428571428572);
      value[ID::overtone9]->setFromNormalized(0.7142857142857143);
      value[ID::overtone10]->setFromNormalized(0.3214285714285713);
      value[ID::overtone11]->setFromNormalized(0.2071428571428572);
      value[ID::overtone12]->setFromNormalized(0.09285714285714286);
      value[ID::overtone13]->setFromNormalized(0.19999999999999996);
      value[ID::overtone14]->setFromNormalized(0.34285714285714286);
      value[ID::overtone15]->setFromNormalized(0.5785714285714285);
      value[ID::chordGain0]->setFromNormalized(1.0);
      value[ID::chordGain1]->setFromNormalized(0.8119998574256897);
      value[ID::chordGain2]->setFromNormalized(0.6239999532699585);
      value[ID::chordGain3]->setFromNormalized(1.0);
      value[ID::chordSemi0]->setFromInt(0);
      value[ID::chordSemi1]->setFromInt(28);
      value[ID::chordSemi2]->setFromInt(9);
      value[ID::chordSemi3]->setFromInt(0);
      value[ID::chordMilli0]->setFromInt(0);
      value[ID::chordMilli1]->setFromInt(0);
      value[ID::chordMilli2]->setFromInt(0);
      value[ID::chordMilli3]->setFromInt(294);
      value[ID::chordPan0]->setFromNormalized(1.0);
      value[ID::chordPan1]->setFromNormalized(0.5);
      value[ID::chordPan2]->setFromNormalized(0.5);
      value[ID::chordPan3]->setFromNormalized(0.0);
      value[ID::nVoice]->setFromInt(5);
      value[ID::smoothness]->setFromNormalized(0.10000000000000002);
      value[ID::pitchBend]->setFromNormalized(0.5);
    } break;

    case presetMilliDetune: {
      value[ID::bypass]->setFromInt(0);
      value[ID::aliasing]->setFromInt(1);
      value[ID::negativeSemi]->setFromInt(0);
      value[ID::masterOctave]->setFromNormalized(0.284);
      value[ID::equalTemperament]->setFromNormalized(0.01);
      value[ID::pitchMultiply]->setFromNormalized(0.25);
      value[ID::pitchModulo]->setFromNormalized(0.0);
      value[ID::seed]->setFromInt(0);
      value[ID::randomRetrigger]->setFromInt(0);
      value[ID::randomGainAmount]->setFromNormalized(0.0);
      value[ID::randomFrequencyAmount]->setFromNormalized(0.0);
      value[ID::chorusMix]->setFromNormalized(0.0);
      value[ID::chorusFrequency]->setFromNormalized(0.5);
      value[ID::chorusDepth]->setFromNormalized(1.0);
      value[ID::chorusDelayTimeRange0]->setFromNormalized(0.0);
      value[ID::chorusDelayTimeRange1]->setFromNormalized(0.0);
      value[ID::chorusDelayTimeRange2]->setFromNormalized(0.0);
      value[ID::chorusMinDelayTime0]->setFromNormalized(0.5);
      value[ID::chorusMinDelayTime1]->setFromNormalized(0.5);
      value[ID::chorusMinDelayTime2]->setFromNormalized(0.5);
      value[ID::chorusPhase]->setFromNormalized(0.0);
      value[ID::chorusOffset]->setFromNormalized(0.0);
      value[ID::chorusFeedback]->setFromNormalized(0.0);
      value[ID::chorusKeyFollow]->setFromInt(1);
      value[ID::gain]->setFromNormalized(0.5);
      value[ID::gainBoost]->setFromNormalized(0.0);
      value[ID::gainA]->setFromNormalized(0.0);
      value[ID::gainD]->setFromNormalized(0.5);
      value[ID::gainS]->setFromNormalized(1.0);
      value[ID::gainR]->setFromNormalized(0.832);
      value[ID::gainEnvelopeCurve]->setFromNormalized(0.0);
      value[ID::lowShelfPitch]->setFromNormalized(0.0);
      value[ID::lowShelfGain]->setFromNormalized(0.5);
      value[ID::highShelfPitch]->setFromNormalized(0.0);
      value[ID::highShelfGain]->setFromNormalized(0.5);
      value[ID::gain0]->setFromNormalized(1.0);
      value[ID::gain1]->setFromNormalized(1.0);
      value[ID::gain2]->setFromNormalized(1.0);
      value[ID::gain3]->setFromNormalized(1.0);
      value[ID::gain4]->setFromNormalized(1.0);
      value[ID::gain5]->setFromNormalized(1.0);
      value[ID::gain6]->setFromNormalized(1.0);
      value[ID::gain7]->setFromNormalized(1.0);
      value[ID::semi0]->setFromInt(0);
      value[ID::semi1]->setFromInt(0);
      value[ID::semi2]->setFromInt(0);
      value[ID::semi3]->setFromInt(0);
      value[ID::semi4]->setFromInt(0);
      value[ID::semi5]->setFromInt(0);
      value[ID::semi6]->setFromInt(0);
      value[ID::semi7]->setFromInt(0);
      value[ID::milli0]->setFromInt(0);
      value[ID::milli1]->setFromInt(1);
      value[ID::milli2]->setFromInt(2);
      value[ID::milli3]->setFromInt(3);
      value[ID::milli4]->setFromInt(4);
      value[ID::milli5]->setFromInt(5);
      value[ID::milli6]->setFromInt(6);
      value[ID::milli7]->setFromInt(7);
      value[ID::overtone0]->setFromNormalized(1.0);
      value[ID::overtone1]->setFromNormalized(0.4);
      value[ID::overtone2]->setFromNormalized(0.442857);
      value[ID::overtone3]->setFromNormalized(0.5);
      value[ID::overtone4]->setFromNormalized(0.571429);
      value[ID::overtone5]->setFromNormalized(0.671429);
      value[ID::overtone6]->setFromNormalized(0.728571);
      value[ID::overtone7]->setFromNormalized(0.778571);
      value[ID::overtone8]->setFromNormalized(0.821429);
      value[ID::overtone9]->setFromNormalized(0.864286);
      value[ID::overtone10]->setFromNormalized(0.928571);
      value[ID::overtone11]->setFromNormalized(1.0);
      value[ID::overtone12]->setFromNormalized(1.0);
      value[ID::overtone13]->setFromNormalized(1.0);
      value[ID::overtone14]->setFromNormalized(1.0);
      value[ID::overtone15]->setFromNormalized(1.0);
      value[ID::chordGain0]->setFromNormalized(1.0);
      value[ID::chordGain1]->setFromNormalized(1.0);
      value[ID::chordGain2]->setFromNormalized(1.0);
      value[ID::chordGain3]->setFromNormalized(1.0);
      value[ID::chordSemi0]->setFromInt(0);
      value[ID::chordSemi1]->setFromInt(2);
      value[ID::chordSemi2]->setFromInt(4);
      value[ID::chordSemi3]->setFromInt(6);
      value[ID::chordMilli0]->setFromInt(0);
      value[ID::chordMilli1]->setFromInt(8);
      value[ID::chordMilli2]->setFromInt(16);
      value[ID::chordMilli3]->setFromInt(24);
      value[ID::chordPan0]->setFromNormalized(0.5);
      value[ID::chordPan1]->setFromNormalized(0.5);
      value[ID::chordPan2]->setFromNormalized(0.5);
      value[ID::chordPan3]->setFromNormalized(0.5);
      value[ID::nVoice]->setFromInt(5);
      value[ID::smoothness]->setFromNormalized(0.1);
      value[ID::pitchBend]->setFromNormalized(0.5);
    } break;

    case presetModuloOrgan: {
      value[ID::bypass]->setFromInt(0);
      value[ID::aliasing]->setFromInt(0);
      value[ID::negativeSemi]->setFromInt(0);
      value[ID::masterOctave]->setFromNormalized(0.5);
      value[ID::equalTemperament]->setFromNormalized(0.730441);
      value[ID::pitchMultiply]->setFromNormalized(0.388);
      value[ID::pitchModulo]->setFromNormalized(0.106);
      value[ID::seed]->setFromInt(0);
      value[ID::randomRetrigger]->setFromInt(0);
      value[ID::randomGainAmount]->setFromNormalized(0.0);
      value[ID::randomFrequencyAmount]->setFromNormalized(0.0);
      value[ID::chorusMix]->setFromNormalized(1.0);
      value[ID::chorusFrequency]->setFromNormalized(0.716);
      value[ID::chorusDepth]->setFromNormalized(0.724);
      value[ID::chorusDelayTimeRange0]->setFromNormalized(0.0);
      value[ID::chorusDelayTimeRange1]->setFromNormalized(0.824);
      value[ID::chorusDelayTimeRange2]->setFromNormalized(0.0);
      value[ID::chorusMinDelayTime0]->setFromNormalized(0.5);
      value[ID::chorusMinDelayTime1]->setFromNormalized(0.672);
      value[ID::chorusMinDelayTime2]->setFromNormalized(0.5);
      value[ID::chorusPhase]->setFromNormalized(0.0);
      value[ID::chorusOffset]->setFromNormalized(0.0);
      value[ID::chorusFeedback]->setFromNormalized(0.492);
      value[ID::chorusKeyFollow]->setFromInt(1);
      value[ID::gain]->setFromNormalized(0.5);
      value[ID::gainBoost]->setFromNormalized(0.0);
      value[ID::gainA]->setFromNormalized(0.0);
      value[ID::gainD]->setFromNormalized(0.5);
      value[ID::gainS]->setFromNormalized(0.5);
      value[ID::gainR]->setFromNormalized(0.000144);
      value[ID::gainEnvelopeCurve]->setFromNormalized(0.0);
      value[ID::lowShelfPitch]->setFromNormalized(0.0);
      value[ID::lowShelfGain]->setFromNormalized(0.5);
      value[ID::highShelfPitch]->setFromNormalized(0.0);
      value[ID::highShelfGain]->setFromNormalized(0.5);
      value[ID::gain0]->setFromNormalized(1.0);
      value[ID::gain1]->setFromNormalized(1.0);
      value[ID::gain2]->setFromNormalized(1.0);
      value[ID::gain3]->setFromNormalized(1.0);
      value[ID::gain4]->setFromNormalized(1.0);
      value[ID::gain5]->setFromNormalized(1.0);
      value[ID::gain6]->setFromNormalized(1.0);
      value[ID::gain7]->setFromNormalized(1.0);
      value[ID::semi0]->setFromInt(0);
      value[ID::semi1]->setFromInt(55);
      value[ID::semi2]->setFromInt(23);
      value[ID::semi3]->setFromInt(98);
      value[ID::semi4]->setFromInt(30);
      value[ID::semi5]->setFromInt(13);
      value[ID::semi6]->setFromInt(15);
      value[ID::semi7]->setFromInt(99);
      value[ID::milli0]->setFromInt(0);
      value[ID::milli1]->setFromInt(0);
      value[ID::milli2]->setFromInt(0);
      value[ID::milli3]->setFromInt(0);
      value[ID::milli4]->setFromInt(0);
      value[ID::milli5]->setFromInt(0);
      value[ID::milli6]->setFromInt(0);
      value[ID::milli7]->setFromInt(0);
      value[ID::overtone0]->setFromNormalized(1.0);
      value[ID::overtone1]->setFromNormalized(0.185714);
      value[ID::overtone2]->setFromNormalized(0.171429);
      value[ID::overtone3]->setFromNormalized(0.15);
      value[ID::overtone4]->setFromNormalized(0.142857);
      value[ID::overtone5]->setFromNormalized(0.392857);
      value[ID::overtone6]->setFromNormalized(0.657143);
      value[ID::overtone7]->setFromNormalized(0.771429);
      value[ID::overtone8]->setFromNormalized(0.807143);
      value[ID::overtone9]->setFromNormalized(0.071429);
      value[ID::overtone10]->setFromNormalized(0.064286);
      value[ID::overtone11]->setFromNormalized(0.064286);
      value[ID::overtone12]->setFromNormalized(0.064286);
      value[ID::overtone13]->setFromNormalized(0.064286);
      value[ID::overtone14]->setFromNormalized(0.064286);
      value[ID::overtone15]->setFromNormalized(0.064286);
      value[ID::chordGain0]->setFromNormalized(1.0);
      value[ID::chordGain1]->setFromNormalized(1.0);
      value[ID::chordGain2]->setFromNormalized(1.0);
      value[ID::chordGain3]->setFromNormalized(1.0);
      value[ID::chordSemi0]->setFromInt(0);
      value[ID::chordSemi1]->setFromInt(0);
      value[ID::chordSemi2]->setFromInt(0);
      value[ID::chordSemi3]->setFromInt(0);
      value[ID::chordMilli0]->setFromInt(0);
      value[ID::chordMilli1]->setFromInt(0);
      value[ID::chordMilli2]->setFromInt(0);
      value[ID::chordMilli3]->setFromInt(0);
      value[ID::chordPan0]->setFromNormalized(0.5);
      value[ID::chordPan1]->setFromNormalized(0.5);
      value[ID::chordPan2]->setFromNormalized(0.5);
      value[ID::chordPan3]->setFromNormalized(0.5);
      value[ID::nVoice]->setFromInt(5);
      value[ID::smoothness]->setFromNormalized(0.1);
      value[ID::pitchBend]->setFromNormalized(0.5);
    } break;

    case presetNarrowModulo: {
      value[ID::bypass]->setFromInt(0);
      value[ID::aliasing]->setFromInt(0);
      value[ID::negativeSemi]->setFromInt(0);
      value[ID::masterOctave]->setFromNormalized(0.304);
      value[ID::equalTemperament]->setFromNormalized(0.186441);
      value[ID::pitchMultiply]->setFromNormalized(0.25);
      value[ID::pitchModulo]->setFromNormalized(0.0058);
      value[ID::seed]->setFromInt(0);
      value[ID::randomRetrigger]->setFromInt(0);
      value[ID::randomGainAmount]->setFromNormalized(0.0);
      value[ID::randomFrequencyAmount]->setFromNormalized(0.0);
      value[ID::chorusMix]->setFromNormalized(0.0);
      value[ID::chorusFrequency]->setFromNormalized(0.5);
      value[ID::chorusDepth]->setFromNormalized(0.0);
      value[ID::chorusDelayTimeRange0]->setFromNormalized(0.0);
      value[ID::chorusDelayTimeRange1]->setFromNormalized(0.0);
      value[ID::chorusDelayTimeRange2]->setFromNormalized(0.0);
      value[ID::chorusMinDelayTime0]->setFromNormalized(0.5);
      value[ID::chorusMinDelayTime1]->setFromNormalized(0.5);
      value[ID::chorusMinDelayTime2]->setFromNormalized(0.5);
      value[ID::chorusPhase]->setFromNormalized(0.0);
      value[ID::chorusOffset]->setFromNormalized(0.0);
      value[ID::chorusFeedback]->setFromNormalized(0.0);
      value[ID::chorusKeyFollow]->setFromInt(1);
      value[ID::gain]->setFromNormalized(0.5);
      value[ID::gainBoost]->setFromNormalized(0.0);
      value[ID::gainA]->setFromNormalized(0.0);
      value[ID::gainD]->setFromNormalized(0.68);
      value[ID::gainS]->setFromNormalized(0.684);
      value[ID::gainR]->setFromNormalized(0.228144);
      value[ID::gainEnvelopeCurve]->setFromNormalized(0.0);
      value[ID::lowShelfPitch]->setFromNormalized(0.0);
      value[ID::lowShelfGain]->setFromNormalized(0.5);
      value[ID::highShelfPitch]->setFromNormalized(0.0);
      value[ID::highShelfGain]->setFromNormalized(0.5);
      value[ID::gain0]->setFromNormalized(1.0);
      value[ID::gain1]->setFromNormalized(1.0);
      value[ID::gain2]->setFromNormalized(1.0);
      value[ID::gain3]->setFromNormalized(1.0);
      value[ID::gain4]->setFromNormalized(0.916);
      value[ID::gain5]->setFromNormalized(1.0);
      value[ID::gain6]->setFromNormalized(1.0);
      value[ID::gain7]->setFromNormalized(1.0);
      value[ID::semi0]->setFromInt(0);
      value[ID::semi1]->setFromInt(6);
      value[ID::semi2]->setFromInt(9);
      value[ID::semi3]->setFromInt(26);
      value[ID::semi4]->setFromInt(37);
      value[ID::semi5]->setFromInt(16);
      value[ID::semi6]->setFromInt(9);
      value[ID::semi7]->setFromInt(8);
      value[ID::milli0]->setFromInt(0);
      value[ID::milli1]->setFromInt(0);
      value[ID::milli2]->setFromInt(0);
      value[ID::milli3]->setFromInt(0);
      value[ID::milli4]->setFromInt(0);
      value[ID::milli5]->setFromInt(0);
      value[ID::milli6]->setFromInt(0);
      value[ID::milli7]->setFromInt(0);
      value[ID::overtone0]->setFromNormalized(1.0);
      value[ID::overtone1]->setFromNormalized(1.0);
      value[ID::overtone2]->setFromNormalized(1.0);
      value[ID::overtone3]->setFromNormalized(1.0);
      value[ID::overtone4]->setFromNormalized(1.0);
      value[ID::overtone5]->setFromNormalized(1.0);
      value[ID::overtone6]->setFromNormalized(1.0);
      value[ID::overtone7]->setFromNormalized(1.0);
      value[ID::overtone8]->setFromNormalized(1.0);
      value[ID::overtone9]->setFromNormalized(1.0);
      value[ID::overtone10]->setFromNormalized(1.0);
      value[ID::overtone11]->setFromNormalized(1.0);
      value[ID::overtone12]->setFromNormalized(1.0);
      value[ID::overtone13]->setFromNormalized(1.0);
      value[ID::overtone14]->setFromNormalized(1.0);
      value[ID::overtone15]->setFromNormalized(1.0);
      value[ID::chordGain0]->setFromNormalized(0.85);
      value[ID::chordGain1]->setFromNormalized(1.0);
      value[ID::chordGain2]->setFromNormalized(1.0);
      value[ID::chordGain3]->setFromNormalized(1.0);
      value[ID::chordSemi0]->setFromInt(0);
      value[ID::chordSemi1]->setFromInt(12);
      value[ID::chordSemi2]->setFromInt(12);
      value[ID::chordSemi3]->setFromInt(0);
      value[ID::chordMilli0]->setFromInt(0);
      value[ID::chordMilli1]->setFromInt(0);
      value[ID::chordMilli2]->setFromInt(24);
      value[ID::chordMilli3]->setFromInt(16);
      value[ID::chordPan0]->setFromNormalized(0.592);
      value[ID::chordPan1]->setFromNormalized(0.308);
      value[ID::chordPan2]->setFromNormalized(0.676);
      value[ID::chordPan3]->setFromNormalized(0.428);
      value[ID::nVoice]->setFromInt(5);
      value[ID::smoothness]->setFromNormalized(0.1);
      value[ID::pitchBend]->setFromNormalized(0.5);
    } break;

    case presetNoisyFeedback: {
      value[ID::bypass]->setFromInt(0);
      value[ID::aliasing]->setFromInt(0);
      value[ID::negativeSemi]->setFromInt(0);
      value[ID::masterOctave]->setFromNormalized(0.5);
      value[ID::equalTemperament]->setFromNormalized(0.312441);
      value[ID::pitchMultiply]->setFromNormalized(0.25);
      value[ID::pitchModulo]->setFromNormalized(0.41);
      value[ID::seed]->setFromInt(0);
      value[ID::randomRetrigger]->setFromInt(0);
      value[ID::randomGainAmount]->setFromNormalized(0.684);
      value[ID::randomFrequencyAmount]->setFromNormalized(0.456);
      value[ID::chorusMix]->setFromNormalized(0.668);
      value[ID::chorusFrequency]->setFromNormalized(0.868);
      value[ID::chorusDepth]->setFromNormalized(0.9);
      value[ID::chorusDelayTimeRange0]->setFromNormalized(0.0);
      value[ID::chorusDelayTimeRange1]->setFromNormalized(0.0);
      value[ID::chorusDelayTimeRange2]->setFromNormalized(0.0);
      value[ID::chorusMinDelayTime0]->setFromNormalized(0.4928);
      value[ID::chorusMinDelayTime1]->setFromNormalized(0.5);
      value[ID::chorusMinDelayTime2]->setFromNormalized(0.5192);
      value[ID::chorusPhase]->setFromNormalized(0.0);
      value[ID::chorusOffset]->setFromNormalized(1.0);
      value[ID::chorusFeedback]->setFromNormalized(0.944);
      value[ID::chorusKeyFollow]->setFromInt(1);
      value[ID::gain]->setFromNormalized(0.5);
      value[ID::gainBoost]->setFromNormalized(0.0);
      value[ID::gainA]->setFromNormalized(0.0);
      value[ID::gainD]->setFromNormalized(0.472);
      value[ID::gainS]->setFromNormalized(0.228);
      value[ID::gainR]->setFromNormalized(0.716);
      value[ID::gainEnvelopeCurve]->setFromNormalized(0.0);
      value[ID::lowShelfPitch]->setFromNormalized(0.438);
      value[ID::lowShelfGain]->setFromNormalized(0.866);
      value[ID::highShelfPitch]->setFromNormalized(0.858);
      value[ID::highShelfGain]->setFromNormalized(0.188);
      value[ID::gain0]->setFromNormalized(1.0);
      value[ID::gain1]->setFromNormalized(1.0);
      value[ID::gain2]->setFromNormalized(1.0);
      value[ID::gain3]->setFromNormalized(1.0);
      value[ID::gain4]->setFromNormalized(1.0);
      value[ID::gain5]->setFromNormalized(1.0);
      value[ID::gain6]->setFromNormalized(1.0);
      value[ID::gain7]->setFromNormalized(1.0);
      value[ID::semi0]->setFromInt(0);
      value[ID::semi1]->setFromInt(36);
      value[ID::semi2]->setFromInt(36);
      value[ID::semi3]->setFromInt(61);
      value[ID::semi4]->setFromInt(84);
      value[ID::semi5]->setFromInt(0);
      value[ID::semi6]->setFromInt(0);
      value[ID::semi7]->setFromInt(0);
      value[ID::milli0]->setFromInt(0);
      value[ID::milli1]->setFromInt(0);
      value[ID::milli2]->setFromInt(472);
      value[ID::milli3]->setFromInt(0);
      value[ID::milli4]->setFromInt(0);
      value[ID::milli5]->setFromInt(784);
      value[ID::milli6]->setFromInt(362);
      value[ID::milli7]->setFromInt(66);
      value[ID::overtone0]->setFromNormalized(1.0);
      value[ID::overtone1]->setFromNormalized(0.992857);
      value[ID::overtone2]->setFromNormalized(1.0);
      value[ID::overtone3]->setFromNormalized(1.0);
      value[ID::overtone4]->setFromNormalized(0.564286);
      value[ID::overtone5]->setFromNormalized(0.578571);
      value[ID::overtone6]->setFromNormalized(0.585714);
      value[ID::overtone7]->setFromNormalized(0.578571);
      value[ID::overtone8]->setFromNormalized(0.378571);
      value[ID::overtone9]->setFromNormalized(0.371429);
      value[ID::overtone10]->setFromNormalized(0.364286);
      value[ID::overtone11]->setFromNormalized(0.364286);
      value[ID::overtone12]->setFromNormalized(0.121429);
      value[ID::overtone13]->setFromNormalized(0.121429);
      value[ID::overtone14]->setFromNormalized(0.121429);
      value[ID::overtone15]->setFromNormalized(0.121429);
      value[ID::chordGain0]->setFromNormalized(1.0);
      value[ID::chordGain1]->setFromNormalized(1.0);
      value[ID::chordGain2]->setFromNormalized(1.0);
      value[ID::chordGain3]->setFromNormalized(1.0);
      value[ID::chordSemi0]->setFromInt(0);
      value[ID::chordSemi1]->setFromInt(12);
      value[ID::chordSemi2]->setFromInt(0);
      value[ID::chordSemi3]->setFromInt(0);
      value[ID::chordMilli0]->setFromInt(0);
      value[ID::chordMilli1]->setFromInt(0);
      value[ID::chordMilli2]->setFromInt(246);
      value[ID::chordMilli3]->setFromInt(428);
      value[ID::chordPan0]->setFromNormalized(0.5);
      value[ID::chordPan1]->setFromNormalized(0.5);
      value[ID::chordPan2]->setFromNormalized(0.0);
      value[ID::chordPan3]->setFromNormalized(1.0);
      value[ID::nVoice]->setFromInt(5);
      value[ID::smoothness]->setFromNormalized(0.304);
      value[ID::pitchBend]->setFromNormalized(0.5);
    } break;

    case presetOddOvertone: {
      value[ID::bypass]->setFromInt(0);
      value[ID::aliasing]->setFromInt(0);
      value[ID::negativeSemi]->setFromInt(0);
      value[ID::masterOctave]->setFromNormalized(0.5);
      value[ID::equalTemperament]->setFromNormalized(0.074441);
      value[ID::pitchMultiply]->setFromNormalized(0.25);
      value[ID::pitchModulo]->setFromNormalized(0.0);
      value[ID::seed]->setFromInt(0);
      value[ID::randomRetrigger]->setFromInt(0);
      value[ID::randomGainAmount]->setFromNormalized(0.0);
      value[ID::randomFrequencyAmount]->setFromNormalized(0.0);
      value[ID::chorusMix]->setFromNormalized(0.0);
      value[ID::chorusFrequency]->setFromNormalized(0.5);
      value[ID::chorusDepth]->setFromNormalized(0.0);
      value[ID::chorusDelayTimeRange0]->setFromNormalized(0.0);
      value[ID::chorusDelayTimeRange1]->setFromNormalized(0.0);
      value[ID::chorusDelayTimeRange2]->setFromNormalized(0.0);
      value[ID::chorusMinDelayTime0]->setFromNormalized(0.5);
      value[ID::chorusMinDelayTime1]->setFromNormalized(0.5);
      value[ID::chorusMinDelayTime2]->setFromNormalized(0.5);
      value[ID::chorusPhase]->setFromNormalized(0.0);
      value[ID::chorusOffset]->setFromNormalized(0.0);
      value[ID::chorusFeedback]->setFromNormalized(0.0);
      value[ID::chorusKeyFollow]->setFromInt(1);
      value[ID::gain]->setFromNormalized(0.5);
      value[ID::gainBoost]->setFromNormalized(0.0);
      value[ID::gainA]->setFromNormalized(0.0);
      value[ID::gainD]->setFromNormalized(0.5);
      value[ID::gainS]->setFromNormalized(0.5);
      value[ID::gainR]->setFromNormalized(0.000144);
      value[ID::gainEnvelopeCurve]->setFromNormalized(0.0);
      value[ID::lowShelfPitch]->setFromNormalized(0.0);
      value[ID::lowShelfGain]->setFromNormalized(0.5);
      value[ID::highShelfPitch]->setFromNormalized(0.0);
      value[ID::highShelfGain]->setFromNormalized(0.5);
      value[ID::gain0]->setFromNormalized(1.0);
      value[ID::gain1]->setFromNormalized(1.0);
      value[ID::gain2]->setFromNormalized(1.0);
      value[ID::gain3]->setFromNormalized(1.0);
      value[ID::gain4]->setFromNormalized(1.0);
      value[ID::gain5]->setFromNormalized(1.0);
      value[ID::gain6]->setFromNormalized(1.0);
      value[ID::gain7]->setFromNormalized(1.0);
      value[ID::semi0]->setFromInt(0);
      value[ID::semi1]->setFromInt(0);
      value[ID::semi2]->setFromInt(0);
      value[ID::semi3]->setFromInt(0);
      value[ID::semi4]->setFromInt(0);
      value[ID::semi5]->setFromInt(0);
      value[ID::semi6]->setFromInt(0);
      value[ID::semi7]->setFromInt(0);
      value[ID::milli0]->setFromInt(0);
      value[ID::milli1]->setFromInt(0);
      value[ID::milli2]->setFromInt(0);
      value[ID::milli3]->setFromInt(0);
      value[ID::milli4]->setFromInt(0);
      value[ID::milli5]->setFromInt(0);
      value[ID::milli6]->setFromInt(0);
      value[ID::milli7]->setFromInt(0);
      value[ID::overtone0]->setFromNormalized(1.0);
      value[ID::overtone1]->setFromNormalized(0.849485);
      value[ID::overtone2]->setFromNormalized(0.0);
      value[ID::overtone3]->setFromNormalized(0.69897);
      value[ID::overtone4]->setFromNormalized(0.0);
      value[ID::overtone5]->setFromNormalized(0.610924);
      value[ID::overtone6]->setFromNormalized(0.0);
      value[ID::overtone7]->setFromNormalized(0.548455);
      value[ID::overtone8]->setFromNormalized(0.0);
      value[ID::overtone9]->setFromNormalized(0.5);
      value[ID::overtone10]->setFromNormalized(0.0);
      value[ID::overtone11]->setFromNormalized(0.460409);
      value[ID::overtone12]->setFromNormalized(0.0);
      value[ID::overtone13]->setFromNormalized(0.426936);
      value[ID::overtone14]->setFromNormalized(0.0);
      value[ID::overtone15]->setFromNormalized(0.39794);
      value[ID::chordGain0]->setFromNormalized(1.0);
      value[ID::chordGain1]->setFromNormalized(0.924);
      value[ID::chordGain2]->setFromNormalized(0.874);
      value[ID::chordGain3]->setFromNormalized(0.694);
      value[ID::chordSemi0]->setFromInt(0);
      value[ID::chordSemi1]->setFromInt(7);
      value[ID::chordSemi2]->setFromInt(14);
      value[ID::chordSemi3]->setFromInt(21);
      value[ID::chordMilli0]->setFromInt(0);
      value[ID::chordMilli1]->setFromInt(0);
      value[ID::chordMilli2]->setFromInt(0);
      value[ID::chordMilli3]->setFromInt(0);
      value[ID::chordPan0]->setFromNormalized(0.5);
      value[ID::chordPan1]->setFromNormalized(0.5);
      value[ID::chordPan2]->setFromNormalized(0.5);
      value[ID::chordPan3]->setFromNormalized(0.5);
      value[ID::nVoice]->setFromInt(5);
      value[ID::smoothness]->setFromNormalized(0.1);
      value[ID::pitchBend]->setFromNormalized(0.5);
    } break;

    case presetRandomBell: {
      value[ID::bypass]->setFromInt(0);
      value[ID::aliasing]->setFromInt(0);
      value[ID::negativeSemi]->setFromInt(0);
      value[ID::masterOctave]->setFromNormalized(0.5);
      value[ID::equalTemperament]->setFromNormalized(0.186441);
      value[ID::pitchMultiply]->setFromNormalized(0.25);
      value[ID::pitchModulo]->setFromNormalized(0.0);
      value[ID::seed]->setFromInt(0);
      value[ID::randomRetrigger]->setFromInt(0);
      value[ID::randomGainAmount]->setFromNormalized(0.0);
      value[ID::randomFrequencyAmount]->setFromNormalized(1.0);
      value[ID::chorusMix]->setFromNormalized(0.0);
      value[ID::chorusFrequency]->setFromNormalized(0.5);
      value[ID::chorusDepth]->setFromNormalized(0.0);
      value[ID::chorusDelayTimeRange0]->setFromNormalized(0.0);
      value[ID::chorusDelayTimeRange1]->setFromNormalized(0.0);
      value[ID::chorusDelayTimeRange2]->setFromNormalized(0.0);
      value[ID::chorusMinDelayTime0]->setFromNormalized(0.5);
      value[ID::chorusMinDelayTime1]->setFromNormalized(0.5);
      value[ID::chorusMinDelayTime2]->setFromNormalized(0.5);
      value[ID::chorusPhase]->setFromNormalized(0.0);
      value[ID::chorusOffset]->setFromNormalized(0.0);
      value[ID::chorusFeedback]->setFromNormalized(0.0);
      value[ID::chorusKeyFollow]->setFromInt(1);
      value[ID::gain]->setFromNormalized(0.5);
      value[ID::gainBoost]->setFromNormalized(0.0);
      value[ID::gainA]->setFromNormalized(0.0);
      value[ID::gainD]->setFromNormalized(0.5);
      value[ID::gainS]->setFromNormalized(0.5);
      value[ID::gainR]->setFromNormalized(0.736144);
      value[ID::gainEnvelopeCurve]->setFromNormalized(0.0);
      value[ID::lowShelfPitch]->setFromNormalized(0.0);
      value[ID::lowShelfGain]->setFromNormalized(0.5);
      value[ID::highShelfPitch]->setFromNormalized(0.0);
      value[ID::highShelfGain]->setFromNormalized(0.5);
      value[ID::gain0]->setFromNormalized(1.0);
      value[ID::gain1]->setFromNormalized(1.0);
      value[ID::gain2]->setFromNormalized(1.0);
      value[ID::gain3]->setFromNormalized(1.0);
      value[ID::gain4]->setFromNormalized(1.0);
      value[ID::gain5]->setFromNormalized(1.0);
      value[ID::gain6]->setFromNormalized(1.0);
      value[ID::gain7]->setFromNormalized(1.0);
      value[ID::semi0]->setFromInt(60);
      value[ID::semi1]->setFromInt(60);
      value[ID::semi2]->setFromInt(60);
      value[ID::semi3]->setFromInt(60);
      value[ID::semi4]->setFromInt(60);
      value[ID::semi5]->setFromInt(60);
      value[ID::semi6]->setFromInt(60);
      value[ID::semi7]->setFromInt(60);
      value[ID::milli0]->setFromInt(0);
      value[ID::milli1]->setFromInt(0);
      value[ID::milli2]->setFromInt(0);
      value[ID::milli3]->setFromInt(0);
      value[ID::milli4]->setFromInt(0);
      value[ID::milli5]->setFromInt(0);
      value[ID::milli6]->setFromInt(0);
      value[ID::milli7]->setFromInt(0);
      value[ID::overtone0]->setFromNormalized(1.0);
      value[ID::overtone1]->setFromNormalized(0.849485);
      value[ID::overtone2]->setFromNormalized(0.761439);
      value[ID::overtone3]->setFromNormalized(0.69897);
      value[ID::overtone4]->setFromNormalized(0.650515);
      value[ID::overtone5]->setFromNormalized(0.610925);
      value[ID::overtone6]->setFromNormalized(0.577451);
      value[ID::overtone7]->setFromNormalized(0.548455);
      value[ID::overtone8]->setFromNormalized(0.522879);
      value[ID::overtone9]->setFromNormalized(0.5);
      value[ID::overtone10]->setFromNormalized(0.479303);
      value[ID::overtone11]->setFromNormalized(0.460409);
      value[ID::overtone12]->setFromNormalized(0.443028);
      value[ID::overtone13]->setFromNormalized(0.426937);
      value[ID::overtone14]->setFromNormalized(0.411955);
      value[ID::overtone15]->setFromNormalized(0.39794);
      value[ID::chordGain0]->setFromNormalized(1.0);
      value[ID::chordGain1]->setFromNormalized(1.0);
      value[ID::chordGain2]->setFromNormalized(1.0);
      value[ID::chordGain3]->setFromNormalized(1.0);
      value[ID::chordSemi0]->setFromInt(0);
      value[ID::chordSemi1]->setFromInt(0);
      value[ID::chordSemi2]->setFromInt(0);
      value[ID::chordSemi3]->setFromInt(0);
      value[ID::chordMilli0]->setFromInt(0);
      value[ID::chordMilli1]->setFromInt(0);
      value[ID::chordMilli2]->setFromInt(0);
      value[ID::chordMilli3]->setFromInt(0);
      value[ID::chordPan0]->setFromNormalized(0.5);
      value[ID::chordPan1]->setFromNormalized(0.5);
      value[ID::chordPan2]->setFromNormalized(0.5);
      value[ID::chordPan3]->setFromNormalized(0.5);
      value[ID::nVoice]->setFromInt(5);
      value[ID::smoothness]->setFromNormalized(0.1);
      value[ID::pitchBend]->setFromNormalized(0.5);
    } break;

    case presetRandomPitchStereo: {
      value[ID::bypass]->setFromInt(0);
      value[ID::aliasing]->setFromInt(0);
      value[ID::negativeSemi]->setFromInt(0);
      value[ID::masterOctave]->setFromNormalized(0.5);
      value[ID::equalTemperament]->setFromNormalized(0.154441);
      value[ID::pitchMultiply]->setFromNormalized(0.25);
      value[ID::pitchModulo]->setFromNormalized(0.0);
      value[ID::seed]->setFromInt(0);
      value[ID::randomRetrigger]->setFromInt(0);
      value[ID::randomGainAmount]->setFromNormalized(0.0);
      value[ID::randomFrequencyAmount]->setFromNormalized(0.26);
      value[ID::chorusMix]->setFromNormalized(0.0);
      value[ID::chorusFrequency]->setFromNormalized(0.5);
      value[ID::chorusDepth]->setFromNormalized(0.0);
      value[ID::chorusDelayTimeRange0]->setFromNormalized(0.0);
      value[ID::chorusDelayTimeRange1]->setFromNormalized(0.0);
      value[ID::chorusDelayTimeRange2]->setFromNormalized(0.0);
      value[ID::chorusMinDelayTime0]->setFromNormalized(0.5);
      value[ID::chorusMinDelayTime1]->setFromNormalized(0.5);
      value[ID::chorusMinDelayTime2]->setFromNormalized(0.5);
      value[ID::chorusPhase]->setFromNormalized(0.0);
      value[ID::chorusOffset]->setFromNormalized(0.0);
      value[ID::chorusFeedback]->setFromNormalized(0.0);
      value[ID::chorusKeyFollow]->setFromInt(1);
      value[ID::gain]->setFromNormalized(0.5);
      value[ID::gainBoost]->setFromNormalized(0.0);
      value[ID::gainA]->setFromNormalized(0.0);
      value[ID::gainD]->setFromNormalized(0.5);
      value[ID::gainS]->setFromNormalized(0.5);
      value[ID::gainR]->setFromNormalized(0.724144);
      value[ID::gainEnvelopeCurve]->setFromNormalized(0.0);
      value[ID::lowShelfPitch]->setFromNormalized(0.0);
      value[ID::lowShelfGain]->setFromNormalized(0.5);
      value[ID::highShelfPitch]->setFromNormalized(0.0);
      value[ID::highShelfGain]->setFromNormalized(0.5);
      value[ID::gain0]->setFromNormalized(1.0);
      value[ID::gain1]->setFromNormalized(1.0);
      value[ID::gain2]->setFromNormalized(1.0);
      value[ID::gain3]->setFromNormalized(1.0);
      value[ID::gain4]->setFromNormalized(1.0);
      value[ID::gain5]->setFromNormalized(1.0);
      value[ID::gain6]->setFromNormalized(1.0);
      value[ID::gain7]->setFromNormalized(1.0);
      value[ID::semi0]->setFromInt(0);
      value[ID::semi1]->setFromInt(4);
      value[ID::semi2]->setFromInt(12);
      value[ID::semi3]->setFromInt(0);
      value[ID::semi4]->setFromInt(4);
      value[ID::semi5]->setFromInt(20);
      value[ID::semi6]->setFromInt(0);
      value[ID::semi7]->setFromInt(0);
      value[ID::milli0]->setFromInt(0);
      value[ID::milli1]->setFromInt(0);
      value[ID::milli2]->setFromInt(0);
      value[ID::milli3]->setFromInt(0);
      value[ID::milli4]->setFromInt(470);
      value[ID::milli5]->setFromInt(106);
      value[ID::milli6]->setFromInt(256);
      value[ID::milli7]->setFromInt(356);
      value[ID::overtone0]->setFromNormalized(1.0);
      value[ID::overtone1]->setFromNormalized(0.849485);
      value[ID::overtone2]->setFromNormalized(0.761439);
      value[ID::overtone3]->setFromNormalized(0.69897);
      value[ID::overtone4]->setFromNormalized(0.650515);
      value[ID::overtone5]->setFromNormalized(0.610924);
      value[ID::overtone6]->setFromNormalized(0.577451);
      value[ID::overtone7]->setFromNormalized(0.548455);
      value[ID::overtone8]->setFromNormalized(0.522879);
      value[ID::overtone9]->setFromNormalized(0.5);
      value[ID::overtone10]->setFromNormalized(0.464286);
      value[ID::overtone11]->setFromNormalized(0.421429);
      value[ID::overtone12]->setFromNormalized(0.392857);
      value[ID::overtone13]->setFromNormalized(0.342857);
      value[ID::overtone14]->setFromNormalized(0.271429);
      value[ID::overtone15]->setFromNormalized(0.2);
      value[ID::chordGain0]->setFromNormalized(1.0);
      value[ID::chordGain1]->setFromNormalized(1.0);
      value[ID::chordGain2]->setFromNormalized(1.0);
      value[ID::chordGain3]->setFromNormalized(1.0);
      value[ID::chordSemi0]->setFromInt(0);
      value[ID::chordSemi1]->setFromInt(0);
      value[ID::chordSemi2]->setFromInt(0);
      value[ID::chordSemi3]->setFromInt(0);
      value[ID::chordMilli0]->setFromInt(0);
      value[ID::chordMilli1]->setFromInt(0);
      value[ID::chordMilli2]->setFromInt(0);
      value[ID::chordMilli3]->setFromInt(0);
      value[ID::chordPan0]->setFromNormalized(0.0);
      value[ID::chordPan1]->setFromNormalized(1.0);
      value[ID::chordPan2]->setFromNormalized(0.5);
      value[ID::chordPan3]->setFromNormalized(0.5);
      value[ID::nVoice]->setFromInt(5);
      value[ID::smoothness]->setFromNormalized(0.1);
      value[ID::pitchBend]->setFromNormalized(0.5);
    } break;

    case presetReverseSemiLowPop: {
      value[ID::bypass]->setFromInt(0);
      value[ID::aliasing]->setFromInt(0);
      value[ID::negativeSemi]->setFromInt(120);
      value[ID::masterOctave]->setFromNormalized(0.854);
      value[ID::equalTemperament]->setFromNormalized(0.296441);
      value[ID::pitchMultiply]->setFromNormalized(0.5832);
      value[ID::pitchModulo]->setFromNormalized(0.252);
      value[ID::seed]->setFromInt(0);
      value[ID::randomRetrigger]->setFromInt(0);
      value[ID::randomGainAmount]->setFromNormalized(0.0);
      value[ID::randomFrequencyAmount]->setFromNormalized(0.0);
      value[ID::chorusMix]->setFromNormalized(0.204);
      value[ID::chorusFrequency]->setFromNormalized(0.656);
      value[ID::chorusDepth]->setFromNormalized(0.824);
      value[ID::chorusDelayTimeRange0]->setFromNormalized(0.584);
      value[ID::chorusDelayTimeRange1]->setFromNormalized(0.632);
      value[ID::chorusDelayTimeRange2]->setFromNormalized(0.596);
      value[ID::chorusMinDelayTime0]->setFromNormalized(0.192);
      value[ID::chorusMinDelayTime1]->setFromNormalized(0.816);
      value[ID::chorusMinDelayTime2]->setFromNormalized(0.216);
      value[ID::chorusPhase]->setFromNormalized(0.0);
      value[ID::chorusOffset]->setFromNormalized(1.0);
      value[ID::chorusFeedback]->setFromNormalized(0.388);
      value[ID::chorusKeyFollow]->setFromInt(0);
      value[ID::gain]->setFromNormalized(0.5);
      value[ID::gainBoost]->setFromNormalized(0.328);
      value[ID::gainA]->setFromNormalized(0.084);
      value[ID::gainD]->setFromNormalized(0.184);
      value[ID::gainS]->setFromNormalized(0.0);
      value[ID::gainR]->setFromNormalized(0.428144);
      value[ID::gainEnvelopeCurve]->setFromNormalized(0.0);
      value[ID::lowShelfPitch]->setFromNormalized(0.0);
      value[ID::lowShelfGain]->setFromNormalized(0.5);
      value[ID::highShelfPitch]->setFromNormalized(0.0);
      value[ID::highShelfGain]->setFromNormalized(0.5);
      value[ID::gain0]->setFromNormalized(1.0);
      value[ID::gain1]->setFromNormalized(1.0);
      value[ID::gain2]->setFromNormalized(1.0);
      value[ID::gain3]->setFromNormalized(1.0);
      value[ID::gain4]->setFromNormalized(1.0);
      value[ID::gain5]->setFromNormalized(1.0);
      value[ID::gain6]->setFromNormalized(1.0);
      value[ID::gain7]->setFromNormalized(1.0);
      value[ID::semi0]->setFromInt(0);
      value[ID::semi1]->setFromInt(8);
      value[ID::semi2]->setFromInt(31);
      value[ID::semi3]->setFromInt(16);
      value[ID::semi4]->setFromInt(13);
      value[ID::semi5]->setFromInt(7);
      value[ID::semi6]->setFromInt(2);
      value[ID::semi7]->setFromInt(28);
      value[ID::milli0]->setFromInt(0);
      value[ID::milli1]->setFromInt(0);
      value[ID::milli2]->setFromInt(0);
      value[ID::milli3]->setFromInt(0);
      value[ID::milli4]->setFromInt(0);
      value[ID::milli5]->setFromInt(0);
      value[ID::milli6]->setFromInt(0);
      value[ID::milli7]->setFromInt(0);
      value[ID::overtone0]->setFromNormalized(1.0);
      value[ID::overtone1]->setFromNormalized(0.849485);
      value[ID::overtone2]->setFromNormalized(0.761439);
      value[ID::overtone3]->setFromNormalized(0.69897);
      value[ID::overtone4]->setFromNormalized(0.650515);
      value[ID::overtone5]->setFromNormalized(0.610925);
      value[ID::overtone6]->setFromNormalized(0.577451);
      value[ID::overtone7]->setFromNormalized(0.548455);
      value[ID::overtone8]->setFromNormalized(0.522879);
      value[ID::overtone9]->setFromNormalized(0.5);
      value[ID::overtone10]->setFromNormalized(0.479303);
      value[ID::overtone11]->setFromNormalized(0.460409);
      value[ID::overtone12]->setFromNormalized(0.443028);
      value[ID::overtone13]->setFromNormalized(0.426937);
      value[ID::overtone14]->setFromNormalized(0.411955);
      value[ID::overtone15]->setFromNormalized(0.39794);
      value[ID::chordGain0]->setFromNormalized(1.0);
      value[ID::chordGain1]->setFromNormalized(1.0);
      value[ID::chordGain2]->setFromNormalized(1.0);
      value[ID::chordGain3]->setFromNormalized(1.0);
      value[ID::chordSemi0]->setFromInt(0);
      value[ID::chordSemi1]->setFromInt(24);
      value[ID::chordSemi2]->setFromInt(77);
      value[ID::chordSemi3]->setFromInt(77);
      value[ID::chordMilli0]->setFromInt(0);
      value[ID::chordMilli1]->setFromInt(0);
      value[ID::chordMilli2]->setFromInt(0);
      value[ID::chordMilli3]->setFromInt(276);
      value[ID::chordPan0]->setFromNormalized(0.5);
      value[ID::chordPan1]->setFromNormalized(0.5);
      value[ID::chordPan2]->setFromNormalized(1.0);
      value[ID::chordPan3]->setFromNormalized(0.0);
      value[ID::nVoice]->setFromInt(5);
      value[ID::smoothness]->setFromNormalized(0.1);
      value[ID::pitchBend]->setFromNormalized(0.5);
    } break;

    case presetShelving: {
      value[ID::bypass]->setFromInt(0);
      value[ID::aliasing]->setFromInt(0);
      value[ID::negativeSemi]->setFromInt(0);
      value[ID::masterOctave]->setFromNormalized(0.5);
      value[ID::equalTemperament]->setFromNormalized(0.186441);
      value[ID::pitchMultiply]->setFromNormalized(0.25);
      value[ID::pitchModulo]->setFromNormalized(0.572);
      value[ID::seed]->setFromInt(0);
      value[ID::randomRetrigger]->setFromInt(0);
      value[ID::randomGainAmount]->setFromNormalized(0.744);
      value[ID::randomFrequencyAmount]->setFromNormalized(0.0);
      value[ID::chorusMix]->setFromNormalized(0.0);
      value[ID::chorusFrequency]->setFromNormalized(0.5);
      value[ID::chorusDepth]->setFromNormalized(0.0);
      value[ID::chorusDelayTimeRange0]->setFromNormalized(0.0);
      value[ID::chorusDelayTimeRange1]->setFromNormalized(0.0);
      value[ID::chorusDelayTimeRange2]->setFromNormalized(0.0);
      value[ID::chorusMinDelayTime0]->setFromNormalized(0.5);
      value[ID::chorusMinDelayTime1]->setFromNormalized(0.5);
      value[ID::chorusMinDelayTime2]->setFromNormalized(0.5);
      value[ID::chorusPhase]->setFromNormalized(0.0);
      value[ID::chorusOffset]->setFromNormalized(0.0);
      value[ID::chorusFeedback]->setFromNormalized(0.0);
      value[ID::chorusKeyFollow]->setFromInt(1);
      value[ID::gain]->setFromNormalized(0.5);
      value[ID::gainBoost]->setFromNormalized(0.0);
      value[ID::gainA]->setFromNormalized(0.0);
      value[ID::gainD]->setFromNormalized(0.276);
      value[ID::gainS]->setFromNormalized(0.0);
      value[ID::gainR]->setFromNormalized(0.324);
      value[ID::gainEnvelopeCurve]->setFromNormalized(0.0);
      value[ID::lowShelfPitch]->setFromNormalized(0.25);
      value[ID::lowShelfGain]->setFromNormalized(1.0);
      value[ID::highShelfPitch]->setFromNormalized(0.706);
      value[ID::highShelfGain]->setFromNormalized(0.682);
      value[ID::gain0]->setFromNormalized(1.0);
      value[ID::gain1]->setFromNormalized(0.912);
      value[ID::gain2]->setFromNormalized(0.942);
      value[ID::gain3]->setFromNormalized(0.982);
      value[ID::gain4]->setFromNormalized(0.984);
      value[ID::gain5]->setFromNormalized(0.856);
      value[ID::gain6]->setFromNormalized(1.0);
      value[ID::gain7]->setFromNormalized(1.0);
      value[ID::semi0]->setFromInt(0);
      value[ID::semi1]->setFromInt(45);
      value[ID::semi2]->setFromInt(22);
      value[ID::semi3]->setFromInt(10);
      value[ID::semi4]->setFromInt(20);
      value[ID::semi5]->setFromInt(52);
      value[ID::semi6]->setFromInt(12);
      value[ID::semi7]->setFromInt(0);
      value[ID::milli0]->setFromInt(0);
      value[ID::milli1]->setFromInt(0);
      value[ID::milli2]->setFromInt(0);
      value[ID::milli3]->setFromInt(0);
      value[ID::milli4]->setFromInt(0);
      value[ID::milli5]->setFromInt(0);
      value[ID::milli6]->setFromInt(0);
      value[ID::milli7]->setFromInt(0);
      value[ID::overtone0]->setFromNormalized(0.6);
      value[ID::overtone1]->setFromNormalized(0.685714);
      value[ID::overtone2]->setFromNormalized(0.807143);
      value[ID::overtone3]->setFromNormalized(0.871429);
      value[ID::overtone4]->setFromNormalized(0.685714);
      value[ID::overtone5]->setFromNormalized(0.514286);
      value[ID::overtone6]->setFromNormalized(0.442857);
      value[ID::overtone7]->setFromNormalized(0.507143);
      value[ID::overtone8]->setFromNormalized(0.635714);
      value[ID::overtone9]->setFromNormalized(0.714286);
      value[ID::overtone10]->setFromNormalized(0.664286);
      value[ID::overtone11]->setFromNormalized(0.428571);
      value[ID::overtone12]->setFromNormalized(0.45);
      value[ID::overtone13]->setFromNormalized(0.6);
      value[ID::overtone14]->setFromNormalized(0.671429);
      value[ID::overtone15]->setFromNormalized(0.757143);
      value[ID::chordGain0]->setFromNormalized(1.0);
      value[ID::chordGain1]->setFromNormalized(1.0);
      value[ID::chordGain2]->setFromNormalized(1.0);
      value[ID::chordGain3]->setFromNormalized(1.0);
      value[ID::chordSemi0]->setFromInt(0);
      value[ID::chordSemi1]->setFromInt(19);
      value[ID::chordSemi2]->setFromInt(17);
      value[ID::chordSemi3]->setFromInt(0);
      value[ID::chordMilli0]->setFromInt(0);
      value[ID::chordMilli1]->setFromInt(0);
      value[ID::chordMilli2]->setFromInt(0);
      value[ID::chordMilli3]->setFromInt(0);
      value[ID::chordPan0]->setFromNormalized(0.5);
      value[ID::chordPan1]->setFromNormalized(0.0);
      value[ID::chordPan2]->setFromNormalized(1.0);
      value[ID::chordPan3]->setFromNormalized(0.5);
      value[ID::nVoice]->setFromInt(5);
      value[ID::smoothness]->setFromNormalized(0.1);
      value[ID::pitchBend]->setFromNormalized(0.5);
    } break;

    case presetSinPad: {
      value[ID::bypass]->setFromInt(0);
      value[ID::aliasing]->setFromInt(0);
      value[ID::negativeSemi]->setFromInt(0);
      value[ID::masterOctave]->setFromNormalized(0.382);
      value[ID::equalTemperament]->setFromNormalized(0.186441);
      value[ID::pitchMultiply]->setFromNormalized(0.25);
      value[ID::pitchModulo]->setFromNormalized(0.0);
      value[ID::seed]->setFromInt(0);
      value[ID::randomRetrigger]->setFromInt(0);
      value[ID::randomGainAmount]->setFromNormalized(0.5);
      value[ID::randomFrequencyAmount]->setFromNormalized(0.156);
      value[ID::chorusMix]->setFromNormalized(0.664);
      value[ID::chorusFrequency]->setFromNormalized(0.684);
      value[ID::chorusDepth]->setFromNormalized(0.576);
      value[ID::chorusDelayTimeRange0]->setFromNormalized(0.0);
      value[ID::chorusDelayTimeRange1]->setFromNormalized(0.332);
      value[ID::chorusDelayTimeRange2]->setFromNormalized(0.232);
      value[ID::chorusMinDelayTime0]->setFromNormalized(0.732);
      value[ID::chorusMinDelayTime1]->setFromNormalized(0.324);
      value[ID::chorusMinDelayTime2]->setFromNormalized(0.5);
      value[ID::chorusPhase]->setFromNormalized(0.0);
      value[ID::chorusOffset]->setFromNormalized(1.0);
      value[ID::chorusFeedback]->setFromNormalized(0.464);
      value[ID::chorusKeyFollow]->setFromInt(0);
      value[ID::gain]->setFromNormalized(0.5);
      value[ID::gainBoost]->setFromNormalized(0.184);
      value[ID::gainA]->setFromNormalized(0.628);
      value[ID::gainD]->setFromNormalized(0.844);
      value[ID::gainS]->setFromNormalized(0.904);
      value[ID::gainR]->setFromNormalized(0.684144);
      value[ID::gainEnvelopeCurve]->setFromNormalized(0.832);
      value[ID::lowShelfPitch]->setFromNormalized(0.0);
      value[ID::lowShelfGain]->setFromNormalized(0.5);
      value[ID::highShelfPitch]->setFromNormalized(0.718);
      value[ID::highShelfGain]->setFromNormalized(0.232);
      value[ID::gain0]->setFromNormalized(1.0);
      value[ID::gain1]->setFromNormalized(1.0);
      value[ID::gain2]->setFromNormalized(1.0);
      value[ID::gain3]->setFromNormalized(1.0);
      value[ID::gain4]->setFromNormalized(0.662);
      value[ID::gain5]->setFromNormalized(0.522);
      value[ID::gain6]->setFromNormalized(0.614);
      value[ID::gain7]->setFromNormalized(1.0);
      value[ID::semi0]->setFromInt(0);
      value[ID::semi1]->setFromInt(4);
      value[ID::semi2]->setFromInt(0);
      value[ID::semi3]->setFromInt(0);
      value[ID::semi4]->setFromInt(14);
      value[ID::semi5]->setFromInt(19);
      value[ID::semi6]->setFromInt(24);
      value[ID::semi7]->setFromInt(7);
      value[ID::milli0]->setFromInt(0);
      value[ID::milli1]->setFromInt(286);
      value[ID::milli2]->setFromInt(502);
      value[ID::milli3]->setFromInt(370);
      value[ID::milli4]->setFromInt(0);
      value[ID::milli5]->setFromInt(0);
      value[ID::milli6]->setFromInt(0);
      value[ID::milli7]->setFromInt(0);
      value[ID::overtone0]->setFromNormalized(0.564286);
      value[ID::overtone1]->setFromNormalized(0.885714);
      value[ID::overtone2]->setFromNormalized(0.892857);
      value[ID::overtone3]->setFromNormalized(0.864286);
      value[ID::overtone4]->setFromNormalized(0.435714);
      value[ID::overtone5]->setFromNormalized(0.357143);
      value[ID::overtone6]->setFromNormalized(0.528571);
      value[ID::overtone7]->setFromNormalized(0.764286);
      value[ID::overtone8]->setFromNormalized(0.835714);
      value[ID::overtone9]->setFromNormalized(0.485714);
      value[ID::overtone10]->setFromNormalized(0.3);
      value[ID::overtone11]->setFromNormalized(0.607143);
      value[ID::overtone12]->setFromNormalized(0.9);
      value[ID::overtone13]->setFromNormalized(0.735714);
      value[ID::overtone14]->setFromNormalized(0.471429);
      value[ID::overtone15]->setFromNormalized(0.392857);
      value[ID::chordGain0]->setFromNormalized(1.0);
      value[ID::chordGain1]->setFromNormalized(1.0);
      value[ID::chordGain2]->setFromNormalized(1.0);
      value[ID::chordGain3]->setFromNormalized(1.0);
      value[ID::chordSemi0]->setFromInt(0);
      value[ID::chordSemi1]->setFromInt(0);
      value[ID::chordSemi2]->setFromInt(4);
      value[ID::chordSemi3]->setFromInt(0);
      value[ID::chordMilli0]->setFromInt(0);
      value[ID::chordMilli1]->setFromInt(0);
      value[ID::chordMilli2]->setFromInt(792);
      value[ID::chordMilli3]->setFromInt(0);
      value[ID::chordPan0]->setFromNormalized(0.0);
      value[ID::chordPan1]->setFromNormalized(0.5);
      value[ID::chordPan2]->setFromNormalized(0.5);
      value[ID::chordPan3]->setFromNormalized(1.0);
      value[ID::nVoice]->setFromInt(5);
      value[ID::smoothness]->setFromNormalized(0.1);
      value[ID::pitchBend]->setFromNormalized(0.5);
    } break;

    case presetSlowRotation: {
      value[ID::bypass]->setFromInt(0);
      value[ID::aliasing]->setFromInt(0);
      value[ID::negativeSemi]->setFromInt(0);
      value[ID::masterOctave]->setFromNormalized(0.5);
      value[ID::equalTemperament]->setFromNormalized(0.180441);
      value[ID::pitchMultiply]->setFromNormalized(0.25);
      value[ID::pitchModulo]->setFromNormalized(0.0);
      value[ID::seed]->setFromInt(0);
      value[ID::randomRetrigger]->setFromInt(0);
      value[ID::randomGainAmount]->setFromNormalized(0.368);
      value[ID::randomFrequencyAmount]->setFromNormalized(0.164);
      value[ID::chorusMix]->setFromNormalized(1.0);
      value[ID::chorusFrequency]->setFromNormalized(0.4936);
      value[ID::chorusDepth]->setFromNormalized(1.0);
      value[ID::chorusDelayTimeRange0]->setFromNormalized(0.316);
      value[ID::chorusDelayTimeRange1]->setFromNormalized(0.54);
      value[ID::chorusDelayTimeRange2]->setFromNormalized(0.224);
      value[ID::chorusMinDelayTime0]->setFromNormalized(0.796);
      value[ID::chorusMinDelayTime1]->setFromNormalized(0.684);
      value[ID::chorusMinDelayTime2]->setFromNormalized(0.752);
      value[ID::chorusPhase]->setFromNormalized(0.0);
      value[ID::chorusOffset]->setFromNormalized(0.296);
      value[ID::chorusFeedback]->setFromNormalized(0.672);
      value[ID::chorusKeyFollow]->setFromInt(0);
      value[ID::gain]->setFromNormalized(0.5);
      value[ID::gainBoost]->setFromNormalized(0.364);
      value[ID::gainA]->setFromNormalized(0.404);
      value[ID::gainD]->setFromNormalized(0.864);
      value[ID::gainS]->setFromNormalized(1.0);
      value[ID::gainR]->setFromNormalized(0.644);
      value[ID::gainEnvelopeCurve]->setFromNormalized(0.72);
      value[ID::lowShelfPitch]->setFromNormalized(0.0);
      value[ID::lowShelfGain]->setFromNormalized(0.5);
      value[ID::highShelfPitch]->setFromNormalized(0.676);
      value[ID::highShelfGain]->setFromNormalized(0.326);
      value[ID::gain0]->setFromNormalized(1.0);
      value[ID::gain1]->setFromNormalized(1.0);
      value[ID::gain2]->setFromNormalized(0.778);
      value[ID::gain3]->setFromNormalized(0.926);
      value[ID::gain4]->setFromNormalized(1.0);
      value[ID::gain5]->setFromNormalized(1.0);
      value[ID::gain6]->setFromNormalized(1.0);
      value[ID::gain7]->setFromNormalized(0.83);
      value[ID::semi0]->setFromInt(0);
      value[ID::semi1]->setFromInt(5);
      value[ID::semi2]->setFromInt(19);
      value[ID::semi3]->setFromInt(16);
      value[ID::semi4]->setFromInt(7);
      value[ID::semi5]->setFromInt(0);
      value[ID::semi6]->setFromInt(0);
      value[ID::semi7]->setFromInt(36);
      value[ID::milli0]->setFromInt(0);
      value[ID::milli1]->setFromInt(136);
      value[ID::milli2]->setFromInt(254);
      value[ID::milli3]->setFromInt(460);
      value[ID::milli4]->setFromInt(190);
      value[ID::milli5]->setFromInt(586);
      value[ID::milli6]->setFromInt(296);
      value[ID::milli7]->setFromInt(798);
      value[ID::overtone0]->setFromNormalized(0.621429);
      value[ID::overtone1]->setFromNormalized(0.771429);
      value[ID::overtone2]->setFromNormalized(0.907143);
      value[ID::overtone3]->setFromNormalized(0.85);
      value[ID::overtone4]->setFromNormalized(0.514286);
      value[ID::overtone5]->setFromNormalized(0.421429);
      value[ID::overtone6]->setFromNormalized(0.407143);
      value[ID::overtone7]->setFromNormalized(0.478571);
      value[ID::overtone8]->setFromNormalized(0.542857);
      value[ID::overtone9]->setFromNormalized(0.685714);
      value[ID::overtone10]->setFromNormalized(0.714286);
      value[ID::overtone11]->setFromNormalized(0.55);
      value[ID::overtone12]->setFromNormalized(0.407143);
      value[ID::overtone13]->setFromNormalized(0.271429);
      value[ID::overtone14]->setFromNormalized(0.185714);
      value[ID::overtone15]->setFromNormalized(0.15);
      value[ID::chordGain0]->setFromNormalized(1.0);
      value[ID::chordGain1]->setFromNormalized(0.876);
      value[ID::chordGain2]->setFromNormalized(0.974);
      value[ID::chordGain3]->setFromNormalized(0.942);
      value[ID::chordSemi0]->setFromInt(0);
      value[ID::chordSemi1]->setFromInt(12);
      value[ID::chordSemi2]->setFromInt(14);
      value[ID::chordSemi3]->setFromInt(7);
      value[ID::chordMilli0]->setFromInt(0);
      value[ID::chordMilli1]->setFromInt(0);
      value[ID::chordMilli2]->setFromInt(0);
      value[ID::chordMilli3]->setFromInt(286);
      value[ID::chordPan0]->setFromNormalized(0.5);
      value[ID::chordPan1]->setFromNormalized(0.288);
      value[ID::chordPan2]->setFromNormalized(0.712);
      value[ID::chordPan3]->setFromNormalized(0.5);
      value[ID::nVoice]->setFromInt(5);
      value[ID::smoothness]->setFromNormalized(0.1);
      value[ID::pitchBend]->setFromNormalized(0.5);
    } break;

    case presetSolidHighBlurredLow: {
      value[ID::bypass]->setFromInt(0);
      value[ID::aliasing]->setFromInt(0);
      value[ID::negativeSemi]->setFromInt(0);
      value[ID::masterOctave]->setFromNormalized(0.5);
      value[ID::equalTemperament]->setFromNormalized(0.186441);
      value[ID::pitchMultiply]->setFromNormalized(0.27);
      value[ID::pitchModulo]->setFromNormalized(0.0);
      value[ID::seed]->setFromInt(0);
      value[ID::randomRetrigger]->setFromInt(0);
      value[ID::randomGainAmount]->setFromNormalized(0.308);
      value[ID::randomFrequencyAmount]->setFromNormalized(0.0);
      value[ID::chorusMix]->setFromNormalized(0.056);
      value[ID::chorusFrequency]->setFromNormalized(0.924);
      value[ID::chorusDepth]->setFromNormalized(0.624);
      value[ID::chorusDelayTimeRange0]->setFromNormalized(0.364);
      value[ID::chorusDelayTimeRange1]->setFromNormalized(0.304);
      value[ID::chorusDelayTimeRange2]->setFromNormalized(0.456);
      value[ID::chorusMinDelayTime0]->setFromNormalized(0.26);
      value[ID::chorusMinDelayTime1]->setFromNormalized(0.204);
      value[ID::chorusMinDelayTime2]->setFromNormalized(0.088);
      value[ID::chorusPhase]->setFromNormalized(0.0);
      value[ID::chorusOffset]->setFromNormalized(1.0);
      value[ID::chorusFeedback]->setFromNormalized(0.908);
      value[ID::chorusKeyFollow]->setFromInt(0);
      value[ID::gain]->setFromNormalized(0.5);
      value[ID::gainBoost]->setFromNormalized(0.0);
      value[ID::gainA]->setFromNormalized(0.148);
      value[ID::gainD]->setFromNormalized(0.5);
      value[ID::gainS]->setFromNormalized(0.5);
      value[ID::gainR]->setFromNormalized(0.804);
      value[ID::gainEnvelopeCurve]->setFromNormalized(0.0);
      value[ID::lowShelfPitch]->setFromNormalized(0.0);
      value[ID::lowShelfGain]->setFromNormalized(0.5);
      value[ID::highShelfPitch]->setFromNormalized(0.0);
      value[ID::highShelfGain]->setFromNormalized(0.5);
      value[ID::gain0]->setFromNormalized(1.0);
      value[ID::gain1]->setFromNormalized(1.0);
      value[ID::gain2]->setFromNormalized(1.0);
      value[ID::gain3]->setFromNormalized(1.0);
      value[ID::gain4]->setFromNormalized(1.0);
      value[ID::gain5]->setFromNormalized(1.0);
      value[ID::gain6]->setFromNormalized(1.0);
      value[ID::gain7]->setFromNormalized(1.0);
      value[ID::semi0]->setFromInt(0);
      value[ID::semi1]->setFromInt(12);
      value[ID::semi2]->setFromInt(24);
      value[ID::semi3]->setFromInt(36);
      value[ID::semi4]->setFromInt(0);
      value[ID::semi5]->setFromInt(12);
      value[ID::semi6]->setFromInt(24);
      value[ID::semi7]->setFromInt(36);
      value[ID::milli0]->setFromInt(0);
      value[ID::milli1]->setFromInt(0);
      value[ID::milli2]->setFromInt(0);
      value[ID::milli3]->setFromInt(0);
      value[ID::milli4]->setFromInt(333);
      value[ID::milli5]->setFromInt(222);
      value[ID::milli6]->setFromInt(111);
      value[ID::milli7]->setFromInt(0);
      value[ID::overtone0]->setFromNormalized(1.0);
      value[ID::overtone1]->setFromNormalized(0.385714);
      value[ID::overtone2]->setFromNormalized(0.45);
      value[ID::overtone3]->setFromNormalized(0.535714);
      value[ID::overtone4]->setFromNormalized(0.707143);
      value[ID::overtone5]->setFromNormalized(0.878571);
      value[ID::overtone6]->setFromNormalized(0.214286);
      value[ID::overtone7]->setFromNormalized(0.271429);
      value[ID::overtone8]->setFromNormalized(0.421429);
      value[ID::overtone9]->setFromNormalized(0.75);
      value[ID::overtone10]->setFromNormalized(0.314286);
      value[ID::overtone11]->setFromNormalized(0.371429);
      value[ID::overtone12]->setFromNormalized(0.7);
      value[ID::overtone13]->setFromNormalized(0.2);
      value[ID::overtone14]->setFromNormalized(0.242857);
      value[ID::overtone15]->setFromNormalized(0.621429);
      value[ID::chordGain0]->setFromNormalized(1.0);
      value[ID::chordGain1]->setFromNormalized(1.0);
      value[ID::chordGain2]->setFromNormalized(1.0);
      value[ID::chordGain3]->setFromNormalized(1.0);
      value[ID::chordSemi0]->setFromInt(0);
      value[ID::chordSemi1]->setFromInt(2);
      value[ID::chordSemi2]->setFromInt(4);
      value[ID::chordSemi3]->setFromInt(7);
      value[ID::chordMilli0]->setFromInt(0);
      value[ID::chordMilli1]->setFromInt(0);
      value[ID::chordMilli2]->setFromInt(0);
      value[ID::chordMilli3]->setFromInt(0);
      value[ID::chordPan0]->setFromNormalized(0.5);
      value[ID::chordPan1]->setFromNormalized(0.5);
      value[ID::chordPan2]->setFromNormalized(0.5);
      value[ID::chordPan3]->setFromNormalized(0.496);
      value[ID::nVoice]->setFromInt(5);
      value[ID::smoothness]->setFromNormalized(0.1);
      value[ID::pitchBend]->setFromNormalized(0.5);
    } break;

    case presetSomePad: {
      value[ID::bypass]->setFromInt(0);
      value[ID::aliasing]->setFromInt(0);
      value[ID::negativeSemi]->setFromInt(0);
      value[ID::masterOctave]->setFromNormalized(0.41399985551834106);
      value[ID::equalTemperament]->setFromNormalized(0.1864406779661017);
      value[ID::pitchMultiply]->setFromNormalized(0.2640000283718109);
      value[ID::pitchModulo]->setFromNormalized(0.0);
      value[ID::seed]->setFromInt(0);
      value[ID::randomRetrigger]->setFromInt(0);
      value[ID::randomGainAmount]->setFromNormalized(0.0);
      value[ID::randomFrequencyAmount]->setFromNormalized(0.21199992299079898);
      value[ID::chorusMix]->setFromNormalized(0.0);
      value[ID::chorusFrequency]->setFromNormalized(0.5);
      value[ID::chorusDepth]->setFromNormalized(0.0);
      value[ID::chorusDelayTimeRange0]->setFromNormalized(0.0);
      value[ID::chorusDelayTimeRange1]->setFromNormalized(0.0);
      value[ID::chorusDelayTimeRange2]->setFromNormalized(0.0);
      value[ID::chorusMinDelayTime0]->setFromNormalized(0.5);
      value[ID::chorusMinDelayTime1]->setFromNormalized(0.5);
      value[ID::chorusMinDelayTime2]->setFromNormalized(0.5);
      value[ID::chorusPhase]->setFromNormalized(0.0);
      value[ID::chorusOffset]->setFromNormalized(0.0);
      value[ID::chorusFeedback]->setFromNormalized(0.0);
      value[ID::chorusKeyFollow]->setFromInt(1);
      value[ID::gain]->setFromNormalized(0.5);
      value[ID::gainBoost]->setFromNormalized(0.0);
      value[ID::gainA]->setFromNormalized(0.31199994683265686);
      value[ID::gainD]->setFromNormalized(0.4999999999999999);
      value[ID::gainS]->setFromNormalized(0.4999999999999999);
      value[ID::gainR]->setFromNormalized(0.6880002021789551);
      value[ID::gainEnvelopeCurve]->setFromNormalized(0.7599999904632568);
      value[ID::lowShelfPitch]->setFromNormalized(0.0);
      value[ID::lowShelfGain]->setFromNormalized(0.5);
      value[ID::highShelfPitch]->setFromNormalized(0.5559998750686646);
      value[ID::highShelfGain]->setFromNormalized(0.3119998872280121);
      value[ID::gain0]->setFromNormalized(1.0);
      value[ID::gain1]->setFromNormalized(1.0);
      value[ID::gain2]->setFromNormalized(1.0);
      value[ID::gain3]->setFromNormalized(1.0);
      value[ID::gain4]->setFromNormalized(0.6439999938011169);
      value[ID::gain5]->setFromNormalized(1.0);
      value[ID::gain6]->setFromNormalized(0.9540003538131714);
      value[ID::gain7]->setFromNormalized(0.8139999508857727);
      value[ID::semi0]->setFromInt(0);
      value[ID::semi1]->setFromInt(0);
      value[ID::semi2]->setFromInt(12);
      value[ID::semi3]->setFromInt(7);
      value[ID::semi4]->setFromInt(26);
      value[ID::semi5]->setFromInt(12);
      value[ID::semi6]->setFromInt(0);
      value[ID::semi7]->setFromInt(16);
      value[ID::milli0]->setFromInt(0);
      value[ID::milli1]->setFromInt(114);
      value[ID::milli2]->setFromInt(0);
      value[ID::milli3]->setFromInt(0);
      value[ID::milli4]->setFromInt(462);
      value[ID::milli5]->setFromInt(0);
      value[ID::milli6]->setFromInt(352);
      value[ID::milli7]->setFromInt(192);
      value[ID::overtone0]->setFromNormalized(0.6357142857142857);
      value[ID::overtone1]->setFromNormalized(0.85);
      value[ID::overtone2]->setFromNormalized(0.9785714285714284);
      value[ID::overtone3]->setFromNormalized(0.7285714285714286);
      value[ID::overtone4]->setFromNormalized(0.42857142857142866);
      value[ID::overtone5]->setFromNormalized(0.3571428571428571);
      value[ID::overtone6]->setFromNormalized(0.3214285714285713);
      value[ID::overtone7]->setFromNormalized(0.3928571428571428);
      value[ID::overtone8]->setFromNormalized(0.5642857142857143);
      value[ID::overtone9]->setFromNormalized(0.7928571428571428);
      value[ID::overtone10]->setFromNormalized(0.8928571428571429);
      value[ID::overtone11]->setFromNormalized(0.5142857142857142);
      value[ID::overtone12]->setFromNormalized(0.33571428571428574);
      value[ID::overtone13]->setFromNormalized(0.19999999999999996);
      value[ID::overtone14]->setFromNormalized(0.16428571428571415);
      value[ID::overtone15]->setFromNormalized(0.13571428571428568);
      value[ID::chordGain0]->setFromNormalized(1.0);
      value[ID::chordGain1]->setFromNormalized(1.0);
      value[ID::chordGain2]->setFromNormalized(1.0);
      value[ID::chordGain3]->setFromNormalized(1.0);
      value[ID::chordSemi0]->setFromInt(0);
      value[ID::chordSemi1]->setFromInt(0);
      value[ID::chordSemi2]->setFromInt(0);
      value[ID::chordSemi3]->setFromInt(0);
      value[ID::chordMilli0]->setFromInt(0);
      value[ID::chordMilli1]->setFromInt(194);
      value[ID::chordMilli2]->setFromInt(286);
      value[ID::chordMilli3]->setFromInt(398);
      value[ID::chordPan0]->setFromNormalized(0.0);
      value[ID::chordPan1]->setFromNormalized(0.5);
      value[ID::chordPan2]->setFromNormalized(0.5);
      value[ID::chordPan3]->setFromNormalized(1.0);
      value[ID::nVoice]->setFromInt(5);
      value[ID::smoothness]->setFromNormalized(0.10000000000000003);
      value[ID::pitchBend]->setFromNormalized(0.5);
    } break;

    case presetSparseOvertone: {
      value[ID::bypass]->setFromInt(0);
      value[ID::aliasing]->setFromInt(0);
      value[ID::negativeSemi]->setFromInt(0);
      value[ID::masterOctave]->setFromNormalized(0.375);
      value[ID::equalTemperament]->setFromNormalized(0.186441);
      value[ID::pitchMultiply]->setFromNormalized(0.458);
      value[ID::pitchModulo]->setFromNormalized(0.0);
      value[ID::seed]->setFromInt(0);
      value[ID::randomRetrigger]->setFromInt(0);
      value[ID::randomGainAmount]->setFromNormalized(0.0);
      value[ID::randomFrequencyAmount]->setFromNormalized(0.0);
      value[ID::chorusMix]->setFromNormalized(0.0);
      value[ID::chorusFrequency]->setFromNormalized(0.5);
      value[ID::chorusDepth]->setFromNormalized(0.0);
      value[ID::chorusDelayTimeRange0]->setFromNormalized(0.0);
      value[ID::chorusDelayTimeRange1]->setFromNormalized(0.0);
      value[ID::chorusDelayTimeRange2]->setFromNormalized(0.0);
      value[ID::chorusMinDelayTime0]->setFromNormalized(0.5);
      value[ID::chorusMinDelayTime1]->setFromNormalized(0.5);
      value[ID::chorusMinDelayTime2]->setFromNormalized(0.5);
      value[ID::chorusPhase]->setFromNormalized(0.0);
      value[ID::chorusOffset]->setFromNormalized(0.0);
      value[ID::chorusFeedback]->setFromNormalized(0.0);
      value[ID::chorusKeyFollow]->setFromInt(1);
      value[ID::gain]->setFromNormalized(0.5);
      value[ID::gainBoost]->setFromNormalized(0.24);
      value[ID::gainA]->setFromNormalized(0.0);
      value[ID::gainD]->setFromNormalized(0.5);
      value[ID::gainS]->setFromNormalized(0.5);
      value[ID::gainR]->setFromNormalized(0.156);
      value[ID::gainEnvelopeCurve]->setFromNormalized(0.0);
      value[ID::lowShelfPitch]->setFromNormalized(0.59);
      value[ID::lowShelfGain]->setFromNormalized(0.162);
      value[ID::highShelfPitch]->setFromNormalized(0.0);
      value[ID::highShelfGain]->setFromNormalized(0.5);
      value[ID::gain0]->setFromNormalized(1.0);
      value[ID::gain1]->setFromNormalized(1.0);
      value[ID::gain2]->setFromNormalized(1.0);
      value[ID::gain3]->setFromNormalized(1.0);
      value[ID::gain4]->setFromNormalized(1.0);
      value[ID::gain5]->setFromNormalized(1.0);
      value[ID::gain6]->setFromNormalized(1.0);
      value[ID::gain7]->setFromNormalized(1.0);
      value[ID::semi0]->setFromInt(0);
      value[ID::semi1]->setFromInt(22);
      value[ID::semi2]->setFromInt(34);
      value[ID::semi3]->setFromInt(19);
      value[ID::semi4]->setFromInt(28);
      value[ID::semi5]->setFromInt(5);
      value[ID::semi6]->setFromInt(9);
      value[ID::semi7]->setFromInt(10);
      value[ID::milli0]->setFromInt(0);
      value[ID::milli1]->setFromInt(0);
      value[ID::milli2]->setFromInt(0);
      value[ID::milli3]->setFromInt(0);
      value[ID::milli4]->setFromInt(0);
      value[ID::milli5]->setFromInt(0);
      value[ID::milli6]->setFromInt(0);
      value[ID::milli7]->setFromInt(0);
      value[ID::overtone0]->setFromNormalized(0.807143);
      value[ID::overtone1]->setFromNormalized(0.0);
      value[ID::overtone2]->setFromNormalized(0.0);
      value[ID::overtone3]->setFromNormalized(1.0);
      value[ID::overtone4]->setFromNormalized(0.0);
      value[ID::overtone5]->setFromNormalized(0.0);
      value[ID::overtone6]->setFromNormalized(0.0);
      value[ID::overtone7]->setFromNormalized(0.0);
      value[ID::overtone8]->setFromNormalized(0.0);
      value[ID::overtone9]->setFromNormalized(0.0);
      value[ID::overtone10]->setFromNormalized(0.0);
      value[ID::overtone11]->setFromNormalized(0.785714);
      value[ID::overtone12]->setFromNormalized(0.0);
      value[ID::overtone13]->setFromNormalized(0.0);
      value[ID::overtone14]->setFromNormalized(0.0);
      value[ID::overtone15]->setFromNormalized(0.542858);
      value[ID::chordGain0]->setFromNormalized(1.0);
      value[ID::chordGain1]->setFromNormalized(1.0);
      value[ID::chordGain2]->setFromNormalized(1.0);
      value[ID::chordGain3]->setFromNormalized(1.0);
      value[ID::chordSemi0]->setFromInt(0);
      value[ID::chordSemi1]->setFromInt(7);
      value[ID::chordSemi2]->setFromInt(14);
      value[ID::chordSemi3]->setFromInt(21);
      value[ID::chordMilli0]->setFromInt(0);
      value[ID::chordMilli1]->setFromInt(0);
      value[ID::chordMilli2]->setFromInt(0);
      value[ID::chordMilli3]->setFromInt(0);
      value[ID::chordPan0]->setFromNormalized(0.5);
      value[ID::chordPan1]->setFromNormalized(0.5);
      value[ID::chordPan2]->setFromNormalized(0.5);
      value[ID::chordPan3]->setFromNormalized(0.5);
      value[ID::nVoice]->setFromInt(5);
      value[ID::smoothness]->setFromNormalized(0.1);
      value[ID::pitchBend]->setFromNormalized(0.5);
    } break;

    case presetThin: {
      value[ID::bypass]->setFromInt(0);
      value[ID::aliasing]->setFromInt(0);
      value[ID::negativeSemi]->setFromInt(0);
      value[ID::masterOctave]->setFromNormalized(0.5);
      value[ID::equalTemperament]->setFromNormalized(0.1864406779661017);
      value[ID::pitchMultiply]->setFromNormalized(0.25);
      value[ID::pitchModulo]->setFromNormalized(0.0);
      value[ID::seed]->setFromInt(0);
      value[ID::randomRetrigger]->setFromInt(0);
      value[ID::randomGainAmount]->setFromNormalized(0.0);
      value[ID::randomFrequencyAmount]->setFromNormalized(0.08400000631809236);
      value[ID::chorusMix]->setFromNormalized(0.0);
      value[ID::chorusFrequency]->setFromNormalized(0.5);
      value[ID::chorusDepth]->setFromNormalized(0.0);
      value[ID::chorusDelayTimeRange0]->setFromNormalized(0.0);
      value[ID::chorusDelayTimeRange1]->setFromNormalized(0.0);
      value[ID::chorusDelayTimeRange2]->setFromNormalized(0.0);
      value[ID::chorusMinDelayTime0]->setFromNormalized(0.5);
      value[ID::chorusMinDelayTime1]->setFromNormalized(0.5);
      value[ID::chorusMinDelayTime2]->setFromNormalized(0.5);
      value[ID::chorusPhase]->setFromNormalized(0.0);
      value[ID::chorusOffset]->setFromNormalized(0.0);
      value[ID::chorusFeedback]->setFromNormalized(0.0);
      value[ID::chorusKeyFollow]->setFromInt(1);
      value[ID::gain]->setFromNormalized(0.5);
      value[ID::gainBoost]->setFromNormalized(0.0);
      value[ID::gainA]->setFromNormalized(0.21200001239776614);
      value[ID::gainD]->setFromNormalized(0.7720000147819519);
      value[ID::gainS]->setFromNormalized(0.8639999032020569);
      value[ID::gainR]->setFromNormalized(0.41999995708465576);
      value[ID::gainEnvelopeCurve]->setFromNormalized(0.06000000983476639);
      value[ID::lowShelfPitch]->setFromNormalized(0.0);
      value[ID::lowShelfGain]->setFromNormalized(0.5);
      value[ID::highShelfPitch]->setFromNormalized(0.0);
      value[ID::highShelfGain]->setFromNormalized(0.5);
      value[ID::gain0]->setFromNormalized(1.0);
      value[ID::gain1]->setFromNormalized(1.0);
      value[ID::gain2]->setFromNormalized(1.0);
      value[ID::gain3]->setFromNormalized(1.0);
      value[ID::gain4]->setFromNormalized(1.0);
      value[ID::gain5]->setFromNormalized(1.0);
      value[ID::gain6]->setFromNormalized(1.0);
      value[ID::gain7]->setFromNormalized(1.0);
      value[ID::semi0]->setFromInt(0);
      value[ID::semi1]->setFromInt(0);
      value[ID::semi2]->setFromInt(0);
      value[ID::semi3]->setFromInt(28);
      value[ID::semi4]->setFromInt(3);
      value[ID::semi5]->setFromInt(3);
      value[ID::semi6]->setFromInt(7);
      value[ID::semi7]->setFromInt(8);
      value[ID::milli0]->setFromInt(0);
      value[ID::milli1]->setFromInt(520);
      value[ID::milli2]->setFromInt(0);
      value[ID::milli3]->setFromInt(0);
      value[ID::milli4]->setFromInt(438);
      value[ID::milli5]->setFromInt(0);
      value[ID::milli6]->setFromInt(0);
      value[ID::milli7]->setFromInt(0);
      value[ID::overtone0]->setFromNormalized(0.15714285714285703);
      value[ID::overtone1]->setFromNormalized(0.15714285714285703);
      value[ID::overtone2]->setFromNormalized(0.17142857142857126);
      value[ID::overtone3]->setFromNormalized(0.18571428571428572);
      value[ID::overtone4]->setFromNormalized(0.21428571428571433);
      value[ID::overtone5]->setFromNormalized(0.23571428571428577);
      value[ID::overtone6]->setFromNormalized(0.2928571428571427);
      value[ID::overtone7]->setFromNormalized(0.35);
      value[ID::overtone8]->setFromNormalized(0.37857142857142856);
      value[ID::overtone9]->setFromNormalized(0.4214285714285714);
      value[ID::overtone10]->setFromNormalized(0.5);
      value[ID::overtone11]->setFromNormalized(0.5857142857142856);
      value[ID::overtone12]->setFromNormalized(0.7142857142857143);
      value[ID::overtone13]->setFromNormalized(0.85);
      value[ID::overtone14]->setFromNormalized(0.9357142857142857);
      value[ID::overtone15]->setFromNormalized(0.19999999999999996);
      value[ID::chordGain0]->setFromNormalized(1.0);
      value[ID::chordGain1]->setFromNormalized(1.0);
      value[ID::chordGain2]->setFromNormalized(1.0);
      value[ID::chordGain3]->setFromNormalized(1.0);
      value[ID::chordSemi0]->setFromInt(0);
      value[ID::chordSemi1]->setFromInt(0);
      value[ID::chordSemi2]->setFromInt(0);
      value[ID::chordSemi3]->setFromInt(1);
      value[ID::chordMilli0]->setFromInt(0);
      value[ID::chordMilli1]->setFromInt(1);
      value[ID::chordMilli2]->setFromInt(2);
      value[ID::chordMilli3]->setFromInt(0);
      value[ID::chordPan0]->setFromNormalized(0.0);
      value[ID::chordPan1]->setFromNormalized(0.42399996519088745);
      value[ID::chordPan2]->setFromNormalized(0.5800001621246338);
      value[ID::chordPan3]->setFromNormalized(1.0);
      value[ID::nVoice]->setFromInt(5);
      value[ID::smoothness]->setFromNormalized(0.10000000000000003);
      value[ID::pitchBend]->setFromNormalized(0.5);
    } break;

    case presetThisSynthIsNotGoodForBass: {
      value[ID::bypass]->setFromInt(0);
      value[ID::aliasing]->setFromInt(0);
      value[ID::negativeSemi]->setFromInt(0);
      value[ID::masterOctave]->setFromNormalized(0.308);
      value[ID::equalTemperament]->setFromNormalized(0.186441);
      value[ID::pitchMultiply]->setFromNormalized(0.294);
      value[ID::pitchModulo]->setFromNormalized(0.0);
      value[ID::seed]->setFromInt(0);
      value[ID::randomRetrigger]->setFromInt(0);
      value[ID::randomGainAmount]->setFromNormalized(0.0);
      value[ID::randomFrequencyAmount]->setFromNormalized(0.02);
      value[ID::chorusMix]->setFromNormalized(1.0);
      value[ID::chorusFrequency]->setFromNormalized(0.5);
      value[ID::chorusDepth]->setFromNormalized(0.0);
      value[ID::chorusDelayTimeRange0]->setFromNormalized(0.0);
      value[ID::chorusDelayTimeRange1]->setFromNormalized(0.0);
      value[ID::chorusDelayTimeRange2]->setFromNormalized(0.0);
      value[ID::chorusMinDelayTime0]->setFromNormalized(0.5);
      value[ID::chorusMinDelayTime1]->setFromNormalized(0.276);
      value[ID::chorusMinDelayTime2]->setFromNormalized(0.392);
      value[ID::chorusPhase]->setFromNormalized(0.0);
      value[ID::chorusOffset]->setFromNormalized(0.0);
      value[ID::chorusFeedback]->setFromNormalized(0.82);
      value[ID::chorusKeyFollow]->setFromInt(1);
      value[ID::gain]->setFromNormalized(0.24);
      value[ID::gainBoost]->setFromNormalized(0.0);
      value[ID::gainA]->setFromNormalized(0.0);
      value[ID::gainD]->setFromNormalized(0.712);
      value[ID::gainS]->setFromNormalized(0.728);
      value[ID::gainR]->setFromNormalized(0.4);
      value[ID::gainEnvelopeCurve]->setFromNormalized(0.0);
      value[ID::lowShelfPitch]->setFromNormalized(0.564);
      value[ID::lowShelfGain]->setFromNormalized(0.784);
      value[ID::highShelfPitch]->setFromNormalized(0.782);
      value[ID::highShelfGain]->setFromNormalized(0.306);
      value[ID::gain0]->setFromNormalized(1.0);
      value[ID::gain1]->setFromNormalized(0.78);
      value[ID::gain2]->setFromNormalized(0.768);
      value[ID::gain3]->setFromNormalized(0.734);
      value[ID::gain4]->setFromNormalized(0.58);
      value[ID::gain5]->setFromNormalized(1.0);
      value[ID::gain6]->setFromNormalized(1.0);
      value[ID::gain7]->setFromNormalized(1.0);
      value[ID::semi0]->setFromInt(0);
      value[ID::semi1]->setFromInt(12);
      value[ID::semi2]->setFromInt(7);
      value[ID::semi3]->setFromInt(24);
      value[ID::semi4]->setFromInt(19);
      value[ID::semi5]->setFromInt(0);
      value[ID::semi6]->setFromInt(0);
      value[ID::semi7]->setFromInt(0);
      value[ID::milli0]->setFromInt(0);
      value[ID::milli1]->setFromInt(184);
      value[ID::milli2]->setFromInt(194);
      value[ID::milli3]->setFromInt(0);
      value[ID::milli4]->setFromInt(434);
      value[ID::milli5]->setFromInt(0);
      value[ID::milli6]->setFromInt(0);
      value[ID::milli7]->setFromInt(0);
      value[ID::overtone0]->setFromNormalized(1.0);
      value[ID::overtone1]->setFromNormalized(0.685714);
      value[ID::overtone2]->setFromNormalized(0.907143);
      value[ID::overtone3]->setFromNormalized(0.514286);
      value[ID::overtone4]->setFromNormalized(0.307143);
      value[ID::overtone5]->setFromNormalized(0.185714);
      value[ID::overtone6]->setFromNormalized(0.071429);
      value[ID::overtone7]->setFromNormalized(0.042857);
      value[ID::overtone8]->setFromNormalized(0.057143);
      value[ID::overtone9]->setFromNormalized(0.135714);
      value[ID::overtone10]->setFromNormalized(0.621429);
      value[ID::overtone11]->setFromNormalized(0.55);
      value[ID::overtone12]->setFromNormalized(0.457143);
      value[ID::overtone13]->setFromNormalized(0.385714);
      value[ID::overtone14]->setFromNormalized(0.357143);
      value[ID::overtone15]->setFromNormalized(0.314286);
      value[ID::chordGain0]->setFromNormalized(1.0);
      value[ID::chordGain1]->setFromNormalized(1.0);
      value[ID::chordGain2]->setFromNormalized(0.954);
      value[ID::chordGain3]->setFromNormalized(1.0);
      value[ID::chordSemi0]->setFromInt(0);
      value[ID::chordSemi1]->setFromInt(12);
      value[ID::chordSemi2]->setFromInt(0);
      value[ID::chordSemi3]->setFromInt(6);
      value[ID::chordMilli0]->setFromInt(0);
      value[ID::chordMilli1]->setFromInt(198);
      value[ID::chordMilli2]->setFromInt(0);
      value[ID::chordMilli3]->setFromInt(396);
      value[ID::chordPan0]->setFromNormalized(0.5);
      value[ID::chordPan1]->setFromNormalized(0.5);
      value[ID::chordPan2]->setFromNormalized(0.5);
      value[ID::chordPan3]->setFromNormalized(0.5);
      value[ID::nVoice]->setFromInt(5);
      value[ID::smoothness]->setFromNormalized(0.1);
      value[ID::pitchBend]->setFromNormalized(0.5);
    } break;

    case presetTotallyRandom: {
      value[ID::bypass]->setFromInt(0);
      value[ID::aliasing]->setFromInt(0);
      value[ID::negativeSemi]->setFromInt(0);
      value[ID::masterOctave]->setFromNormalized(0.264);
      value[ID::equalTemperament]->setFromNormalized(0.186441);
      value[ID::pitchMultiply]->setFromNormalized(0.25);
      value[ID::pitchModulo]->setFromNormalized(1.0);
      value[ID::seed]->setFromInt(5392197);
      value[ID::randomRetrigger]->setFromInt(1);
      value[ID::randomGainAmount]->setFromNormalized(1.0);
      value[ID::randomFrequencyAmount]->setFromNormalized(1.0);
      value[ID::chorusMix]->setFromNormalized(0.0);
      value[ID::chorusFrequency]->setFromNormalized(0.5);
      value[ID::chorusDepth]->setFromNormalized(0.0);
      value[ID::chorusDelayTimeRange0]->setFromNormalized(0.0);
      value[ID::chorusDelayTimeRange1]->setFromNormalized(0.0);
      value[ID::chorusDelayTimeRange2]->setFromNormalized(0.0);
      value[ID::chorusMinDelayTime0]->setFromNormalized(0.5);
      value[ID::chorusMinDelayTime1]->setFromNormalized(0.756);
      value[ID::chorusMinDelayTime2]->setFromNormalized(0.564);
      value[ID::chorusPhase]->setFromNormalized(0.0);
      value[ID::chorusOffset]->setFromNormalized(0.0);
      value[ID::chorusFeedback]->setFromNormalized(0.928);
      value[ID::chorusKeyFollow]->setFromInt(1);
      value[ID::gain]->setFromNormalized(0.5);
      value[ID::gainBoost]->setFromNormalized(0.0);
      value[ID::gainA]->setFromNormalized(0.0);
      value[ID::gainD]->setFromNormalized(0.564);
      value[ID::gainS]->setFromNormalized(0.0);
      value[ID::gainR]->setFromNormalized(0.576144);
      value[ID::gainEnvelopeCurve]->setFromNormalized(0.0);
      value[ID::lowShelfPitch]->setFromNormalized(0.0);
      value[ID::lowShelfGain]->setFromNormalized(0.5);
      value[ID::highShelfPitch]->setFromNormalized(0.0);
      value[ID::highShelfGain]->setFromNormalized(0.5);
      value[ID::gain0]->setFromNormalized(1.0);
      value[ID::gain1]->setFromNormalized(1.0);
      value[ID::gain2]->setFromNormalized(1.0);
      value[ID::gain3]->setFromNormalized(1.0);
      value[ID::gain4]->setFromNormalized(1.0);
      value[ID::gain5]->setFromNormalized(1.0);
      value[ID::gain6]->setFromNormalized(1.0);
      value[ID::gain7]->setFromNormalized(1.0);
      value[ID::semi0]->setFromInt(0);
      value[ID::semi1]->setFromInt(0);
      value[ID::semi2]->setFromInt(0);
      value[ID::semi3]->setFromInt(0);
      value[ID::semi4]->setFromInt(0);
      value[ID::semi5]->setFromInt(0);
      value[ID::semi6]->setFromInt(0);
      value[ID::semi7]->setFromInt(0);
      value[ID::milli0]->setFromInt(0);
      value[ID::milli1]->setFromInt(0);
      value[ID::milli2]->setFromInt(0);
      value[ID::milli3]->setFromInt(0);
      value[ID::milli4]->setFromInt(0);
      value[ID::milli5]->setFromInt(0);
      value[ID::milli6]->setFromInt(0);
      value[ID::milli7]->setFromInt(0);
      value[ID::overtone0]->setFromNormalized(1.0);
      value[ID::overtone1]->setFromNormalized(0.964286);
      value[ID::overtone2]->setFromNormalized(0.928571);
      value[ID::overtone3]->setFromNormalized(0.892857);
      value[ID::overtone4]->setFromNormalized(0.864286);
      value[ID::overtone5]->setFromNormalized(0.842857);
      value[ID::overtone6]->setFromNormalized(0.814286);
      value[ID::overtone7]->setFromNormalized(0.785714);
      value[ID::overtone8]->setFromNormalized(0.757143);
      value[ID::overtone9]->setFromNormalized(0.728571);
      value[ID::overtone10]->setFromNormalized(0.692857);
      value[ID::overtone11]->setFromNormalized(0.678571);
      value[ID::overtone12]->setFromNormalized(0.65);
      value[ID::overtone13]->setFromNormalized(0.621429);
      value[ID::overtone14]->setFromNormalized(0.592857);
      value[ID::overtone15]->setFromNormalized(0.564286);
      value[ID::chordGain0]->setFromNormalized(1.0);
      value[ID::chordGain1]->setFromNormalized(1.0);
      value[ID::chordGain2]->setFromNormalized(1.0);
      value[ID::chordGain3]->setFromNormalized(1.0);
      value[ID::chordSemi0]->setFromInt(38);
      value[ID::chordSemi1]->setFromInt(42);
      value[ID::chordSemi2]->setFromInt(36);
      value[ID::chordSemi3]->setFromInt(48);
      value[ID::chordMilli0]->setFromInt(0);
      value[ID::chordMilli1]->setFromInt(0);
      value[ID::chordMilli2]->setFromInt(0);
      value[ID::chordMilli3]->setFromInt(0);
      value[ID::chordPan0]->setFromNormalized(1.0);
      value[ID::chordPan1]->setFromNormalized(0.0);
      value[ID::chordPan2]->setFromNormalized(0.5);
      value[ID::chordPan3]->setFromNormalized(0.5);
      value[ID::nVoice]->setFromInt(5);
      value[ID::smoothness]->setFromNormalized(0.1);
      value[ID::pitchBend]->setFromNormalized(0.5);
    } break;

    case presetWeirdPan: {
      value[ID::bypass]->setFromInt(0);
      value[ID::aliasing]->setFromInt(0);
      value[ID::negativeSemi]->setFromInt(0);
      value[ID::masterOctave]->setFromNormalized(0.4900000989437103);
      value[ID::equalTemperament]->setFromNormalized(0.194440558552742);
      value[ID::pitchMultiply]->setFromNormalized(0.25);
      value[ID::pitchModulo]->setFromNormalized(0.0);
      value[ID::seed]->setFromInt(0);
      value[ID::randomRetrigger]->setFromInt(0);
      value[ID::randomGainAmount]->setFromNormalized(0.36800000071525574);
      value[ID::randomFrequencyAmount]->setFromNormalized(0.13999992609024048);
      value[ID::chorusMix]->setFromNormalized(0.2239997535943985);
      value[ID::chorusFrequency]->setFromNormalized(0.5399999618530275);
      value[ID::chorusDepth]->setFromNormalized(0.43199974298477173);
      value[ID::chorusDelayTimeRange0]->setFromNormalized(0.0);
      value[ID::chorusDelayTimeRange1]->setFromNormalized(0.6119999885559082);
      value[ID::chorusDelayTimeRange2]->setFromNormalized(0.0);
      value[ID::chorusMinDelayTime0]->setFromNormalized(0.5);
      value[ID::chorusMinDelayTime1]->setFromNormalized(0.5);
      value[ID::chorusMinDelayTime2]->setFromNormalized(0.5);
      value[ID::chorusPhase]->setFromNormalized(0.0);
      value[ID::chorusOffset]->setFromNormalized(0.0);
      value[ID::chorusFeedback]->setFromNormalized(0.1960000842809677);
      value[ID::chorusKeyFollow]->setFromInt(0);
      value[ID::gain]->setFromNormalized(0.7560002207756042);
      value[ID::gainBoost]->setFromNormalized(0.0);
      value[ID::gainA]->setFromNormalized(0.0);
      value[ID::gainD]->setFromNormalized(0.3879999816417694);
      value[ID::gainS]->setFromNormalized(0.7799999117851257);
      value[ID::gainR]->setFromNormalized(0.5839998722076416);
      value[ID::gainEnvelopeCurve]->setFromNormalized(0.0);
      value[ID::lowShelfPitch]->setFromNormalized(0.0);
      value[ID::lowShelfGain]->setFromNormalized(0.5);
      value[ID::highShelfPitch]->setFromNormalized(0.0);
      value[ID::highShelfGain]->setFromNormalized(0.5);
      value[ID::gain0]->setFromNormalized(0.8040000796318054);
      value[ID::gain1]->setFromNormalized(1.0);
      value[ID::gain2]->setFromNormalized(0.9040000438690186);
      value[ID::gain3]->setFromNormalized(0.9259999394416809);
      value[ID::gain4]->setFromNormalized(0.9059999585151672);
      value[ID::gain5]->setFromNormalized(0.9340000152587891);
      value[ID::gain6]->setFromNormalized(0.9399999380111694);
      value[ID::gain7]->setFromNormalized(0.9419999718666077);
      value[ID::semi0]->setFromInt(0);
      value[ID::semi1]->setFromInt(9);
      value[ID::semi2]->setFromInt(9);
      value[ID::semi3]->setFromInt(11);
      value[ID::semi4]->setFromInt(14);
      value[ID::semi5]->setFromInt(19);
      value[ID::semi6]->setFromInt(0);
      value[ID::semi7]->setFromInt(0);
      value[ID::milli0]->setFromInt(0);
      value[ID::milli1]->setFromInt(0);
      value[ID::milli2]->setFromInt(64);
      value[ID::milli3]->setFromInt(0);
      value[ID::milli4]->setFromInt(0);
      value[ID::milli5]->setFromInt(0);
      value[ID::milli6]->setFromInt(148);
      value[ID::milli7]->setFromInt(70);
      value[ID::overtone0]->setFromNormalized(1.0);
      value[ID::overtone1]->setFromNormalized(0.07142857142857129);
      value[ID::overtone2]->setFromNormalized(0.07857142857142863);
      value[ID::overtone3]->setFromNormalized(0.5071428571428571);
      value[ID::overtone4]->setFromNormalized(0.1499999999999999);
      value[ID::overtone5]->setFromNormalized(0.8642857142857142);
      value[ID::overtone6]->setFromNormalized(0.11428571428571421);
      value[ID::overtone7]->setFromNormalized(0.11428571428571421);
      value[ID::overtone8]->setFromNormalized(0.16428571428571415);
      value[ID::overtone9]->setFromNormalized(0.7928571428571428);
      value[ID::overtone10]->setFromNormalized(0.15714285714285703);
      value[ID::overtone11]->setFromNormalized(0.19999999999999996);
      value[ID::overtone12]->setFromNormalized(0.2071428571428572);
      value[ID::overtone13]->setFromNormalized(0.19999999999999996);
      value[ID::overtone14]->setFromNormalized(0.3928571428571428);
      value[ID::overtone15]->setFromNormalized(0.55);
      value[ID::chordGain0]->setFromNormalized(1.0);
      value[ID::chordGain1]->setFromNormalized(1.0);
      value[ID::chordGain2]->setFromNormalized(1.0);
      value[ID::chordGain3]->setFromNormalized(1.0);
      value[ID::chordSemi0]->setFromInt(0);
      value[ID::chordSemi1]->setFromInt(7);
      value[ID::chordSemi2]->setFromInt(24);
      value[ID::chordSemi3]->setFromInt(47);
      value[ID::chordMilli0]->setFromInt(0);
      value[ID::chordMilli1]->setFromInt(0);
      value[ID::chordMilli2]->setFromInt(528);
      value[ID::chordMilli3]->setFromInt(290);
      value[ID::chordPan0]->setFromNormalized(0.3879999816417694);
      value[ID::chordPan1]->setFromNormalized(0.30399999022483826);
      value[ID::chordPan2]->setFromNormalized(0.5);
      value[ID::chordPan3]->setFromNormalized(0.8800002336502075);
      value[ID::nVoice]->setFromInt(5);
      value[ID::smoothness]->setFromNormalized(0.10000000000000003);
      value[ID::pitchBend]->setFromNormalized(0.5);
    } break;
  }
}
#endif
