// (c) 2019-2020 Takamitsu Endo
//
// This file is part of SyncSawSynth.
//
// SyncSawSynth is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// SyncSawSynth is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with SyncSawSynth.  If not, see <https://www.gnu.org/licenses/>.

#include "parameter.hpp"
#include "../common/dsp/constants.hpp"

using namespace SomeDSP;

IntScale<double> Scales::boolScale(1);
LinearScale<double> Scales::defaultScale(0.0, 1.0);

LogScale<double> Scales::oscGain(0.0, 1.0, 0.75, 0.5);
LinearScale<double> Scales::semi(-24.0, 24.0);
LinearScale<double> Scales::cent(-100.0, 100.0);
LinearScale<double> Scales::sync(0.01, 16.0);
IntScale<double> Scales::syncType(3);
IntScale<double> Scales::ptrOrder(16);

LogScale<double> Scales::fmToSync(0.0, 1.0, 0.5, 0.1);
LogScale<double> Scales::fmToFreq(0.0, 1.0, 0.5, 0.1);

LogScale<double> Scales::gain(0.0, 4.0, 0.75, 1.0);

LogScale<double> Scales::envelopeA(0.0001, 16.0, 0.5, 1.0);
LogScale<double> Scales::envelopeD(0.0001, 16.0, 0.5, 1.0);
LogScale<double> Scales::envelopeS(0.0, 0.9995, 0.5, 0.3);
LogScale<double> Scales::envelopeR(0.001, 16.0, 0.5, 2.0);

LogScale<double> Scales::filterCutoff(20.0, 20000.0, 0.5, 800.0);
LogScale<double> Scales::filterResonance(0.001, 1.0, 0.5, 0.3);
LogScale<double> Scales::filterFeedback(0.0, 1.0, 0.5, 0.3);
LogScale<double> Scales::filterSaturation(0.01, 8.0, 0.3, 0.5);
IntScale<double> Scales::filterType(4);
IntScale<double> Scales::filterShaper(3);
LinearScale<double> Scales::filterCutoffAmount(-1.0, 1.0);
LinearScale<double> Scales::filterKeyMod(-1.0, 1.0);

LogScale<double> Scales::modEnvelopeA(0.0, 4.0, 0.5, 0.5);
LogScale<double> Scales::modEnvelopeCurve(1.0, 96.0, 0.5, 8.0);
LogScale<double> Scales::modLFOFrequency(0.01, 20.0, 0.5, 1.0);
LogScale<double> Scales::modToFreq(0.0, 16.0, 0.5, 1.0);
LogScale<double> Scales::modToSync(0.0, 16.0, 0.5, 1.0);

IntScale<double> Scales::nVoice(5);

// Generated from preset dump. This works, but hard coding preset data is seriously bad.
void GlobalParameter::loadProgram(uint32_t index)
{
  using ID = ParameterID::ID;

  switch (index) {
    default:
      resetParameter();
      break;

    case presetDefault: {
      value[ID::bypass]->setFromInt(0);
      value[ID::osc1Gain]->setFromNormalized(1.0);
      value[ID::osc1Semi]->setFromNormalized(0.5);
      value[ID::osc1Cent]->setFromNormalized(0.5);
      value[ID::osc1Sync]->setFromNormalized(0.06249999999999999);
      value[ID::osc1SyncType]->setFromInt(0);
      value[ID::osc1PTROrder]->setFromInt(16);
      value[ID::osc1Phase]->setFromNormalized(0.0);
      value[ID::osc1PhaseLock]->setFromInt(0);
      value[ID::osc2Gain]->setFromNormalized(1.0);
      value[ID::osc2Semi]->setFromNormalized(0.5);
      value[ID::osc2Cent]->setFromNormalized(0.5);
      value[ID::osc2Sync]->setFromNormalized(0.06249999999999999);
      value[ID::osc2SyncType]->setFromInt(0);
      value[ID::osc2PTROrder]->setFromInt(16);
      value[ID::osc2Invert]->setFromInt(0);
      value[ID::osc2Phase]->setFromNormalized(0.0);
      value[ID::osc2PhaseLock]->setFromInt(0);
      value[ID::fmOsc1ToSync1]->setFromNormalized(0.0);
      value[ID::fmOsc1ToFreq2]->setFromNormalized(0.0);
      value[ID::fmOsc2ToSync1]->setFromNormalized(0.0);
      value[ID::gain]->setFromNormalized(0.5);
      value[ID::gainA]->setFromNormalized(0.05000000000000001);
      value[ID::gainD]->setFromNormalized(0.5);
      value[ID::gainS]->setFromNormalized(0.49999999999999994);
      value[ID::gainR]->setFromNormalized(0.09999999999999999);
      value[ID::gainEnvelopeCurve]->setFromNormalized(0.0);
      value[ID::filterCutoff]->setFromNormalized(1.0);
      value[ID::filterResonance]->setFromNormalized(0.49999999999999994);
      value[ID::filterFeedback]->setFromNormalized(0.0);
      value[ID::filterSaturation]->setFromNormalized(0.3);
      value[ID::filterDirty]->setFromInt(0);
      value[ID::filterType]->setFromInt(0);
      value[ID::filterShaper]->setFromInt(1);
      value[ID::filterA]->setFromNormalized(0.0);
      value[ID::filterD]->setFromNormalized(0.5);
      value[ID::filterS]->setFromNormalized(0.0);
      value[ID::filterR]->setFromNormalized(0.5);
      value[ID::filterCutoffAmount]->setFromNormalized(0.5);
      value[ID::filterResonanceAmount]->setFromNormalized(0.0);
      value[ID::filterKeyToCutoff]->setFromNormalized(0.5);
      value[ID::filterKeyToFeedback]->setFromNormalized(0.5);
      value[ID::modEnvelopeA]->setFromNormalized(0.0);
      value[ID::modEnvelopeCurve]->setFromNormalized(0.5);
      value[ID::modEnvelopeToFreq1]->setFromNormalized(0.0);
      value[ID::modEnvelopeToSync1]->setFromNormalized(0.0);
      value[ID::modEnvelopeToFreq2]->setFromNormalized(0.0);
      value[ID::modEnvelopeToSync2]->setFromNormalized(0.0);
      value[ID::modLFOFrequency]->setFromNormalized(0.5);
      value[ID::modLFONoiseMix]->setFromNormalized(0.01);
      value[ID::modLFOToFreq1]->setFromNormalized(0.0);
      value[ID::modLFOToSync1]->setFromNormalized(0.0);
      value[ID::modLFOToFreq2]->setFromNormalized(0.0);
      value[ID::modLFOToSync2]->setFromNormalized(0.0);
      value[ID::pitchBend]->setFromNormalized(0.5);
      value[ID::unison]->setFromInt(0);
      value[ID::nVoice]->setFromInt(5);
    } break;

    case preset_2Octave: {
      value[ID::bypass]->setFromInt(0);
      value[ID::osc1Gain]->setFromNormalized(1.0);
      value[ID::osc1Semi]->setFromNormalized(0.0);
      value[ID::osc1Cent]->setFromNormalized(0.5);
      value[ID::osc1Sync]->setFromNormalized(0.2305000126361847);
      value[ID::osc1SyncType]->setFromInt(1);
      value[ID::osc1PTROrder]->setFromInt(16);
      value[ID::osc1Phase]->setFromNormalized(0.0);
      value[ID::osc1PhaseLock]->setFromInt(0);
      value[ID::osc2Gain]->setFromNormalized(1.0);
      value[ID::osc2Semi]->setFromNormalized(0.5);
      value[ID::osc2Cent]->setFromNormalized(0.5);
      value[ID::osc2Sync]->setFromNormalized(0.06249999999999999);
      value[ID::osc2SyncType]->setFromInt(0);
      value[ID::osc2PTROrder]->setFromInt(16);
      value[ID::osc2Invert]->setFromInt(0);
      value[ID::osc2Phase]->setFromNormalized(0.0);
      value[ID::osc2PhaseLock]->setFromInt(0);
      value[ID::fmOsc1ToSync1]->setFromNormalized(0.0);
      value[ID::fmOsc1ToFreq2]->setFromNormalized(0.0);
      value[ID::fmOsc2ToSync1]->setFromNormalized(0.23999997973442078);
      value[ID::gain]->setFromNormalized(0.5);
      value[ID::gainA]->setFromNormalized(0.05000000000000002);
      value[ID::gainD]->setFromNormalized(0.5);
      value[ID::gainS]->setFromNormalized(0.4999999999999999);
      value[ID::gainR]->setFromNormalized(0.4599999189376831);
      value[ID::gainEnvelopeCurve]->setFromNormalized(0.0);
      value[ID::filterCutoff]->setFromNormalized(0.4599999785423279);
      value[ID::filterResonance]->setFromNormalized(0.7160000205039978);
      value[ID::filterFeedback]->setFromNormalized(1.0);
      value[ID::filterSaturation]->setFromNormalized(0.3);
      value[ID::filterDirty]->setFromInt(0);
      value[ID::filterType]->setFromInt(0);
      value[ID::filterShaper]->setFromInt(1);
      value[ID::filterA]->setFromNormalized(0.0);
      value[ID::filterD]->setFromNormalized(0.5);
      value[ID::filterS]->setFromNormalized(0.0);
      value[ID::filterR]->setFromNormalized(0.5);
      value[ID::filterCutoffAmount]->setFromNormalized(0.7199999690055847);
      value[ID::filterResonanceAmount]->setFromNormalized(0.3840000629425049);
      value[ID::filterKeyToCutoff]->setFromNormalized(0.5);
      value[ID::filterKeyToFeedback]->setFromNormalized(0.5);
      value[ID::modEnvelopeA]->setFromNormalized(0.0);
      value[ID::modEnvelopeCurve]->setFromNormalized(0.5);
      value[ID::modEnvelopeToFreq1]->setFromNormalized(0.0);
      value[ID::modEnvelopeToSync1]->setFromNormalized(0.0);
      value[ID::modEnvelopeToFreq2]->setFromNormalized(0.0);
      value[ID::modEnvelopeToSync2]->setFromNormalized(0.0);
      value[ID::modLFOFrequency]->setFromNormalized(0.328000009059906);
      value[ID::modLFONoiseMix]->setFromNormalized(0.01);
      value[ID::modLFOToFreq1]->setFromNormalized(0.15200002491474152);
      value[ID::modLFOToSync1]->setFromNormalized(0.48399993777275085);
      value[ID::modLFOToFreq2]->setFromNormalized(0.0);
      value[ID::modLFOToSync2]->setFromNormalized(0.0);
      value[ID::pitchBend]->setFromNormalized(0.5);
      value[ID::unison]->setFromInt(0);
      value[ID::nVoice]->setFromInt(5);
    } break;

    case presetAlmost: {
      value[ID::bypass]->setFromInt(0);
      value[ID::osc1Gain]->setFromNormalized(1.0);
      value[ID::osc1Semi]->setFromNormalized(0.0);
      value[ID::osc1Cent]->setFromNormalized(0.5);
      value[ID::osc1Sync]->setFromNormalized(0.25450003147125244);
      value[ID::osc1SyncType]->setFromInt(3);
      value[ID::osc1PTROrder]->setFromInt(16);
      value[ID::osc1Phase]->setFromNormalized(0.0);
      value[ID::osc1PhaseLock]->setFromInt(0);
      value[ID::osc2Gain]->setFromNormalized(1.0);
      value[ID::osc2Semi]->setFromNormalized(0.7560004591941833);
      value[ID::osc2Cent]->setFromNormalized(0.5);
      value[ID::osc2Sync]->setFromNormalized(0.10250014811754227);
      value[ID::osc2SyncType]->setFromInt(2);
      value[ID::osc2PTROrder]->setFromInt(16);
      value[ID::osc2Invert]->setFromInt(0);
      value[ID::osc2Phase]->setFromNormalized(0.0);
      value[ID::osc2PhaseLock]->setFromInt(0);
      value[ID::fmOsc1ToSync1]->setFromNormalized(0.8600001335144043);
      value[ID::fmOsc1ToFreq2]->setFromNormalized(0.30000004172325134);
      value[ID::fmOsc2ToSync1]->setFromNormalized(0.3880000412464142);
      value[ID::gain]->setFromNormalized(0.5);
      value[ID::gainA]->setFromNormalized(0.05000000000000002);
      value[ID::gainD]->setFromNormalized(0.5);
      value[ID::gainS]->setFromNormalized(0.4999999999999999);
      value[ID::gainR]->setFromNormalized(0.09999999999999998);
      value[ID::gainEnvelopeCurve]->setFromNormalized(0.0);
      value[ID::filterCutoff]->setFromNormalized(1.0);
      value[ID::filterResonance]->setFromNormalized(0.4999999999999999);
      value[ID::filterFeedback]->setFromNormalized(0.0);
      value[ID::filterSaturation]->setFromNormalized(0.3);
      value[ID::filterDirty]->setFromInt(0);
      value[ID::filterType]->setFromInt(0);
      value[ID::filterShaper]->setFromInt(1);
      value[ID::filterA]->setFromNormalized(0.0);
      value[ID::filterD]->setFromNormalized(0.5);
      value[ID::filterS]->setFromNormalized(0.0);
      value[ID::filterR]->setFromNormalized(0.5);
      value[ID::filterCutoffAmount]->setFromNormalized(0.5);
      value[ID::filterResonanceAmount]->setFromNormalized(0.0);
      value[ID::filterKeyToCutoff]->setFromNormalized(0.5);
      value[ID::filterKeyToFeedback]->setFromNormalized(0.5);
      value[ID::modEnvelopeA]->setFromNormalized(0.0);
      value[ID::modEnvelopeCurve]->setFromNormalized(0.5);
      value[ID::modEnvelopeToFreq1]->setFromNormalized(0.0);
      value[ID::modEnvelopeToSync1]->setFromNormalized(0.0);
      value[ID::modEnvelopeToFreq2]->setFromNormalized(0.0);
      value[ID::modEnvelopeToSync2]->setFromNormalized(0.0);
      value[ID::modLFOFrequency]->setFromNormalized(0.5);
      value[ID::modLFONoiseMix]->setFromNormalized(0.01);
      value[ID::modLFOToFreq1]->setFromNormalized(0.0);
      value[ID::modLFOToSync1]->setFromNormalized(0.0);
      value[ID::modLFOToFreq2]->setFromNormalized(0.0);
      value[ID::modLFOToSync2]->setFromNormalized(0.0);
      value[ID::pitchBend]->setFromNormalized(0.5);
      value[ID::unison]->setFromInt(0);
      value[ID::nVoice]->setFromInt(5);
    } break;

    case presetBasicFilter: {
      value[ID::bypass]->setFromInt(0);
      value[ID::osc1Gain]->setFromNormalized(1.0);
      value[ID::osc1Semi]->setFromNormalized(0.5);
      value[ID::osc1Cent]->setFromNormalized(0.5);
      value[ID::osc1Sync]->setFromNormalized(0.06249999999999999);
      value[ID::osc1SyncType]->setFromInt(0);
      value[ID::osc1PTROrder]->setFromInt(16);
      value[ID::osc1Phase]->setFromNormalized(0.0);
      value[ID::osc1PhaseLock]->setFromInt(0);
      value[ID::osc2Gain]->setFromNormalized(1.0);
      value[ID::osc2Semi]->setFromNormalized(0.5);
      value[ID::osc2Cent]->setFromNormalized(0.5);
      value[ID::osc2Sync]->setFromNormalized(0.06249999999999999);
      value[ID::osc2SyncType]->setFromInt(0);
      value[ID::osc2PTROrder]->setFromInt(16);
      value[ID::osc2Invert]->setFromInt(0);
      value[ID::osc2Phase]->setFromNormalized(0.0);
      value[ID::osc2PhaseLock]->setFromInt(0);
      value[ID::fmOsc1ToSync1]->setFromNormalized(0.0);
      value[ID::fmOsc1ToFreq2]->setFromNormalized(0.0);
      value[ID::fmOsc2ToSync1]->setFromNormalized(0.0);
      value[ID::gain]->setFromNormalized(0.5);
      value[ID::gainA]->setFromNormalized(0.05000000000000002);
      value[ID::gainD]->setFromNormalized(0.5);
      value[ID::gainS]->setFromNormalized(0.4999999999999999);
      value[ID::gainR]->setFromNormalized(0.7160001993179321);
      value[ID::gainEnvelopeCurve]->setFromNormalized(0.0);
      value[ID::filterCutoff]->setFromNormalized(0.25199994444847107);
      value[ID::filterResonance]->setFromNormalized(0.5119996666908264);
      value[ID::filterFeedback]->setFromNormalized(0.7440000772476196);
      value[ID::filterSaturation]->setFromNormalized(0.3);
      value[ID::filterDirty]->setFromInt(0);
      value[ID::filterType]->setFromInt(0);
      value[ID::filterShaper]->setFromInt(1);
      value[ID::filterA]->setFromNormalized(0.0);
      value[ID::filterD]->setFromNormalized(0.5);
      value[ID::filterS]->setFromNormalized(0.0);
      value[ID::filterR]->setFromNormalized(0.5);
      value[ID::filterCutoffAmount]->setFromNormalized(0.8640002608299255);
      value[ID::filterResonanceAmount]->setFromNormalized(0.0);
      value[ID::filterKeyToCutoff]->setFromNormalized(0.5880000591278076);
      value[ID::filterKeyToFeedback]->setFromNormalized(0.5);
      value[ID::modEnvelopeA]->setFromNormalized(0.0);
      value[ID::modEnvelopeCurve]->setFromNormalized(0.5);
      value[ID::modEnvelopeToFreq1]->setFromNormalized(0.0);
      value[ID::modEnvelopeToSync1]->setFromNormalized(0.0);
      value[ID::modEnvelopeToFreq2]->setFromNormalized(0.0);
      value[ID::modEnvelopeToSync2]->setFromNormalized(0.0);
      value[ID::modLFOFrequency]->setFromNormalized(0.5880001187324524);
      value[ID::modLFONoiseMix]->setFromNormalized(0.01);
      value[ID::modLFOToFreq1]->setFromNormalized(0.0);
      value[ID::modLFOToSync1]->setFromNormalized(0.0);
      value[ID::modLFOToFreq2]->setFromNormalized(0.12800012528896332);
      value[ID::modLFOToSync2]->setFromNormalized(0.0);
      value[ID::pitchBend]->setFromNormalized(0.5);
      value[ID::unison]->setFromInt(0);
      value[ID::nVoice]->setFromInt(5);
    } break;

    case presetBasicSync: {
      value[ID::bypass]->setFromInt(0);
      value[ID::osc1Gain]->setFromNormalized(1.0);
      value[ID::osc1Semi]->setFromNormalized(0.5);
      value[ID::osc1Cent]->setFromNormalized(0.5);
      value[ID::osc1Sync]->setFromNormalized(0.06650000065565109);
      value[ID::osc1SyncType]->setFromInt(1);
      value[ID::osc1PTROrder]->setFromInt(16);
      value[ID::osc1Phase]->setFromNormalized(0.0);
      value[ID::osc1PhaseLock]->setFromInt(0);
      value[ID::osc2Gain]->setFromNormalized(1.0);
      value[ID::osc2Semi]->setFromNormalized(0.5);
      value[ID::osc2Cent]->setFromNormalized(0.5);
      value[ID::osc2Sync]->setFromNormalized(0.35050004720687866);
      value[ID::osc2SyncType]->setFromInt(1);
      value[ID::osc2PTROrder]->setFromInt(16);
      value[ID::osc2Invert]->setFromInt(0);
      value[ID::osc2Phase]->setFromNormalized(0.0);
      value[ID::osc2PhaseLock]->setFromInt(0);
      value[ID::fmOsc1ToSync1]->setFromNormalized(0.0);
      value[ID::fmOsc1ToFreq2]->setFromNormalized(0.0);
      value[ID::fmOsc2ToSync1]->setFromNormalized(0.0);
      value[ID::gain]->setFromNormalized(0.5);
      value[ID::gainA]->setFromNormalized(0.05000000000000001);
      value[ID::gainD]->setFromNormalized(0.5);
      value[ID::gainS]->setFromNormalized(0.49999999999999994);
      value[ID::gainR]->setFromNormalized(0.6120001673698425);
      value[ID::gainEnvelopeCurve]->setFromNormalized(0.0);
      value[ID::filterCutoff]->setFromNormalized(1.0);
      value[ID::filterResonance]->setFromNormalized(0.49999999999999994);
      value[ID::filterFeedback]->setFromNormalized(0.0);
      value[ID::filterSaturation]->setFromNormalized(0.3);
      value[ID::filterDirty]->setFromInt(0);
      value[ID::filterType]->setFromInt(0);
      value[ID::filterShaper]->setFromInt(1);
      value[ID::filterA]->setFromNormalized(0.0);
      value[ID::filterD]->setFromNormalized(0.5);
      value[ID::filterS]->setFromNormalized(0.0);
      value[ID::filterR]->setFromNormalized(0.5);
      value[ID::filterCutoffAmount]->setFromNormalized(0.5);
      value[ID::filterResonanceAmount]->setFromNormalized(0.0);
      value[ID::filterKeyToCutoff]->setFromNormalized(0.5);
      value[ID::filterKeyToFeedback]->setFromNormalized(0.5);
      value[ID::modEnvelopeA]->setFromNormalized(0.0);
      value[ID::modEnvelopeCurve]->setFromNormalized(0.5);
      value[ID::modEnvelopeToFreq1]->setFromNormalized(0.0);
      value[ID::modEnvelopeToSync1]->setFromNormalized(0.0);
      value[ID::modEnvelopeToFreq2]->setFromNormalized(0.0);
      value[ID::modEnvelopeToSync2]->setFromNormalized(0.0);
      value[ID::modLFOFrequency]->setFromNormalized(0.5);
      value[ID::modLFONoiseMix]->setFromNormalized(0.01);
      value[ID::modLFOToFreq1]->setFromNormalized(0.0);
      value[ID::modLFOToSync1]->setFromNormalized(0.4039998948574066);
      value[ID::modLFOToFreq2]->setFromNormalized(0.0);
      value[ID::modLFOToSync2]->setFromNormalized(0.0);
      value[ID::pitchBend]->setFromNormalized(0.5);
      value[ID::unison]->setFromInt(1);
      value[ID::nVoice]->setFromInt(5);
    } break;

    case presetBreathing: {
      value[ID::bypass]->setFromInt(0);
      value[ID::osc1Gain]->setFromNormalized(1.0);
      value[ID::osc1Semi]->setFromNormalized(0.5);
      value[ID::osc1Cent]->setFromNormalized(0.5);
      value[ID::osc1Sync]->setFromNormalized(0.28650006651878357);
      value[ID::osc1SyncType]->setFromInt(1);
      value[ID::osc1PTROrder]->setFromInt(16);
      value[ID::osc1Phase]->setFromNormalized(0.0);
      value[ID::osc1PhaseLock]->setFromInt(0);
      value[ID::osc2Gain]->setFromNormalized(1.0);
      value[ID::osc2Semi]->setFromNormalized(0.5);
      value[ID::osc2Cent]->setFromNormalized(0.5);
      value[ID::osc2Sync]->setFromNormalized(0.06249999999999999);
      value[ID::osc2SyncType]->setFromInt(0);
      value[ID::osc2PTROrder]->setFromInt(16);
      value[ID::osc2Invert]->setFromInt(0);
      value[ID::osc2Phase]->setFromNormalized(0.0);
      value[ID::osc2PhaseLock]->setFromInt(0);
      value[ID::fmOsc1ToSync1]->setFromNormalized(0.0);
      value[ID::fmOsc1ToFreq2]->setFromNormalized(0.0);
      value[ID::fmOsc2ToSync1]->setFromNormalized(0.0);
      value[ID::gain]->setFromNormalized(0.5);
      value[ID::gainA]->setFromNormalized(0.4219999611377716);
      value[ID::gainD]->setFromNormalized(0.5);
      value[ID::gainS]->setFromNormalized(0.4999997317790985);
      value[ID::gainR]->setFromNormalized(0.35199999809265137);
      value[ID::gainEnvelopeCurve]->setFromNormalized(0.7199999690055847);
      value[ID::filterCutoff]->setFromNormalized(0.43199965357780457);
      value[ID::filterResonance]->setFromNormalized(0.6320000886917114);
      value[ID::filterFeedback]->setFromNormalized(0.7719999551773071);
      value[ID::filterSaturation]->setFromNormalized(0.7520005702972412);
      value[ID::filterDirty]->setFromInt(0);
      value[ID::filterType]->setFromInt(0);
      value[ID::filterShaper]->setFromInt(1);
      value[ID::filterA]->setFromNormalized(0.6479999423027039);
      value[ID::filterD]->setFromNormalized(0.7600000500679016);
      value[ID::filterS]->setFromNormalized(0.0);
      value[ID::filterR]->setFromNormalized(0.5);
      value[ID::filterCutoffAmount]->setFromNormalized(0.6200001835823059);
      value[ID::filterResonanceAmount]->setFromNormalized(0.6440000534057617);
      value[ID::filterKeyToCutoff]->setFromNormalized(0.5);
      value[ID::filterKeyToFeedback]->setFromNormalized(0.5);
      value[ID::modEnvelopeA]->setFromNormalized(0.0);
      value[ID::modEnvelopeCurve]->setFromNormalized(0.5);
      value[ID::modEnvelopeToFreq1]->setFromNormalized(0.0);
      value[ID::modEnvelopeToSync1]->setFromNormalized(0.0);
      value[ID::modEnvelopeToFreq2]->setFromNormalized(0.0);
      value[ID::modEnvelopeToSync2]->setFromNormalized(0.0);
      value[ID::modLFOFrequency]->setFromNormalized(0.5);
      value[ID::modLFONoiseMix]->setFromNormalized(1.0);
      value[ID::modLFOToFreq1]->setFromNormalized(0.4560000002384186);
      value[ID::modLFOToSync1]->setFromNormalized(1.0);
      value[ID::modLFOToFreq2]->setFromNormalized(0.0);
      value[ID::modLFOToSync2]->setFromNormalized(0.0);
      value[ID::pitchBend]->setFromNormalized(0.5);
      value[ID::unison]->setFromInt(0);
      value[ID::nVoice]->setFromInt(5);
    } break;

    case presetBurningUpCPU: {
      value[ID::bypass]->setFromInt(0);
      value[ID::osc1Gain]->setFromNormalized(1.0);
      value[ID::osc1Semi]->setFromNormalized(0.5);
      value[ID::osc1Cent]->setFromNormalized(0.5);
      value[ID::osc1Sync]->setFromNormalized(0.06249999999999999);
      value[ID::osc1SyncType]->setFromInt(1);
      value[ID::osc1PTROrder]->setFromInt(16);
      value[ID::osc1Phase]->setFromNormalized(0.0);
      value[ID::osc1PhaseLock]->setFromInt(0);
      value[ID::osc2Gain]->setFromNormalized(1.0);
      value[ID::osc2Semi]->setFromNormalized(0.5);
      value[ID::osc2Cent]->setFromNormalized(0.5);
      value[ID::osc2Sync]->setFromNormalized(0.37449994683265686);
      value[ID::osc2SyncType]->setFromInt(1);
      value[ID::osc2PTROrder]->setFromInt(16);
      value[ID::osc2Invert]->setFromInt(0);
      value[ID::osc2Phase]->setFromNormalized(0.0);
      value[ID::osc2PhaseLock]->setFromInt(0);
      value[ID::fmOsc1ToSync1]->setFromNormalized(0.0);
      value[ID::fmOsc1ToFreq2]->setFromNormalized(0.0);
      value[ID::fmOsc2ToSync1]->setFromNormalized(0.0);
      value[ID::gain]->setFromNormalized(0.5);
      value[ID::gainA]->setFromNormalized(0.05000000000000002);
      value[ID::gainD]->setFromNormalized(0.5);
      value[ID::gainS]->setFromNormalized(0.4999999999999999);
      value[ID::gainR]->setFromNormalized(1.0);
      value[ID::gainEnvelopeCurve]->setFromNormalized(0.0);
      value[ID::filterCutoff]->setFromNormalized(0.6679997444152832);
      value[ID::filterResonance]->setFromNormalized(0.7879996299743652);
      value[ID::filterFeedback]->setFromNormalized(0.3159998953342438);
      value[ID::filterSaturation]->setFromNormalized(0.3);
      value[ID::filterDirty]->setFromInt(0);
      value[ID::filterType]->setFromInt(0);
      value[ID::filterShaper]->setFromInt(1);
      value[ID::filterA]->setFromNormalized(0.0);
      value[ID::filterD]->setFromNormalized(0.7480000853538513);
      value[ID::filterS]->setFromNormalized(0.0);
      value[ID::filterR]->setFromNormalized(0.9839999675750732);
      value[ID::filterCutoffAmount]->setFromNormalized(0.6520001888275146);
      value[ID::filterResonanceAmount]->setFromNormalized(0.0);
      value[ID::filterKeyToCutoff]->setFromNormalized(0.5);
      value[ID::filterKeyToFeedback]->setFromNormalized(0.5);
      value[ID::modEnvelopeA]->setFromNormalized(0.1239999607205391);
      value[ID::modEnvelopeCurve]->setFromNormalized(0.5879999995231628);
      value[ID::modEnvelopeToFreq1]->setFromNormalized(0.2439999133348465);
      value[ID::modEnvelopeToSync1]->setFromNormalized(0.16000023484230042);
      value[ID::modEnvelopeToFreq2]->setFromNormalized(0.0);
      value[ID::modEnvelopeToSync2]->setFromNormalized(0.0);
      value[ID::modLFOFrequency]->setFromNormalized(0.5);
      value[ID::modLFONoiseMix]->setFromNormalized(0.01);
      value[ID::modLFOToFreq1]->setFromNormalized(0.0);
      value[ID::modLFOToSync1]->setFromNormalized(0.0);
      value[ID::modLFOToFreq2]->setFromNormalized(0.0);
      value[ID::modLFOToSync2]->setFromNormalized(0.0);
      value[ID::pitchBend]->setFromNormalized(0.5);
      value[ID::unison]->setFromInt(1);
      value[ID::nVoice]->setFromInt(5);
    } break;

    case presetEdgyResonance: {
      value[ID::bypass]->setFromInt(0);
      value[ID::osc1Gain]->setFromNormalized(1.0);
      value[ID::osc1Semi]->setFromNormalized(0.5);
      value[ID::osc1Cent]->setFromNormalized(0.5);
      value[ID::osc1Sync]->setFromNormalized(0.06249999999999999);
      value[ID::osc1SyncType]->setFromInt(0);
      value[ID::osc1PTROrder]->setFromInt(16);
      value[ID::osc1Phase]->setFromNormalized(0.0);
      value[ID::osc1PhaseLock]->setFromInt(0);
      value[ID::osc2Gain]->setFromNormalized(1.0);
      value[ID::osc2Semi]->setFromNormalized(0.0);
      value[ID::osc2Cent]->setFromNormalized(0.5);
      value[ID::osc2Sync]->setFromNormalized(0.2225000411272049);
      value[ID::osc2SyncType]->setFromInt(1);
      value[ID::osc2PTROrder]->setFromInt(16);
      value[ID::osc2Invert]->setFromInt(0);
      value[ID::osc2Phase]->setFromNormalized(0.0);
      value[ID::osc2PhaseLock]->setFromInt(0);
      value[ID::fmOsc1ToSync1]->setFromNormalized(0.0);
      value[ID::fmOsc1ToFreq2]->setFromNormalized(0.0);
      value[ID::fmOsc2ToSync1]->setFromNormalized(0.0);
      value[ID::gain]->setFromNormalized(0.5);
      value[ID::gainA]->setFromNormalized(0.05000000000000002);
      value[ID::gainD]->setFromNormalized(0.5);
      value[ID::gainS]->setFromNormalized(1.0);
      value[ID::gainR]->setFromNormalized(0.4039999842643738);
      value[ID::gainEnvelopeCurve]->setFromNormalized(0.0);
      value[ID::filterCutoff]->setFromNormalized(0.7639998197555542);
      value[ID::filterResonance]->setFromNormalized(1.0);
      value[ID::filterFeedback]->setFromNormalized(0.9799999594688416);
      value[ID::filterSaturation]->setFromNormalized(0.6840002536773682);
      value[ID::filterDirty]->setFromInt(0);
      value[ID::filterType]->setFromInt(0);
      value[ID::filterShaper]->setFromInt(3);
      value[ID::filterA]->setFromNormalized(0.0);
      value[ID::filterD]->setFromNormalized(0.7400000095367432);
      value[ID::filterS]->setFromNormalized(0.0);
      value[ID::filterR]->setFromNormalized(0.5);
      value[ID::filterCutoffAmount]->setFromNormalized(0.6440000534057617);
      value[ID::filterResonanceAmount]->setFromNormalized(0.0);
      value[ID::filterKeyToCutoff]->setFromNormalized(0.5);
      value[ID::filterKeyToFeedback]->setFromNormalized(0.5);
      value[ID::modEnvelopeA]->setFromNormalized(0.0);
      value[ID::modEnvelopeCurve]->setFromNormalized(0.11999999731779107);
      value[ID::modEnvelopeToFreq1]->setFromNormalized(0.0);
      value[ID::modEnvelopeToSync1]->setFromNormalized(0.0);
      value[ID::modEnvelopeToFreq2]->setFromNormalized(0.0);
      value[ID::modEnvelopeToSync2]->setFromNormalized(0.656000018119812);
      value[ID::modLFOFrequency]->setFromNormalized(0.5);
      value[ID::modLFONoiseMix]->setFromNormalized(0.01);
      value[ID::modLFOToFreq1]->setFromNormalized(0.0);
      value[ID::modLFOToSync1]->setFromNormalized(0.0);
      value[ID::modLFOToFreq2]->setFromNormalized(0.0);
      value[ID::modLFOToSync2]->setFromNormalized(0.0);
      value[ID::pitchBend]->setFromNormalized(0.5);
      value[ID::unison]->setFromInt(0);
      value[ID::nVoice]->setFromInt(5);
    } break;

    case presetFaint: {
      value[ID::bypass]->setFromInt(0);
      value[ID::osc1Gain]->setFromNormalized(1.0);
      value[ID::osc1Semi]->setFromNormalized(0.5);
      value[ID::osc1Cent]->setFromNormalized(0.5);
      value[ID::osc1Sync]->setFromNormalized(0.06249999999999999);
      value[ID::osc1SyncType]->setFromInt(0);
      value[ID::osc1PTROrder]->setFromInt(16);
      value[ID::osc1Phase]->setFromNormalized(0.0);
      value[ID::osc1PhaseLock]->setFromInt(0);
      value[ID::osc2Gain]->setFromNormalized(1.0);
      value[ID::osc2Semi]->setFromNormalized(0.5119999051094055);
      value[ID::osc2Cent]->setFromNormalized(0.48399996757507324);
      value[ID::osc2Sync]->setFromNormalized(0.06249999999999999);
      value[ID::osc2SyncType]->setFromInt(0);
      value[ID::osc2PTROrder]->setFromInt(16);
      value[ID::osc2Invert]->setFromInt(1);
      value[ID::osc2Phase]->setFromNormalized(0.0);
      value[ID::osc2PhaseLock]->setFromInt(1);
      value[ID::fmOsc1ToSync1]->setFromNormalized(0.0);
      value[ID::fmOsc1ToFreq2]->setFromNormalized(0.0);
      value[ID::fmOsc2ToSync1]->setFromNormalized(0.0);
      value[ID::gain]->setFromNormalized(0.5);
      value[ID::gainA]->setFromNormalized(0.05000000000000002);
      value[ID::gainD]->setFromNormalized(0.320000022649765);
      value[ID::gainS]->setFromNormalized(0.0);
      value[ID::gainR]->setFromNormalized(0.27199995517730713);
      value[ID::gainEnvelopeCurve]->setFromNormalized(0.0);
      value[ID::filterCutoff]->setFromNormalized(0.5000001788139343);
      value[ID::filterResonance]->setFromNormalized(0.4999999999999999);
      value[ID::filterFeedback]->setFromNormalized(0.0);
      value[ID::filterSaturation]->setFromNormalized(0.3);
      value[ID::filterDirty]->setFromInt(0);
      value[ID::filterType]->setFromInt(0);
      value[ID::filterShaper]->setFromInt(1);
      value[ID::filterA]->setFromNormalized(0.0);
      value[ID::filterD]->setFromNormalized(0.30400004982948303);
      value[ID::filterS]->setFromNormalized(0.0);
      value[ID::filterR]->setFromNormalized(0.5);
      value[ID::filterCutoffAmount]->setFromNormalized(0.8399999737739563);
      value[ID::filterResonanceAmount]->setFromNormalized(0.0);
      value[ID::filterKeyToCutoff]->setFromNormalized(0.5);
      value[ID::filterKeyToFeedback]->setFromNormalized(0.5);
      value[ID::modEnvelopeA]->setFromNormalized(0.0);
      value[ID::modEnvelopeCurve]->setFromNormalized(0.956000030040741);
      value[ID::modEnvelopeToFreq1]->setFromNormalized(0.0);
      value[ID::modEnvelopeToSync1]->setFromNormalized(0.0);
      value[ID::modEnvelopeToFreq2]->setFromNormalized(0.0);
      value[ID::modEnvelopeToSync2]->setFromNormalized(0.0);
      value[ID::modLFOFrequency]->setFromNormalized(0.5);
      value[ID::modLFONoiseMix]->setFromNormalized(0.01);
      value[ID::modLFOToFreq1]->setFromNormalized(0.0);
      value[ID::modLFOToSync1]->setFromNormalized(0.0);
      value[ID::modLFOToFreq2]->setFromNormalized(0.0);
      value[ID::modLFOToSync2]->setFromNormalized(0.0);
      value[ID::pitchBend]->setFromNormalized(0.5);
      value[ID::unison]->setFromInt(1);
      value[ID::nVoice]->setFromInt(5);
    } break;

    case presetHmmm: {
      value[ID::bypass]->setFromInt(0);
      value[ID::osc1Gain]->setFromNormalized(1.0);
      value[ID::osc1Semi]->setFromNormalized(0.6600000262260437);
      value[ID::osc1Cent]->setFromNormalized(0.5);
      value[ID::osc1Sync]->setFromNormalized(0.018500082194805145);
      value[ID::osc1SyncType]->setFromInt(2);
      value[ID::osc1PTROrder]->setFromInt(16);
      value[ID::osc1Phase]->setFromNormalized(0.0);
      value[ID::osc1PhaseLock]->setFromInt(0);
      value[ID::osc2Gain]->setFromNormalized(1.0);
      value[ID::osc2Semi]->setFromNormalized(0.5);
      value[ID::osc2Cent]->setFromNormalized(0.543999969959259);
      value[ID::osc2Sync]->setFromNormalized(0.31450003385543823);
      value[ID::osc2SyncType]->setFromInt(1);
      value[ID::osc2PTROrder]->setFromInt(16);
      value[ID::osc2Invert]->setFromInt(1);
      value[ID::osc2Phase]->setFromNormalized(0.0);
      value[ID::osc2PhaseLock]->setFromInt(1);
      value[ID::fmOsc1ToSync1]->setFromNormalized(0.06000009179115296);
      value[ID::fmOsc1ToFreq2]->setFromNormalized(0.0);
      value[ID::fmOsc2ToSync1]->setFromNormalized(0.09200007468461992);
      value[ID::gain]->setFromNormalized(0.5479998588562012);
      value[ID::gainA]->setFromNormalized(0.05000000000000002);
      value[ID::gainD]->setFromNormalized(0.5);
      value[ID::gainS]->setFromNormalized(0.4999999999999999);
      value[ID::gainR]->setFromNormalized(0.29600000381469727);
      value[ID::gainEnvelopeCurve]->setFromNormalized(0.0);
      value[ID::filterCutoff]->setFromNormalized(1.0);
      value[ID::filterResonance]->setFromNormalized(0.4999999999999999);
      value[ID::filterFeedback]->setFromNormalized(0.0);
      value[ID::filterSaturation]->setFromNormalized(0.2919999659061432);
      value[ID::filterDirty]->setFromInt(0);
      value[ID::filterType]->setFromInt(4);
      value[ID::filterShaper]->setFromInt(1);
      value[ID::filterA]->setFromNormalized(0.0);
      value[ID::filterD]->setFromNormalized(0.5);
      value[ID::filterS]->setFromNormalized(0.0);
      value[ID::filterR]->setFromNormalized(0.5);
      value[ID::filterCutoffAmount]->setFromNormalized(0.5);
      value[ID::filterResonanceAmount]->setFromNormalized(0.0);
      value[ID::filterKeyToCutoff]->setFromNormalized(0.5);
      value[ID::filterKeyToFeedback]->setFromNormalized(0.5);
      value[ID::modEnvelopeA]->setFromNormalized(0.3799999952316284);
      value[ID::modEnvelopeCurve]->setFromNormalized(0.09200006723403932);
      value[ID::modEnvelopeToFreq1]->setFromNormalized(0.8040000200271606);
      value[ID::modEnvelopeToSync1]->setFromNormalized(0.0);
      value[ID::modEnvelopeToFreq2]->setFromNormalized(0.0);
      value[ID::modEnvelopeToSync2]->setFromNormalized(0.0);
      value[ID::modLFOFrequency]->setFromNormalized(0.5);
      value[ID::modLFONoiseMix]->setFromNormalized(0.01);
      value[ID::modLFOToFreq1]->setFromNormalized(0.0);
      value[ID::modLFOToSync1]->setFromNormalized(0.0);
      value[ID::modLFOToFreq2]->setFromNormalized(0.0);
      value[ID::modLFOToSync2]->setFromNormalized(0.0);
      value[ID::pitchBend]->setFromNormalized(0.5);
      value[ID::unison]->setFromInt(1);
      value[ID::nVoice]->setFromInt(5);
    } break;

    case presetIndistinguishable: {
      value[ID::bypass]->setFromInt(0);
      value[ID::osc1Gain]->setFromNormalized(1.0);
      value[ID::osc1Semi]->setFromNormalized(0.0);
      value[ID::osc1Cent]->setFromNormalized(0.5);
      value[ID::osc1Sync]->setFromNormalized(0.06249999999999999);
      value[ID::osc1SyncType]->setFromInt(0);
      value[ID::osc1PTROrder]->setFromInt(16);
      value[ID::osc1Phase]->setFromNormalized(0.0);
      value[ID::osc1PhaseLock]->setFromInt(0);
      value[ID::osc2Gain]->setFromNormalized(1.0);
      value[ID::osc2Semi]->setFromNormalized(0.0);
      value[ID::osc2Cent]->setFromNormalized(0.5);
      value[ID::osc2Sync]->setFromNormalized(0.3225000500679016);
      value[ID::osc2SyncType]->setFromInt(1);
      value[ID::osc2PTROrder]->setFromInt(16);
      value[ID::osc2Invert]->setFromInt(0);
      value[ID::osc2Phase]->setFromNormalized(0.0);
      value[ID::osc2PhaseLock]->setFromInt(0);
      value[ID::fmOsc1ToSync1]->setFromNormalized(0.0);
      value[ID::fmOsc1ToFreq2]->setFromNormalized(0.0);
      value[ID::fmOsc2ToSync1]->setFromNormalized(0.0);
      value[ID::gain]->setFromNormalized(0.5);
      value[ID::gainA]->setFromNormalized(0.05000000000000002);
      value[ID::gainD]->setFromNormalized(0.5);
      value[ID::gainS]->setFromNormalized(0.4999999999999999);
      value[ID::gainR]->setFromNormalized(0.3400000035762787);
      value[ID::gainEnvelopeCurve]->setFromNormalized(0.0);
      value[ID::filterCutoff]->setFromNormalized(0.17600001394748688);
      value[ID::filterResonance]->setFromNormalized(1.0);
      value[ID::filterFeedback]->setFromNormalized(0.9399999380111694);
      value[ID::filterSaturation]->setFromNormalized(1.0);
      value[ID::filterDirty]->setFromInt(0);
      value[ID::filterType]->setFromInt(0);
      value[ID::filterShaper]->setFromInt(1);
      value[ID::filterA]->setFromNormalized(0.0);
      value[ID::filterD]->setFromNormalized(0.5);
      value[ID::filterS]->setFromNormalized(0.0);
      value[ID::filterR]->setFromNormalized(0.5);
      value[ID::filterCutoffAmount]->setFromNormalized(0.6519999504089355);
      value[ID::filterResonanceAmount]->setFromNormalized(0.0);
      value[ID::filterKeyToCutoff]->setFromNormalized(0.7479999661445618);
      value[ID::filterKeyToFeedback]->setFromNormalized(0.4440000057220459);
      value[ID::modEnvelopeA]->setFromNormalized(0.0);
      value[ID::modEnvelopeCurve]->setFromNormalized(0.5);
      value[ID::modEnvelopeToFreq1]->setFromNormalized(0.0);
      value[ID::modEnvelopeToSync1]->setFromNormalized(0.0);
      value[ID::modEnvelopeToFreq2]->setFromNormalized(0.0);
      value[ID::modEnvelopeToSync2]->setFromNormalized(0.0);
      value[ID::modLFOFrequency]->setFromNormalized(0.5);
      value[ID::modLFONoiseMix]->setFromNormalized(0.01);
      value[ID::modLFOToFreq1]->setFromNormalized(0.0);
      value[ID::modLFOToSync1]->setFromNormalized(0.0);
      value[ID::modLFOToFreq2]->setFromNormalized(0.0);
      value[ID::modLFOToSync2]->setFromNormalized(0.0);
      value[ID::pitchBend]->setFromNormalized(0.5);
      value[ID::unison]->setFromInt(0);
      value[ID::nVoice]->setFromInt(5);
    } break;

    case presetMessBehindFilter: {
      value[ID::bypass]->setFromInt(0);
      value[ID::osc1Gain]->setFromNormalized(0.6119999885559082);
      value[ID::osc1Semi]->setFromNormalized(0.7640003561973572);
      value[ID::osc1Cent]->setFromNormalized(0.5);
      value[ID::osc1Sync]->setFromNormalized(0.374500036239624);
      value[ID::osc1SyncType]->setFromInt(1);
      value[ID::osc1PTROrder]->setFromInt(5);
      value[ID::osc1Phase]->setFromNormalized(0.0);
      value[ID::osc1PhaseLock]->setFromInt(0);
      value[ID::osc2Gain]->setFromNormalized(1.0);
      value[ID::osc2Semi]->setFromNormalized(0.5160000324249268);
      value[ID::osc2Cent]->setFromNormalized(0.5);
      value[ID::osc2Sync]->setFromNormalized(0.06249999999999999);
      value[ID::osc2SyncType]->setFromInt(1);
      value[ID::osc2PTROrder]->setFromInt(5);
      value[ID::osc2Invert]->setFromInt(0);
      value[ID::osc2Phase]->setFromNormalized(0.0);
      value[ID::osc2PhaseLock]->setFromInt(0);
      value[ID::fmOsc1ToSync1]->setFromNormalized(0.1600000411272049);
      value[ID::fmOsc1ToFreq2]->setFromNormalized(0.22799992561340335);
      value[ID::fmOsc2ToSync1]->setFromNormalized(0.6520001292228699);
      value[ID::gain]->setFromNormalized(0.6320000886917114);
      value[ID::gainA]->setFromNormalized(0.05000000000000002);
      value[ID::gainD]->setFromNormalized(0.5);
      value[ID::gainS]->setFromNormalized(0.4999999999999999);
      value[ID::gainR]->setFromNormalized(0.6360000371932983);
      value[ID::gainEnvelopeCurve]->setFromNormalized(0.0);
      value[ID::filterCutoff]->setFromNormalized(0.5719996690750122);
      value[ID::filterResonance]->setFromNormalized(1.0);
      value[ID::filterFeedback]->setFromNormalized(0.8159999847412109);
      value[ID::filterSaturation]->setFromNormalized(0.30000016093254095);
      value[ID::filterDirty]->setFromInt(0);
      value[ID::filterType]->setFromInt(0);
      value[ID::filterShaper]->setFromInt(2);
      value[ID::filterA]->setFromNormalized(0.0);
      value[ID::filterD]->setFromNormalized(0.3240000009536743);
      value[ID::filterS]->setFromNormalized(0.0);
      value[ID::filterR]->setFromNormalized(0.5);
      value[ID::filterCutoffAmount]->setFromNormalized(0.5919998288154602);
      value[ID::filterResonanceAmount]->setFromNormalized(0.35999998450279236);
      value[ID::filterKeyToCutoff]->setFromNormalized(1.0);
      value[ID::filterKeyToFeedback]->setFromNormalized(0.320000022649765);
      value[ID::modEnvelopeA]->setFromNormalized(0.0);
      value[ID::modEnvelopeCurve]->setFromNormalized(0.5);
      value[ID::modEnvelopeToFreq1]->setFromNormalized(0.0);
      value[ID::modEnvelopeToSync1]->setFromNormalized(0.0);
      value[ID::modEnvelopeToFreq2]->setFromNormalized(0.0);
      value[ID::modEnvelopeToSync2]->setFromNormalized(0.0);
      value[ID::modLFOFrequency]->setFromNormalized(0.628000020980835);
      value[ID::modLFONoiseMix]->setFromNormalized(0.01);
      value[ID::modLFOToFreq1]->setFromNormalized(0.0);
      value[ID::modLFOToSync1]->setFromNormalized(0.4560000002384186);
      value[ID::modLFOToFreq2]->setFromNormalized(0.30399996042251587);
      value[ID::modLFOToSync2]->setFromNormalized(0.0);
      value[ID::pitchBend]->setFromNormalized(0.5);
      value[ID::unison]->setFromInt(0);
      value[ID::nVoice]->setFromInt(5);
    } break;

    case presetMod_HP: {
      value[ID::bypass]->setFromInt(0);
      value[ID::osc1Gain]->setFromNormalized(1.0);
      value[ID::osc1Semi]->setFromNormalized(0.2679999768733978);
      value[ID::osc1Cent]->setFromNormalized(0.5);
      value[ID::osc1Sync]->setFromNormalized(0.43050000071525574);
      value[ID::osc1SyncType]->setFromInt(3);
      value[ID::osc1PTROrder]->setFromInt(16);
      value[ID::osc1Phase]->setFromNormalized(0.0);
      value[ID::osc1PhaseLock]->setFromInt(0);
      value[ID::osc2Gain]->setFromNormalized(1.0);
      value[ID::osc2Semi]->setFromNormalized(0.7560000419616699);
      value[ID::osc2Cent]->setFromNormalized(0.5);
      value[ID::osc2Sync]->setFromNormalized(0.21450012922286987);
      value[ID::osc2SyncType]->setFromInt(2);
      value[ID::osc2PTROrder]->setFromInt(16);
      value[ID::osc2Invert]->setFromInt(0);
      value[ID::osc2Phase]->setFromNormalized(0.0);
      value[ID::osc2PhaseLock]->setFromInt(0);
      value[ID::fmOsc1ToSync1]->setFromNormalized(0.0);
      value[ID::fmOsc1ToFreq2]->setFromNormalized(0.4719999432563782);
      value[ID::fmOsc2ToSync1]->setFromNormalized(0.0);
      value[ID::gain]->setFromNormalized(0.5);
      value[ID::gainA]->setFromNormalized(0.05000000000000002);
      value[ID::gainD]->setFromNormalized(0.5);
      value[ID::gainS]->setFromNormalized(0.9280000329017639);
      value[ID::gainR]->setFromNormalized(0.09999999999999998);
      value[ID::gainEnvelopeCurve]->setFromNormalized(0.0);
      value[ID::filterCutoff]->setFromNormalized(0.3040000796318054);
      value[ID::filterResonance]->setFromNormalized(0.6800000071525574);
      value[ID::filterFeedback]->setFromNormalized(0.5920000672340393);
      value[ID::filterSaturation]->setFromNormalized(0.3);
      value[ID::filterDirty]->setFromInt(0);
      value[ID::filterType]->setFromInt(1);
      value[ID::filterShaper]->setFromInt(1);
      value[ID::filterA]->setFromNormalized(0.6200000643730164);
      value[ID::filterD]->setFromNormalized(0.5);
      value[ID::filterS]->setFromNormalized(0.0);
      value[ID::filterR]->setFromNormalized(0.5);
      value[ID::filterCutoffAmount]->setFromNormalized(0.7680001258850098);
      value[ID::filterResonanceAmount]->setFromNormalized(0.0);
      value[ID::filterKeyToCutoff]->setFromNormalized(0.5);
      value[ID::filterKeyToFeedback]->setFromNormalized(0.5);
      value[ID::modEnvelopeA]->setFromNormalized(0.0);
      value[ID::modEnvelopeCurve]->setFromNormalized(0.5);
      value[ID::modEnvelopeToFreq1]->setFromNormalized(0.0);
      value[ID::modEnvelopeToSync1]->setFromNormalized(0.0);
      value[ID::modEnvelopeToFreq2]->setFromNormalized(0.0);
      value[ID::modEnvelopeToSync2]->setFromNormalized(0.0);
      value[ID::modLFOFrequency]->setFromNormalized(0.5);
      value[ID::modLFONoiseMix]->setFromNormalized(0.01);
      value[ID::modLFOToFreq1]->setFromNormalized(0.0);
      value[ID::modLFOToSync1]->setFromNormalized(0.0);
      value[ID::modLFOToFreq2]->setFromNormalized(0.0);
      value[ID::modLFOToSync2]->setFromNormalized(0.0);
      value[ID::pitchBend]->setFromNormalized(0.5);
      value[ID::unison]->setFromInt(0);
      value[ID::nVoice]->setFromInt(5);
    } break;

    case presetMotivation: {
      value[ID::bypass]->setFromInt(0);
      value[ID::osc1Gain]->setFromNormalized(1.0);
      value[ID::osc1Semi]->setFromNormalized(0.5);
      value[ID::osc1Cent]->setFromNormalized(0.5);
      value[ID::osc1Sync]->setFromNormalized(0.1545000523328781);
      value[ID::osc1SyncType]->setFromInt(1);
      value[ID::osc1PTROrder]->setFromInt(16);
      value[ID::osc1Phase]->setFromNormalized(0.0);
      value[ID::osc1PhaseLock]->setFromInt(1);
      value[ID::osc2Gain]->setFromNormalized(1.0);
      value[ID::osc2Semi]->setFromNormalized(0.5);
      value[ID::osc2Cent]->setFromNormalized(0.5);
      value[ID::osc2Sync]->setFromNormalized(0.13450002670288086);
      value[ID::osc2SyncType]->setFromInt(1);
      value[ID::osc2PTROrder]->setFromInt(16);
      value[ID::osc2Invert]->setFromInt(0);
      value[ID::osc2Phase]->setFromNormalized(0.0);
      value[ID::osc2PhaseLock]->setFromInt(1);
      value[ID::fmOsc1ToSync1]->setFromNormalized(0.15599998831748962);
      value[ID::fmOsc1ToFreq2]->setFromNormalized(0.11200001090765001);
      value[ID::fmOsc2ToSync1]->setFromNormalized(0.25599995255470276);
      value[ID::gain]->setFromNormalized(0.5);
      value[ID::gainA]->setFromNormalized(0.05000000000000002);
      value[ID::gainD]->setFromNormalized(0.5);
      value[ID::gainS]->setFromNormalized(0.4999999999999999);
      value[ID::gainR]->setFromNormalized(0.6039999723434448);
      value[ID::gainEnvelopeCurve]->setFromNormalized(0.0);
      value[ID::filterCutoff]->setFromNormalized(0.24800018966197968);
      value[ID::filterResonance]->setFromNormalized(1.0);
      value[ID::filterFeedback]->setFromNormalized(0.0);
      value[ID::filterSaturation]->setFromNormalized(0.703999936580658);
      value[ID::filterDirty]->setFromInt(0);
      value[ID::filterType]->setFromInt(1);
      value[ID::filterShaper]->setFromInt(1);
      value[ID::filterA]->setFromNormalized(0.0);
      value[ID::filterD]->setFromNormalized(0.5);
      value[ID::filterS]->setFromNormalized(0.0);
      value[ID::filterR]->setFromNormalized(0.5);
      value[ID::filterCutoffAmount]->setFromNormalized(0.6840002536773682);
      value[ID::filterResonanceAmount]->setFromNormalized(0.0);
      value[ID::filterKeyToCutoff]->setFromNormalized(0.6920000910758972);
      value[ID::filterKeyToFeedback]->setFromNormalized(0.7159998416900635);
      value[ID::modEnvelopeA]->setFromNormalized(0.4240001440048218);
      value[ID::modEnvelopeCurve]->setFromNormalized(0.4520000219345093);
      value[ID::modEnvelopeToFreq1]->setFromNormalized(0.31999990344047546);
      value[ID::modEnvelopeToSync1]->setFromNormalized(0.0);
      value[ID::modEnvelopeToFreq2]->setFromNormalized(0.0);
      value[ID::modEnvelopeToSync2]->setFromNormalized(0.4479999840259552);
      value[ID::modLFOFrequency]->setFromNormalized(0.5);
      value[ID::modLFONoiseMix]->setFromNormalized(0.01);
      value[ID::modLFOToFreq1]->setFromNormalized(0.0);
      value[ID::modLFOToSync1]->setFromNormalized(0.0);
      value[ID::modLFOToFreq2]->setFromNormalized(0.24799995124340057);
      value[ID::modLFOToSync2]->setFromNormalized(0.0);
      value[ID::pitchBend]->setFromNormalized(0.5);
      value[ID::unison]->setFromInt(0);
      value[ID::nVoice]->setFromInt(5);
    } break;

    case presetNoisyMod: {
      value[ID::bypass]->setFromInt(0);
      value[ID::osc1Gain]->setFromNormalized(1.0);
      value[ID::osc1Semi]->setFromNormalized(0.5);
      value[ID::osc1Cent]->setFromNormalized(0.5);
      value[ID::osc1Sync]->setFromNormalized(0.06249999999999999);
      value[ID::osc1SyncType]->setFromInt(0);
      value[ID::osc1PTROrder]->setFromInt(16);
      value[ID::osc1Phase]->setFromNormalized(0.0);
      value[ID::osc1PhaseLock]->setFromInt(0);
      value[ID::osc2Gain]->setFromNormalized(1.0);
      value[ID::osc2Semi]->setFromNormalized(0.5);
      value[ID::osc2Cent]->setFromNormalized(0.5);
      value[ID::osc2Sync]->setFromNormalized(0.06249999999999999);
      value[ID::osc2SyncType]->setFromInt(0);
      value[ID::osc2PTROrder]->setFromInt(16);
      value[ID::osc2Invert]->setFromInt(1);
      value[ID::osc2Phase]->setFromNormalized(0.0);
      value[ID::osc2PhaseLock]->setFromInt(0);
      value[ID::fmOsc1ToSync1]->setFromNormalized(0.0);
      value[ID::fmOsc1ToFreq2]->setFromNormalized(0.0);
      value[ID::fmOsc2ToSync1]->setFromNormalized(0.0);
      value[ID::gain]->setFromNormalized(0.5);
      value[ID::gainA]->setFromNormalized(0.05000000000000002);
      value[ID::gainD]->setFromNormalized(0.5);
      value[ID::gainS]->setFromNormalized(0.4999999999999999);
      value[ID::gainR]->setFromNormalized(0.6600003242492676);
      value[ID::gainEnvelopeCurve]->setFromNormalized(0.0);
      value[ID::filterCutoff]->setFromNormalized(0.4520004689693451);
      value[ID::filterResonance]->setFromNormalized(1.0);
      value[ID::filterFeedback]->setFromNormalized(0.6800001263618469);
      value[ID::filterSaturation]->setFromNormalized(0.6719997525215149);
      value[ID::filterDirty]->setFromInt(0);
      value[ID::filterType]->setFromInt(0);
      value[ID::filterShaper]->setFromInt(1);
      value[ID::filterA]->setFromNormalized(0.0);
      value[ID::filterD]->setFromNormalized(0.5);
      value[ID::filterS]->setFromNormalized(0.5600000023841858);
      value[ID::filterR]->setFromNormalized(0.5);
      value[ID::filterCutoffAmount]->setFromNormalized(0.5319998264312744);
      value[ID::filterResonanceAmount]->setFromNormalized(0.0);
      value[ID::filterKeyToCutoff]->setFromNormalized(0.9959999918937683);
      value[ID::filterKeyToFeedback]->setFromNormalized(0.4519999325275421);
      value[ID::modEnvelopeA]->setFromNormalized(0.0);
      value[ID::modEnvelopeCurve]->setFromNormalized(0.5);
      value[ID::modEnvelopeToFreq1]->setFromNormalized(0.0);
      value[ID::modEnvelopeToSync1]->setFromNormalized(0.0);
      value[ID::modEnvelopeToFreq2]->setFromNormalized(0.0);
      value[ID::modEnvelopeToSync2]->setFromNormalized(0.0);
      value[ID::modLFOFrequency]->setFromNormalized(0.5);
      value[ID::modLFONoiseMix]->setFromNormalized(1.0);
      value[ID::modLFOToFreq1]->setFromNormalized(0.5600000619888306);
      value[ID::modLFOToSync1]->setFromNormalized(0.0);
      value[ID::modLFOToFreq2]->setFromNormalized(0.5079999566078186);
      value[ID::modLFOToSync2]->setFromNormalized(0.0);
      value[ID::pitchBend]->setFromNormalized(0.5);
      value[ID::unison]->setFromInt(1);
      value[ID::nVoice]->setFromInt(5);
    } break;

    case presetOutOfTuning: {
      value[ID::bypass]->setFromInt(0);
      value[ID::osc1Gain]->setFromNormalized(1.0);
      value[ID::osc1Semi]->setFromNormalized(1.0);
      value[ID::osc1Cent]->setFromNormalized(0.5);
      value[ID::osc1Sync]->setFromNormalized(0.06249999999999999);
      value[ID::osc1SyncType]->setFromInt(0);
      value[ID::osc1PTROrder]->setFromInt(16);
      value[ID::osc1Phase]->setFromNormalized(0.0);
      value[ID::osc1PhaseLock]->setFromInt(0);
      value[ID::osc2Gain]->setFromNormalized(1.0);
      value[ID::osc2Semi]->setFromNormalized(0.46399977803230286);
      value[ID::osc2Cent]->setFromNormalized(0.7480005025863647);
      value[ID::osc2Sync]->setFromNormalized(0.26649993658065796);
      value[ID::osc2SyncType]->setFromInt(1);
      value[ID::osc2PTROrder]->setFromInt(16);
      value[ID::osc2Invert]->setFromInt(0);
      value[ID::osc2Phase]->setFromNormalized(0.0);
      value[ID::osc2PhaseLock]->setFromInt(0);
      value[ID::fmOsc1ToSync1]->setFromNormalized(0.0);
      value[ID::fmOsc1ToFreq2]->setFromNormalized(0.3279999792575836);
      value[ID::fmOsc2ToSync1]->setFromNormalized(0.0);
      value[ID::gain]->setFromNormalized(0.5);
      value[ID::gainA]->setFromNormalized(0.05000000000000002);
      value[ID::gainD]->setFromNormalized(0.5);
      value[ID::gainS]->setFromNormalized(0.4999999999999999);
      value[ID::gainR]->setFromNormalized(0.5759999752044678);
      value[ID::gainEnvelopeCurve]->setFromNormalized(0.0);
      value[ID::filterCutoff]->setFromNormalized(0.41999995708465576);
      value[ID::filterResonance]->setFromNormalized(1.0);
      value[ID::filterFeedback]->setFromNormalized(0.3080000579357147);
      value[ID::filterSaturation]->setFromNormalized(0.9880000352859497);
      value[ID::filterDirty]->setFromInt(0);
      value[ID::filterType]->setFromInt(0);
      value[ID::filterShaper]->setFromInt(1);
      value[ID::filterA]->setFromNormalized(0.0);
      value[ID::filterD]->setFromNormalized(0.5);
      value[ID::filterS]->setFromNormalized(0.0);
      value[ID::filterR]->setFromNormalized(0.5);
      value[ID::filterCutoffAmount]->setFromNormalized(0.6960000395774841);
      value[ID::filterResonanceAmount]->setFromNormalized(0.0);
      value[ID::filterKeyToCutoff]->setFromNormalized(0.6400002241134644);
      value[ID::filterKeyToFeedback]->setFromNormalized(0.3639999330043793);
      value[ID::modEnvelopeA]->setFromNormalized(0.0);
      value[ID::modEnvelopeCurve]->setFromNormalized(0.13999998569488534);
      value[ID::modEnvelopeToFreq1]->setFromNormalized(0.0);
      value[ID::modEnvelopeToSync1]->setFromNormalized(0.0);
      value[ID::modEnvelopeToFreq2]->setFromNormalized(0.27999991178512573);
      value[ID::modEnvelopeToSync2]->setFromNormalized(0.0);
      value[ID::modLFOFrequency]->setFromNormalized(0.5);
      value[ID::modLFONoiseMix]->setFromNormalized(0.01);
      value[ID::modLFOToFreq1]->setFromNormalized(0.0);
      value[ID::modLFOToSync1]->setFromNormalized(0.0);
      value[ID::modLFOToFreq2]->setFromNormalized(0.0);
      value[ID::modLFOToSync2]->setFromNormalized(0.0);
      value[ID::pitchBend]->setFromNormalized(0.5);
      value[ID::unison]->setFromInt(0);
      value[ID::nVoice]->setFromInt(5);
    } break;

    case presetPitchDecay: {
      value[ID::bypass]->setFromInt(0);
      value[ID::osc1Gain]->setFromNormalized(1.0);
      value[ID::osc1Semi]->setFromNormalized(0.5);
      value[ID::osc1Cent]->setFromNormalized(0.5);
      value[ID::osc1Sync]->setFromNormalized(0.06249999999999999);
      value[ID::osc1SyncType]->setFromInt(0);
      value[ID::osc1PTROrder]->setFromInt(16);
      value[ID::osc1Phase]->setFromNormalized(0.0);
      value[ID::osc1PhaseLock]->setFromInt(1);
      value[ID::osc2Gain]->setFromNormalized(1.0);
      value[ID::osc2Semi]->setFromNormalized(0.5);
      value[ID::osc2Cent]->setFromNormalized(0.5);
      value[ID::osc2Sync]->setFromNormalized(0.06249999999999999);
      value[ID::osc2SyncType]->setFromInt(0);
      value[ID::osc2PTROrder]->setFromInt(5);
      value[ID::osc2Invert]->setFromInt(0);
      value[ID::osc2Phase]->setFromNormalized(0.5080000758171082);
      value[ID::osc2PhaseLock]->setFromInt(1);
      value[ID::fmOsc1ToSync1]->setFromNormalized(0.0);
      value[ID::fmOsc1ToFreq2]->setFromNormalized(0.0);
      value[ID::fmOsc2ToSync1]->setFromNormalized(0.0);
      value[ID::gain]->setFromNormalized(0.5);
      value[ID::gainA]->setFromNormalized(0.05000000000000002);
      value[ID::gainD]->setFromNormalized(0.5);
      value[ID::gainS]->setFromNormalized(0.4999999999999999);
      value[ID::gainR]->setFromNormalized(0.09999999999999998);
      value[ID::gainEnvelopeCurve]->setFromNormalized(0.0);
      value[ID::filterCutoff]->setFromNormalized(1.0);
      value[ID::filterResonance]->setFromNormalized(0.49999999999999994);
      value[ID::filterFeedback]->setFromNormalized(0.0);
      value[ID::filterSaturation]->setFromNormalized(0.3);
      value[ID::filterDirty]->setFromInt(0);
      value[ID::filterType]->setFromInt(0);
      value[ID::filterShaper]->setFromInt(1);
      value[ID::filterA]->setFromNormalized(0.0);
      value[ID::filterD]->setFromNormalized(0.5);
      value[ID::filterS]->setFromNormalized(0.0);
      value[ID::filterR]->setFromNormalized(0.5);
      value[ID::filterCutoffAmount]->setFromNormalized(0.5);
      value[ID::filterResonanceAmount]->setFromNormalized(0.0);
      value[ID::filterKeyToCutoff]->setFromNormalized(0.5);
      value[ID::filterKeyToFeedback]->setFromNormalized(0.5);
      value[ID::modEnvelopeA]->setFromNormalized(0.0);
      value[ID::modEnvelopeCurve]->setFromNormalized(0.20800006389617923);
      value[ID::modEnvelopeToFreq1]->setFromNormalized(0.8279998898506165);
      value[ID::modEnvelopeToSync1]->setFromNormalized(0.0);
      value[ID::modEnvelopeToFreq2]->setFromNormalized(0.8360000252723694);
      value[ID::modEnvelopeToSync2]->setFromNormalized(0.0);
      value[ID::modLFOFrequency]->setFromNormalized(0.5);
      value[ID::modLFONoiseMix]->setFromNormalized(0.01);
      value[ID::modLFOToFreq1]->setFromNormalized(0.0);
      value[ID::modLFOToSync1]->setFromNormalized(0.0);
      value[ID::modLFOToFreq2]->setFromNormalized(0.0);
      value[ID::modLFOToSync2]->setFromNormalized(0.0);
      value[ID::pitchBend]->setFromNormalized(0.5);
      value[ID::unison]->setFromInt(0);
      value[ID::nVoice]->setFromInt(5);
    } break;

    case presetPitchLFO: {
      value[ID::bypass]->setFromInt(0);
      value[ID::osc1Gain]->setFromNormalized(1.0);
      value[ID::osc1Semi]->setFromNormalized(0.5);
      value[ID::osc1Cent]->setFromNormalized(0.32799991965293884);
      value[ID::osc1Sync]->setFromNormalized(0.06249999999999999);
      value[ID::osc1SyncType]->setFromInt(0);
      value[ID::osc1PTROrder]->setFromInt(16);
      value[ID::osc1Phase]->setFromNormalized(0.0);
      value[ID::osc1PhaseLock]->setFromInt(0);
      value[ID::osc2Gain]->setFromNormalized(1.0);
      value[ID::osc2Semi]->setFromNormalized(0.5);
      value[ID::osc2Cent]->setFromNormalized(0.6560002565383911);
      value[ID::osc2Sync]->setFromNormalized(0.06249999999999999);
      value[ID::osc2SyncType]->setFromInt(1);
      value[ID::osc2PTROrder]->setFromInt(16);
      value[ID::osc2Invert]->setFromInt(0);
      value[ID::osc2Phase]->setFromNormalized(0.0);
      value[ID::osc2PhaseLock]->setFromInt(0);
      value[ID::fmOsc1ToSync1]->setFromNormalized(0.0);
      value[ID::fmOsc1ToFreq2]->setFromNormalized(0.0);
      value[ID::fmOsc2ToSync1]->setFromNormalized(0.0);
      value[ID::gain]->setFromNormalized(0.5);
      value[ID::gainA]->setFromNormalized(0.05000000000000002);
      value[ID::gainD]->setFromNormalized(0.5);
      value[ID::gainS]->setFromNormalized(0.4999999999999999);
      value[ID::gainR]->setFromNormalized(0.747999906539917);
      value[ID::gainEnvelopeCurve]->setFromNormalized(0.0);
      value[ID::filterCutoff]->setFromNormalized(1.0);
      value[ID::filterResonance]->setFromNormalized(0.4999999999999999);
      value[ID::filterFeedback]->setFromNormalized(0.0);
      value[ID::filterSaturation]->setFromNormalized(0.3);
      value[ID::filterDirty]->setFromInt(0);
      value[ID::filterType]->setFromInt(0);
      value[ID::filterShaper]->setFromInt(1);
      value[ID::filterA]->setFromNormalized(0.0);
      value[ID::filterD]->setFromNormalized(0.5);
      value[ID::filterS]->setFromNormalized(0.0);
      value[ID::filterR]->setFromNormalized(0.5);
      value[ID::filterCutoffAmount]->setFromNormalized(0.5);
      value[ID::filterResonanceAmount]->setFromNormalized(0.0);
      value[ID::filterKeyToCutoff]->setFromNormalized(0.5);
      value[ID::filterKeyToFeedback]->setFromNormalized(0.5);
      value[ID::modEnvelopeA]->setFromNormalized(0.0);
      value[ID::modEnvelopeCurve]->setFromNormalized(0.5);
      value[ID::modEnvelopeToFreq1]->setFromNormalized(0.0);
      value[ID::modEnvelopeToSync1]->setFromNormalized(0.0);
      value[ID::modEnvelopeToFreq2]->setFromNormalized(0.0);
      value[ID::modEnvelopeToSync2]->setFromNormalized(0.0);
      value[ID::modLFOFrequency]->setFromNormalized(0.15600004792213443);
      value[ID::modLFONoiseMix]->setFromNormalized(0.01);
      value[ID::modLFOToFreq1]->setFromNormalized(0.0);
      value[ID::modLFOToSync1]->setFromNormalized(0.0);
      value[ID::modLFOToFreq2]->setFromNormalized(0.5199999213218689);
      value[ID::modLFOToSync2]->setFromNormalized(0.2839999794960022);
      value[ID::pitchBend]->setFromNormalized(0.5);
      value[ID::unison]->setFromInt(1);
      value[ID::nVoice]->setFromInt(5);
    } break;

    case presetPulse: {
      value[ID::bypass]->setFromInt(0);
      value[ID::osc1Gain]->setFromNormalized(1.0);
      value[ID::osc1Semi]->setFromNormalized(0.5);
      value[ID::osc1Cent]->setFromNormalized(0.5);
      value[ID::osc1Sync]->setFromNormalized(0.06249999999999999);
      value[ID::osc1SyncType]->setFromInt(0);
      value[ID::osc1PTROrder]->setFromInt(16);
      value[ID::osc1Phase]->setFromNormalized(0.0);
      value[ID::osc1PhaseLock]->setFromInt(1);
      value[ID::osc2Gain]->setFromNormalized(1.0);
      value[ID::osc2Semi]->setFromNormalized(0.5);
      value[ID::osc2Cent]->setFromNormalized(0.5);
      value[ID::osc2Sync]->setFromNormalized(0.06249999999999999);
      value[ID::osc2SyncType]->setFromInt(0);
      value[ID::osc2PTROrder]->setFromInt(16);
      value[ID::osc2Invert]->setFromInt(1);
      value[ID::osc2Phase]->setFromNormalized(0.5359998941421509);
      value[ID::osc2PhaseLock]->setFromInt(1);
      value[ID::fmOsc1ToSync1]->setFromNormalized(0.0);
      value[ID::fmOsc1ToFreq2]->setFromNormalized(0.0);
      value[ID::fmOsc2ToSync1]->setFromNormalized(0.0);
      value[ID::gain]->setFromNormalized(0.5);
      value[ID::gainA]->setFromNormalized(0.05000000000000002);
      value[ID::gainD]->setFromNormalized(0.5);
      value[ID::gainS]->setFromNormalized(0.4999999999999999);
      value[ID::gainR]->setFromNormalized(0.3160000145435333);
      value[ID::gainEnvelopeCurve]->setFromNormalized(0.0);
      value[ID::filterCutoff]->setFromNormalized(1.0);
      value[ID::filterResonance]->setFromNormalized(0.4999999999999999);
      value[ID::filterFeedback]->setFromNormalized(0.0);
      value[ID::filterSaturation]->setFromNormalized(0.3);
      value[ID::filterDirty]->setFromInt(0);
      value[ID::filterType]->setFromInt(0);
      value[ID::filterShaper]->setFromInt(1);
      value[ID::filterA]->setFromNormalized(0.0);
      value[ID::filterD]->setFromNormalized(0.5);
      value[ID::filterS]->setFromNormalized(0.0);
      value[ID::filterR]->setFromNormalized(0.5);
      value[ID::filterCutoffAmount]->setFromNormalized(0.5);
      value[ID::filterResonanceAmount]->setFromNormalized(0.0);
      value[ID::filterKeyToCutoff]->setFromNormalized(0.5);
      value[ID::filterKeyToFeedback]->setFromNormalized(0.5);
      value[ID::modEnvelopeA]->setFromNormalized(0.0);
      value[ID::modEnvelopeCurve]->setFromNormalized(0.5);
      value[ID::modEnvelopeToFreq1]->setFromNormalized(0.0);
      value[ID::modEnvelopeToSync1]->setFromNormalized(0.0);
      value[ID::modEnvelopeToFreq2]->setFromNormalized(0.0);
      value[ID::modEnvelopeToSync2]->setFromNormalized(0.0);
      value[ID::modLFOFrequency]->setFromNormalized(0.5);
      value[ID::modLFONoiseMix]->setFromNormalized(0.01);
      value[ID::modLFOToFreq1]->setFromNormalized(0.0);
      value[ID::modLFOToSync1]->setFromNormalized(0.0);
      value[ID::modLFOToFreq2]->setFromNormalized(0.0);
      value[ID::modLFOToSync2]->setFromNormalized(0.0);
      value[ID::pitchBend]->setFromNormalized(0.5);
      value[ID::unison]->setFromInt(0);
      value[ID::nVoice]->setFromInt(5);
    } break;

    case presetRunOutOfIdea: {
      value[ID::bypass]->setFromInt(0);
      value[ID::osc1Gain]->setFromNormalized(1.0);
      value[ID::osc1Semi]->setFromNormalized(1.0);
      value[ID::osc1Cent]->setFromNormalized(0.0);
      value[ID::osc1Sync]->setFromNormalized(0.3944999873638153);
      value[ID::osc1SyncType]->setFromInt(2);
      value[ID::osc1PTROrder]->setFromInt(16);
      value[ID::osc1Phase]->setFromNormalized(0.0);
      value[ID::osc1PhaseLock]->setFromInt(0);
      value[ID::osc2Gain]->setFromNormalized(1.0);
      value[ID::osc2Semi]->setFromNormalized(0.0);
      value[ID::osc2Cent]->setFromNormalized(1.0);
      value[ID::osc2Sync]->setFromNormalized(0.4025000035762787);
      value[ID::osc2SyncType]->setFromInt(3);
      value[ID::osc2PTROrder]->setFromInt(16);
      value[ID::osc2Invert]->setFromInt(0);
      value[ID::osc2Phase]->setFromNormalized(0.0);
      value[ID::osc2PhaseLock]->setFromInt(0);
      value[ID::fmOsc1ToSync1]->setFromNormalized(0.24000000953674316);
      value[ID::fmOsc1ToFreq2]->setFromNormalized(0.2360000312328339);
      value[ID::fmOsc2ToSync1]->setFromNormalized(0.5199998617172241);
      value[ID::gain]->setFromNormalized(0.403999924659729);
      value[ID::gainA]->setFromNormalized(0.3859999477863312);
      value[ID::gainD]->setFromNormalized(0.42399999499320984);
      value[ID::gainS]->setFromNormalized(0.8360000252723694);
      value[ID::gainR]->setFromNormalized(0.5679999589920044);
      value[ID::gainEnvelopeCurve]->setFromNormalized(0.0);
      value[ID::filterCutoff]->setFromNormalized(0.46000000834465027);
      value[ID::filterResonance]->setFromNormalized(1.0);
      value[ID::filterFeedback]->setFromNormalized(1.0);
      value[ID::filterSaturation]->setFromNormalized(1.0);
      value[ID::filterDirty]->setFromInt(0);
      value[ID::filterType]->setFromInt(0);
      value[ID::filterShaper]->setFromInt(1);
      value[ID::filterA]->setFromNormalized(0.0);
      value[ID::filterD]->setFromNormalized(0.5);
      value[ID::filterS]->setFromNormalized(0.0);
      value[ID::filterR]->setFromNormalized(0.7879998683929443);
      value[ID::filterCutoffAmount]->setFromNormalized(0.5);
      value[ID::filterResonanceAmount]->setFromNormalized(0.0);
      value[ID::filterKeyToCutoff]->setFromNormalized(1.0);
      value[ID::filterKeyToFeedback]->setFromNormalized(0.5);
      value[ID::modEnvelopeA]->setFromNormalized(0.0);
      value[ID::modEnvelopeCurve]->setFromNormalized(0.5);
      value[ID::modEnvelopeToFreq1]->setFromNormalized(0.0);
      value[ID::modEnvelopeToSync1]->setFromNormalized(0.0);
      value[ID::modEnvelopeToFreq2]->setFromNormalized(0.0);
      value[ID::modEnvelopeToSync2]->setFromNormalized(0.0);
      value[ID::modLFOFrequency]->setFromNormalized(0.892000138759613);
      value[ID::modLFONoiseMix]->setFromNormalized(0.01);
      value[ID::modLFOToFreq1]->setFromNormalized(0.0);
      value[ID::modLFOToSync1]->setFromNormalized(0.8759999871253967);
      value[ID::modLFOToFreq2]->setFromNormalized(0.0);
      value[ID::modLFOToSync2]->setFromNormalized(0.8720000982284546);
      value[ID::pitchBend]->setFromNormalized(0.5);
      value[ID::unison]->setFromInt(1);
      value[ID::nVoice]->setFromInt(5);
    } break;

    case presetSingleOscSyncLFO: {
      value[ID::bypass]->setFromInt(0);
      value[ID::osc1Gain]->setFromNormalized(1.0);
      value[ID::osc1Semi]->setFromNormalized(0.0);
      value[ID::osc1Cent]->setFromNormalized(0.5);
      value[ID::osc1Sync]->setFromNormalized(0.11450003832578659);
      value[ID::osc1SyncType]->setFromInt(1);
      value[ID::osc1PTROrder]->setFromInt(16);
      value[ID::osc1Phase]->setFromNormalized(0.0);
      value[ID::osc1PhaseLock]->setFromInt(0);
      value[ID::osc2Gain]->setFromNormalized(0.0);
      value[ID::osc2Semi]->setFromNormalized(0.7520004510879517);
      value[ID::osc2Cent]->setFromNormalized(0.5);
      value[ID::osc2Sync]->setFromNormalized(0.06249999999999999);
      value[ID::osc2SyncType]->setFromInt(0);
      value[ID::osc2PTROrder]->setFromInt(16);
      value[ID::osc2Invert]->setFromInt(0);
      value[ID::osc2Phase]->setFromNormalized(0.0);
      value[ID::osc2PhaseLock]->setFromInt(0);
      value[ID::fmOsc1ToSync1]->setFromNormalized(0.0);
      value[ID::fmOsc1ToFreq2]->setFromNormalized(0.0);
      value[ID::fmOsc2ToSync1]->setFromNormalized(0.0);
      value[ID::gain]->setFromNormalized(0.5);
      value[ID::gainA]->setFromNormalized(0.05000000000000002);
      value[ID::gainD]->setFromNormalized(0.5);
      value[ID::gainS]->setFromNormalized(0.4999999999999999);
      value[ID::gainR]->setFromNormalized(0.5400000214576721);
      value[ID::gainEnvelopeCurve]->setFromNormalized(0.6840000152587891);
      value[ID::filterCutoff]->setFromNormalized(0.7719995975494385);
      value[ID::filterResonance]->setFromNormalized(0.9160001873970032);
      value[ID::filterFeedback]->setFromNormalized(0.6880000829696656);
      value[ID::filterSaturation]->setFromNormalized(0.871999979019165);
      value[ID::filterDirty]->setFromInt(0);
      value[ID::filterType]->setFromInt(0);
      value[ID::filterShaper]->setFromInt(1);
      value[ID::filterA]->setFromNormalized(0.0);
      value[ID::filterD]->setFromNormalized(0.5);
      value[ID::filterS]->setFromNormalized(0.0);
      value[ID::filterR]->setFromNormalized(0.5);
      value[ID::filterCutoffAmount]->setFromNormalized(0.5320000052452087);
      value[ID::filterResonanceAmount]->setFromNormalized(0.0);
      value[ID::filterKeyToCutoff]->setFromNormalized(0.5920002460479736);
      value[ID::filterKeyToFeedback]->setFromNormalized(0.3080002963542938);
      value[ID::modEnvelopeA]->setFromNormalized(0.8479998707771301);
      value[ID::modEnvelopeCurve]->setFromNormalized(0.2280000001192093);
      value[ID::modEnvelopeToFreq1]->setFromNormalized(0.0);
      value[ID::modEnvelopeToSync1]->setFromNormalized(0.0);
      value[ID::modEnvelopeToFreq2]->setFromNormalized(0.0);
      value[ID::modEnvelopeToSync2]->setFromNormalized(0.0);
      value[ID::modLFOFrequency]->setFromNormalized(0.23600004613399508);
      value[ID::modLFONoiseMix]->setFromNormalized(0.01);
      value[ID::modLFOToFreq1]->setFromNormalized(0.0);
      value[ID::modLFOToSync1]->setFromNormalized(0.7760003209114075);
      value[ID::modLFOToFreq2]->setFromNormalized(0.0);
      value[ID::modLFOToSync2]->setFromNormalized(0.0);
      value[ID::pitchBend]->setFromNormalized(0.5);
      value[ID::unison]->setFromInt(1);
      value[ID::nVoice]->setFromInt(5);
    } break;

    case presetSomehowTonal: {
      value[ID::bypass]->setFromInt(0);
      value[ID::osc1Gain]->setFromNormalized(1.0);
      value[ID::osc1Semi]->setFromNormalized(0.255999892950058);
      value[ID::osc1Cent]->setFromNormalized(0.5);
      value[ID::osc1Sync]->setFromNormalized(0.2264999896287918);
      value[ID::osc1SyncType]->setFromInt(1);
      value[ID::osc1PTROrder]->setFromInt(16);
      value[ID::osc1Phase]->setFromNormalized(0.0);
      value[ID::osc1PhaseLock]->setFromInt(0);
      value[ID::osc2Gain]->setFromNormalized(1.0);
      value[ID::osc2Semi]->setFromNormalized(0.5040001273155212);
      value[ID::osc2Cent]->setFromNormalized(0.5);
      value[ID::osc2Sync]->setFromNormalized(0.4945000112056732);
      value[ID::osc2SyncType]->setFromInt(1);
      value[ID::osc2PTROrder]->setFromInt(16);
      value[ID::osc2Invert]->setFromInt(0);
      value[ID::osc2Phase]->setFromNormalized(0.0);
      value[ID::osc2PhaseLock]->setFromInt(0);
      value[ID::fmOsc1ToSync1]->setFromNormalized(0.08399999886751176);
      value[ID::fmOsc1ToFreq2]->setFromNormalized(0.0);
      value[ID::fmOsc2ToSync1]->setFromNormalized(0.32399991154670715);
      value[ID::gain]->setFromNormalized(0.5);
      value[ID::gainA]->setFromNormalized(0.3060000240802765);
      value[ID::gainD]->setFromNormalized(0.5);
      value[ID::gainS]->setFromNormalized(1.0);
      value[ID::gainR]->setFromNormalized(0.3240000009536743);
      value[ID::gainEnvelopeCurve]->setFromNormalized(0.0);
      value[ID::filterCutoff]->setFromNormalized(0.4840001165866852);
      value[ID::filterResonance]->setFromNormalized(1.0);
      value[ID::filterFeedback]->setFromNormalized(0.6320000886917114);
      value[ID::filterSaturation]->setFromNormalized(0.6439999341964722);
      value[ID::filterDirty]->setFromInt(0);
      value[ID::filterType]->setFromInt(0);
      value[ID::filterShaper]->setFromInt(1);
      value[ID::filterA]->setFromNormalized(0.48000001907348633);
      value[ID::filterD]->setFromNormalized(0.5);
      value[ID::filterS]->setFromNormalized(0.0);
      value[ID::filterR]->setFromNormalized(0.5);
      value[ID::filterCutoffAmount]->setFromNormalized(0.7159997820854187);
      value[ID::filterResonanceAmount]->setFromNormalized(0.0);
      value[ID::filterKeyToCutoff]->setFromNormalized(1.0);
      value[ID::filterKeyToFeedback]->setFromNormalized(0.5);
      value[ID::modEnvelopeA]->setFromNormalized(0.0);
      value[ID::modEnvelopeCurve]->setFromNormalized(0.5);
      value[ID::modEnvelopeToFreq1]->setFromNormalized(0.0);
      value[ID::modEnvelopeToSync1]->setFromNormalized(0.0);
      value[ID::modEnvelopeToFreq2]->setFromNormalized(0.0);
      value[ID::modEnvelopeToSync2]->setFromNormalized(0.0);
      value[ID::modLFOFrequency]->setFromNormalized(0.5);
      value[ID::modLFONoiseMix]->setFromNormalized(0.01);
      value[ID::modLFOToFreq1]->setFromNormalized(0.0);
      value[ID::modLFOToSync1]->setFromNormalized(0.0);
      value[ID::modLFOToFreq2]->setFromNormalized(0.0);
      value[ID::modLFOToSync2]->setFromNormalized(0.0);
      value[ID::pitchBend]->setFromNormalized(0.5);
      value[ID::unison]->setFromInt(0);
      value[ID::nVoice]->setFromInt(5);
    } break;

    case presetTeachMeEnglishCoolWords: {
      value[ID::bypass]->setFromInt(0);
      value[ID::osc1Gain]->setFromNormalized(1.0);
      value[ID::osc1Semi]->setFromNormalized(0.5);
      value[ID::osc1Cent]->setFromNormalized(0.5);
      value[ID::osc1Sync]->setFromNormalized(0.06249999999999999);
      value[ID::osc1SyncType]->setFromInt(1);
      value[ID::osc1PTROrder]->setFromInt(16);
      value[ID::osc1Phase]->setFromNormalized(0.0);
      value[ID::osc1PhaseLock]->setFromInt(0);
      value[ID::osc2Gain]->setFromNormalized(1.0);
      value[ID::osc2Semi]->setFromNormalized(0.5);
      value[ID::osc2Cent]->setFromNormalized(0.5760001540184021);
      value[ID::osc2Sync]->setFromNormalized(0.06249999999999999);
      value[ID::osc2SyncType]->setFromInt(2);
      value[ID::osc2PTROrder]->setFromInt(16);
      value[ID::osc2Invert]->setFromInt(0);
      value[ID::osc2Phase]->setFromNormalized(0.0);
      value[ID::osc2PhaseLock]->setFromInt(0);
      value[ID::fmOsc1ToSync1]->setFromNormalized(0.0);
      value[ID::fmOsc1ToFreq2]->setFromNormalized(0.0);
      value[ID::fmOsc2ToSync1]->setFromNormalized(0.0);
      value[ID::gain]->setFromNormalized(0.6400002837181091);
      value[ID::gainA]->setFromNormalized(0.0780000388622284);
      value[ID::gainD]->setFromNormalized(0.5);
      value[ID::gainS]->setFromNormalized(0.4999999999999999);
      value[ID::gainR]->setFromNormalized(0.41600000858306885);
      value[ID::gainEnvelopeCurve]->setFromNormalized(0.0);
      value[ID::filterCutoff]->setFromNormalized(0.49599960446357727);
      value[ID::filterResonance]->setFromNormalized(0.7520000338554382);
      value[ID::filterFeedback]->setFromNormalized(0.6159999966621399);
      value[ID::filterSaturation]->setFromNormalized(0.3);
      value[ID::filterDirty]->setFromInt(0);
      value[ID::filterType]->setFromInt(0);
      value[ID::filterShaper]->setFromInt(1);
      value[ID::filterA]->setFromNormalized(0.5800000429153442);
      value[ID::filterD]->setFromNormalized(0.5);
      value[ID::filterS]->setFromNormalized(0.0);
      value[ID::filterR]->setFromNormalized(0.5);
      value[ID::filterCutoffAmount]->setFromNormalized(0.6640000939369202);
      value[ID::filterResonanceAmount]->setFromNormalized(0.0);
      value[ID::filterKeyToCutoff]->setFromNormalized(0.5);
      value[ID::filterKeyToFeedback]->setFromNormalized(0.5);
      value[ID::modEnvelopeA]->setFromNormalized(0.7560001015663147);
      value[ID::modEnvelopeCurve]->setFromNormalized(0.30399996042251587);
      value[ID::modEnvelopeToFreq1]->setFromNormalized(0.0);
      value[ID::modEnvelopeToSync1]->setFromNormalized(0.6599999666213989);
      value[ID::modEnvelopeToFreq2]->setFromNormalized(0.0);
      value[ID::modEnvelopeToSync2]->setFromNormalized(0.0);
      value[ID::modLFOFrequency]->setFromNormalized(0.5);
      value[ID::modLFONoiseMix]->setFromNormalized(0.01);
      value[ID::modLFOToFreq1]->setFromNormalized(0.0);
      value[ID::modLFOToSync1]->setFromNormalized(0.0);
      value[ID::modLFOToFreq2]->setFromNormalized(0.0);
      value[ID::modLFOToSync2]->setFromNormalized(0.5480000972747803);
      value[ID::pitchBend]->setFromNormalized(0.5);
      value[ID::unison]->setFromInt(0);
      value[ID::nVoice]->setFromInt(5);
    } break;

    case presetThisIsntAModem: {
      value[ID::bypass]->setFromInt(0);
      value[ID::osc1Gain]->setFromNormalized(0.0);
      value[ID::osc1Semi]->setFromNormalized(0.5039998292922974);
      value[ID::osc1Cent]->setFromNormalized(0.5);
      value[ID::osc1Sync]->setFromNormalized(0.06249999999999999);
      value[ID::osc1SyncType]->setFromInt(0);
      value[ID::osc1PTROrder]->setFromInt(11);
      value[ID::osc1Phase]->setFromNormalized(0.0);
      value[ID::osc1PhaseLock]->setFromInt(1);
      value[ID::osc2Gain]->setFromNormalized(1.0);
      value[ID::osc2Semi]->setFromNormalized(0.5160000324249268);
      value[ID::osc2Cent]->setFromNormalized(0.5);
      value[ID::osc2Sync]->setFromNormalized(0.34250012040138245);
      value[ID::osc2SyncType]->setFromInt(3);
      value[ID::osc2PTROrder]->setFromInt(5);
      value[ID::osc2Invert]->setFromInt(1);
      value[ID::osc2Phase]->setFromNormalized(0.4960000813007355);
      value[ID::osc2PhaseLock]->setFromInt(1);
      value[ID::fmOsc1ToSync1]->setFromNormalized(0.0);
      value[ID::fmOsc1ToFreq2]->setFromNormalized(0.9200000166893005);
      value[ID::fmOsc2ToSync1]->setFromNormalized(0.30000001192092896);
      value[ID::gain]->setFromNormalized(0.7159997820854187);
      value[ID::gainA]->setFromNormalized(0.05000000000000002);
      value[ID::gainD]->setFromNormalized(0.5);
      value[ID::gainS]->setFromNormalized(0.4999999999999999);
      value[ID::gainR]->setFromNormalized(0.09999999999999998);
      value[ID::gainEnvelopeCurve]->setFromNormalized(0.0);
      value[ID::filterCutoff]->setFromNormalized(0.8120005130767822);
      value[ID::filterResonance]->setFromNormalized(1.0);
      value[ID::filterFeedback]->setFromNormalized(0.0);
      value[ID::filterSaturation]->setFromNormalized(0.3);
      value[ID::filterDirty]->setFromInt(0);
      value[ID::filterType]->setFromInt(0);
      value[ID::filterShaper]->setFromInt(1);
      value[ID::filterA]->setFromNormalized(0.0);
      value[ID::filterD]->setFromNormalized(0.5);
      value[ID::filterS]->setFromNormalized(0.0);
      value[ID::filterR]->setFromNormalized(0.5);
      value[ID::filterCutoffAmount]->setFromNormalized(0.6480000019073486);
      value[ID::filterResonanceAmount]->setFromNormalized(0.0);
      value[ID::filterKeyToCutoff]->setFromNormalized(0.5);
      value[ID::filterKeyToFeedback]->setFromNormalized(0.5);
      value[ID::modEnvelopeA]->setFromNormalized(0.0);
      value[ID::modEnvelopeCurve]->setFromNormalized(0.5);
      value[ID::modEnvelopeToFreq1]->setFromNormalized(0.0);
      value[ID::modEnvelopeToSync1]->setFromNormalized(0.0);
      value[ID::modEnvelopeToFreq2]->setFromNormalized(0.0);
      value[ID::modEnvelopeToSync2]->setFromNormalized(0.0);
      value[ID::modLFOFrequency]->setFromNormalized(0.5);
      value[ID::modLFONoiseMix]->setFromNormalized(0.01);
      value[ID::modLFOToFreq1]->setFromNormalized(0.0);
      value[ID::modLFOToSync1]->setFromNormalized(0.0);
      value[ID::modLFOToFreq2]->setFromNormalized(0.0);
      value[ID::modLFOToSync2]->setFromNormalized(0.0);
      value[ID::pitchBend]->setFromNormalized(0.5);
      value[ID::unison]->setFromInt(0);
      value[ID::nVoice]->setFromInt(5);
    } break;
  }
}
